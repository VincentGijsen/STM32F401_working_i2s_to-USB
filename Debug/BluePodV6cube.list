
BluePodV6cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b950  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800baf0  0800baf0  0001baf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bba0  0800bba0  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  0800bba0  0800bba0  0001bba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bba8  0800bba8  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bba8  0800bba8  0001bba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbac  0800bbac  0001bbac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0800bbb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a6e8  20000178  0800bd28  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a860  0800bd28  0002a860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024614  00000000  00000000  000201eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055b8  00000000  00000000  000447ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da8  00000000  00000000  00049db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016d9  00000000  00000000  0004bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006c8b  00000000  00000000  0004d239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002495c  00000000  00000000  00053ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e412  00000000  00000000  00078820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007fac  00000000  00000000  00116c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0011ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bad8 	.word	0x0800bad8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	0800bad8 	.word	0x0800bad8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_I2S_RxHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	//do something
	//position where to star treading
	pInBuffPtr = &i2SDataBuffer[0];
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <HAL_I2S_RxHalfCpltCallback+0x20>)
 80004e6:	4a06      	ldr	r2, [pc, #24]	; (8000500 <HAL_I2S_RxHalfCpltCallback+0x24>)
 80004e8:	601a      	str	r2, [r3, #0]
	dataReady=1;
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_I2S_RxHalfCpltCallback+0x28>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(LED_GPIO_Port,  LED_Pin);
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000290 	.word	0x20000290
 8000504:	2000028a 	.word	0x2000028a

08000508 <HAL_I2S_RxCpltCallback>:

//void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	//
	pInBuffPtr = &i2SDataBuffer[BUFFER_SIZE/2];
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <HAL_I2S_RxCpltCallback+0x20>)
 8000512:	4a06      	ldr	r2, [pc, #24]	; (800052c <HAL_I2S_RxCpltCallback+0x24>)
 8000514:	601a      	str	r2, [r3, #0]
	dataReady=2;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <HAL_I2S_RxCpltCallback+0x28>)
 8000518:	2202      	movs	r2, #2
 800051a:	701a      	strb	r2, [r3, #0]

}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	20000000 	.word	0x20000000
 800052c:	20000b90 	.word	0x20000b90
 8000530:	2000028a 	.word	0x2000028a

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fbb8 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f828 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f90c 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 8000544:	f000 f8ea 	bl	800071c <MX_DMA_Init>
  MX_I2S2_Init();
 8000548:	f000 f890 	bl	800066c <MX_I2S2_Init>
  MX_USART2_UART_Init();
 800054c:	f000 f8bc 	bl	80006c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)pInBuffPtr, BUFFER_SIZE);
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <main+0x48>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8000558:	4619      	mov	r1, r3
 800055a:	4809      	ldr	r0, [pc, #36]	; (8000580 <main+0x4c>)
 800055c:	f001 fb3c 	bl	8001bd8 <HAL_I2S_Receive_DMA>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000560:	f007 ffde 	bl	8008520 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <main+0x50>)
 8000566:	2100      	movs	r1, #0
 8000568:	4807      	ldr	r0, [pc, #28]	; (8000588 <main+0x54>)
 800056a:	f008 f823 	bl	80085b4 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <main+0x58>)
 8000572:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f007 fff8 	bl	8008568 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x44>
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000
 8000580:	20000194 	.word	0x20000194
 8000584:	0800bb5c 	.word	0x0800bb5c
 8000588:	0800081d 	.word	0x0800081d
 800058c:	20000284 	.word	0x20000284

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f00b f9b0 	bl	800b904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <SystemClock_Config+0xd4>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a29      	ldr	r2, [pc, #164]	; (8000664 <SystemClock_Config+0xd4>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <SystemClock_Config+0xd4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <SystemClock_Config+0xd8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005dc:	4a22      	ldr	r2, [pc, #136]	; (8000668 <SystemClock_Config+0xd8>)
 80005de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <SystemClock_Config+0xd8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005f0:	2303      	movs	r3, #3
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fa:	2301      	movs	r3, #1
 80005fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fe:	2310      	movs	r3, #16
 8000600:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800060c:	230f      	movs	r3, #15
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000610:	2390      	movs	r3, #144	; 0x90
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000618:	2305      	movs	r3, #5
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f003 f9bd 	bl	80039a0 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800062c:	f000 f94e 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fc20 	bl	8003e90 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000656:	f000 f939 	bl	80008cc <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_I2S2_Init+0x54>)
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <MX_I2S2_Init+0x58>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_I2S2_Init+0x54>)
 8000678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800067c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_I2S2_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_I2S2_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MX_I2S2_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_I2S2_Init+0x54>)
 8000692:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000696:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_I2S2_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_I2S2_Init+0x54>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_I2S2_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_I2S2_Init+0x54>)
 80006ac:	f001 f954 	bl	8001958 <HAL_I2S_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80006b6:	f000 f909 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000194 	.word	0x20000194
 80006c4:	40003800 	.word	0x40003800

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_USART2_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 8000700:	f004 f99a 	bl	8004a38 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f8df 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000023c 	.word	0x2000023c
 8000718:	40004400 	.word	0x40004400

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_DMA_Init+0x3c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <MX_DMA_Init+0x3c>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_DMA_Init+0x3c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2105      	movs	r1, #5
 8000742:	200e      	movs	r0, #14
 8000744:	f000 fbd0 	bl	8000ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000748:	200e      	movs	r0, #14
 800074a:	f000 fbe9 	bl	8000f20 <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b27      	ldr	r3, [pc, #156]	; (8000814 <MX_GPIO_Init+0xb8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a26      	ldr	r2, [pc, #152]	; (8000814 <MX_GPIO_Init+0xb8>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_GPIO_Init+0xb8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0xb8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <MX_GPIO_Init+0xb8>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_GPIO_Init+0xb8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_GPIO_Init+0xb8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_GPIO_Init+0xb8>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_GPIO_Init+0xb8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_GPIO_Init+0xb8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <MX_GPIO_Init+0xb8>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_GPIO_Init+0xb8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0xbc>)
 80007ea:	f001 f89b 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0xbc>)
 8000808:	f000 ff08 	bl	800161c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	; 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020800 	.word	0x40020800

0800081c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000824:	f00a fbaa 	bl	800af7c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  for(;;)
  {
   // osDelay(1);

	  if(usbPkgSendFlag){
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <StartDefaultTask+0x84>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d028      	beq.n	8000884 <StartDefaultTask+0x68>
	 		  //delayed start of sending (triggered by SOF flag)
	 		  if(pdevRef !=0){
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <StartDefaultTask+0x88>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d024      	beq.n	8000884 <StartDefaultTask+0x68>
	 			  for(int x=0;x<0xFFFF;x++){
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	e00c      	b.n	800085a <StartDefaultTask+0x3e>
	 				  for(int y=0;y<0x0F;y++){
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	e003      	b.n	800084e <StartDefaultTask+0x32>
	 				 asm("NOP");
 8000846:	bf00      	nop
	 				  for(int y=0;y<0x0F;y++){
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	3301      	adds	r3, #1
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	2b0e      	cmp	r3, #14
 8000852:	ddf8      	ble.n	8000846 <StartDefaultTask+0x2a>
	 			  for(int x=0;x<0xFFFF;x++){
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	3301      	adds	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000860:	4293      	cmp	r3, r2
 8000862:	dded      	ble.n	8000840 <StartDefaultTask+0x24>
	 				  }
	 			 }
	 		  //osDelay(100);
	 		  USBD_LL_FlushEP(pdevRef, 0x82U);
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <StartDefaultTask+0x88>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2182      	movs	r1, #130	; 0x82
 800086a:	4618      	mov	r0, r3
 800086c:	f00a ff08 	bl	800b680 <USBD_LL_FlushEP>
	 		        USBD_LL_Transmit(pdevRef, 0x82U, NULL, 0);
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <StartDefaultTask+0x88>)
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	2300      	movs	r3, #0
 8000876:	2200      	movs	r2, #0
 8000878:	2182      	movs	r1, #130	; 0x82
 800087a:	f00a ffa9 	bl	800b7d0 <USBD_LL_Transmit>
	 		        usbPkgSendFlag=0;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <StartDefaultTask+0x84>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
	 		  }
	 	  }

	    // osDelay(1);
	 	 for(int x=0;x<0xFFFF;x++){
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	e003      	b.n	8000892 <StartDefaultTask+0x76>
	 		 asm("NOP");
 800088a:	bf00      	nop
	 	 for(int x=0;x<0xFFFF;x++){
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000898:	4293      	cmp	r3, r2
 800089a:	ddf6      	ble.n	800088a <StartDefaultTask+0x6e>
	  if(usbPkgSendFlag){
 800089c:	e7c4      	b.n	8000828 <StartDefaultTask+0xc>
 800089e:	bf00      	nop
 80008a0:	20000289 	.word	0x20000289
 80008a4:	2000171c 	.word	0x2000171c

080008a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d101      	bne.n	80008be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ba:	f000 fa19 	bl	8000cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40010000 	.word	0x40010000

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_MspInit+0x54>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a11      	ldr	r2, [pc, #68]	; (800092c <HAL_MspInit+0x54>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_MspInit+0x54>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_MspInit+0x54>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_MspInit+0x54>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_MspInit+0x54>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	210f      	movs	r1, #15
 800091a:	f06f 0001 	mvn.w	r0, #1
 800091e:	f000 fae3 	bl	8000ee8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08e      	sub	sp, #56	; 0x38
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a39      	ldr	r2, [pc, #228]	; (8000a44 <HAL_I2S_MspInit+0x114>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d16c      	bne.n	8000a3c <HAL_I2S_MspInit+0x10c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000962:	2301      	movs	r3, #1
 8000964:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 60;
 8000966:	233c      	movs	r3, #60	; 0x3c
 8000968:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fc9e 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800097e:	f7ff ffa5 	bl	80008cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <HAL_I2S_MspInit+0x118>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <HAL_I2S_MspInit+0x118>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <HAL_I2S_MspInit+0x118>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <HAL_I2S_MspInit+0x118>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <HAL_I2S_MspInit+0x118>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <HAL_I2S_MspInit+0x118>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 80009ba:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009cc:	2305      	movs	r3, #5
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	481d      	ldr	r0, [pc, #116]	; (8000a4c <HAL_I2S_MspInit+0x11c>)
 80009d8:	f000 fe20 	bl	800161c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 80009de:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <HAL_I2S_MspInit+0x124>)
 80009e0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 80009f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fa:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 80009fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a02:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 8000a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 8000a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a12:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 8000a22:	f000 fa8b 	bl	8000f3c <HAL_DMA_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_I2S_MspInit+0x100>
    {
      Error_Handler();
 8000a2c:	f7ff ff4e 	bl	80008cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 8000a34:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a36:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <HAL_I2S_MspInit+0x120>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a3c:	bf00      	nop
 8000a3e:	3738      	adds	r7, #56	; 0x38
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40003800 	.word	0x40003800
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	200001dc 	.word	0x200001dc
 8000a54:	40026058 	.word	0x40026058

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_UART_MspInit+0x84>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d12b      	bne.n	8000ad2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000ace:	f000 fda5 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <HAL_InitTick+0xd0>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	4a2d      	ldr	r2, [pc, #180]	; (8000bb8 <HAL_InitTick+0xd0>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6453      	str	r3, [r2, #68]	; 0x44
 8000b08:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <HAL_InitTick+0xd0>)
 8000b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b14:	f107 020c 	add.w	r2, r7, #12
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f003 fb96 	bl	8004250 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b24:	f003 fb80 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8000b28:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2c:	4a23      	ldr	r2, [pc, #140]	; (8000bbc <HAL_InitTick+0xd4>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	0c9b      	lsrs	r3, r3, #18
 8000b34:	3b01      	subs	r3, #1
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <HAL_InitTick+0xd8>)
 8000b3a:	4a22      	ldr	r2, [pc, #136]	; (8000bc4 <HAL_InitTick+0xdc>)
 8000b3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <HAL_InitTick+0xd8>)
 8000b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b44:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b46:	4a1e      	ldr	r2, [pc, #120]	; (8000bc0 <HAL_InitTick+0xd8>)
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_InitTick+0xd8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <HAL_InitTick+0xd8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_InitTick+0xd8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b5e:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <HAL_InitTick+0xd8>)
 8000b60:	f003 fcf6 	bl	8004550 <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d11b      	bne.n	8000baa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b72:	4813      	ldr	r0, [pc, #76]	; (8000bc0 <HAL_InitTick+0xd8>)
 8000b74:	f003 fd46 	bl	8004604 <HAL_TIM_Base_Start_IT>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d111      	bne.n	8000baa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b86:	2019      	movs	r0, #25
 8000b88:	f000 f9ca 	bl	8000f20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	d808      	bhi.n	8000ba4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b92:	2200      	movs	r2, #0
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	2019      	movs	r0, #25
 8000b98:	f000 f9a6 	bl	8000ee8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_InitTick+0xe0>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e002      	b.n	8000baa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3730      	adds	r7, #48	; 0x30
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	20001550 	.word	0x20001550
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	20000008 	.word	0x20000008

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <DMA1_Stream3_IRQHandler+0x10>)
 8000bfe:	f000 faa3 	bl	8001148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001dc 	.word	0x200001dc

08000c0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c12:	f003 fd59 	bl	80046c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20001550 	.word	0x20001550

08000c20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <OTG_FS_IRQHandler+0x10>)
 8000c26:	f001 fd81 	bl	800272c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200065e8 	.word	0x200065e8

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f00a fe9b 	bl	800b9c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fc53 	bl	8000534 <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8000c9c:	0800bbb0 	.word	0x0800bbb0
  ldr r2, =_sbss
 8000ca0:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8000ca4:	2000a860 	.word	0x2000a860

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_Init+0x40>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_Init+0x40>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_Init+0x40>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f8fc 	bl	8000ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	200f      	movs	r0, #15
 8000cdc:	f7ff ff04 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fdfa 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2000000c 	.word	0x2000000c
 8000d14:	20001598 	.word	0x20001598

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20001598 	.word	0x20001598

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff ffee 	bl	8000d18 <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_Delay+0x44>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffde 	bl	8000d18 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000000c 	.word	0x2000000c

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4907      	ldr	r1, [pc, #28]	; (8000e14 <__NVIC_EnableIRQ+0x38>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff4c 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efa:	f7ff ff61 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000efe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	6978      	ldr	r0, [r7, #20]
 8000f06:	f7ff ffb1 	bl	8000e6c <NVIC_EncodePriority>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff80 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff54 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff fee6 	bl	8000d18 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e099      	b.n	800108c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f78:	e00f      	b.n	8000f9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f7a:	f7ff fecd 	bl	8000d18 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d908      	bls.n	8000f9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2203      	movs	r2, #3
 8000f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e078      	b.n	800108c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1e8      	bne.n	8000f7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <HAL_DMA_Init+0x158>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d107      	bne.n	8001004 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4313      	orrs	r3, r2
 8001002:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f023 0307 	bic.w	r3, r3, #7
 800101a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	4313      	orrs	r3, r2
 8001024:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	2b04      	cmp	r3, #4
 800102c:	d117      	bne.n	800105e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4313      	orrs	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00e      	beq.n	800105e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 fa6f 	bl	8001524 <DMA_CheckFifoParam>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d008      	beq.n	800105e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2240      	movs	r2, #64	; 0x40
 8001050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800105a:	2301      	movs	r3, #1
 800105c:	e016      	b.n	800108c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fa26 	bl	80014b8 <DMA_CalcBaseAndBitshift>
 800106c:	4603      	mov	r3, r0
 800106e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001074:	223f      	movs	r2, #63	; 0x3f
 8001076:	409a      	lsls	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	f010803f 	.word	0xf010803f

08001098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d101      	bne.n	80010be <HAL_DMA_Start_IT+0x26>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e040      	b.n	8001140 <HAL_DMA_Start_IT+0xa8>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d12f      	bne.n	8001132 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2202      	movs	r2, #2
 80010d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 f9b8 	bl	800145c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f0:	223f      	movs	r2, #63	; 0x3f
 80010f2:	409a      	lsls	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0216 	orr.w	r2, r2, #22
 8001106:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	2b00      	cmp	r3, #0
 800110e:	d007      	beq.n	8001120 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0208 	orr.w	r2, r2, #8
 800111e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	e005      	b.n	800113e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800113a:	2302      	movs	r3, #2
 800113c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800113e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001154:	4b8e      	ldr	r3, [pc, #568]	; (8001390 <HAL_DMA_IRQHandler+0x248>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a8e      	ldr	r2, [pc, #568]	; (8001394 <HAL_DMA_IRQHandler+0x24c>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	0a9b      	lsrs	r3, r3, #10
 8001160:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001172:	2208      	movs	r2, #8
 8001174:	409a      	lsls	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4013      	ands	r3, r2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d01a      	beq.n	80011b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d013      	beq.n	80011b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0204 	bic.w	r2, r2, #4
 800119a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a0:	2208      	movs	r2, #8
 80011a2:	409a      	lsls	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ac:	f043 0201 	orr.w	r2, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b8:	2201      	movs	r2, #1
 80011ba:	409a      	lsls	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4013      	ands	r3, r2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d012      	beq.n	80011ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d6:	2201      	movs	r2, #1
 80011d8:	409a      	lsls	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e2:	f043 0202 	orr.w	r2, r3, #2
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ee:	2204      	movs	r2, #4
 80011f0:	409a      	lsls	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d012      	beq.n	8001220 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00b      	beq.n	8001220 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120c:	2204      	movs	r2, #4
 800120e:	409a      	lsls	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001218:	f043 0204 	orr.w	r2, r3, #4
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001224:	2210      	movs	r2, #16
 8001226:	409a      	lsls	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4013      	ands	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d043      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d03c      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001242:	2210      	movs	r2, #16
 8001244:	409a      	lsls	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d018      	beq.n	800128a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d108      	bne.n	8001278 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	2b00      	cmp	r3, #0
 800126c:	d024      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	4798      	blx	r3
 8001276:	e01f      	b.n	80012b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127c:	2b00      	cmp	r3, #0
 800127e:	d01b      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	4798      	blx	r3
 8001288:	e016      	b.n	80012b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d107      	bne.n	80012a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0208 	bic.w	r2, r2, #8
 80012a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012bc:	2220      	movs	r2, #32
 80012be:	409a      	lsls	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 808f 	beq.w	80013e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 8087 	beq.w	80013e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	2220      	movs	r2, #32
 80012e0:	409a      	lsls	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d136      	bne.n	8001360 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0216 	bic.w	r2, r2, #22
 8001300:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	695a      	ldr	r2, [r3, #20]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001310:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	2b00      	cmp	r3, #0
 8001318:	d103      	bne.n	8001322 <HAL_DMA_IRQHandler+0x1da>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0208 	bic.w	r2, r2, #8
 8001330:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001336:	223f      	movs	r2, #63	; 0x3f
 8001338:	409a      	lsls	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001352:	2b00      	cmp	r3, #0
 8001354:	d07e      	beq.n	8001454 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	4798      	blx	r3
        }
        return;
 800135e:	e079      	b.n	8001454 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d01d      	beq.n	80013aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10d      	bne.n	8001398 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	2b00      	cmp	r3, #0
 8001382:	d031      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	4798      	blx	r3
 800138c:	e02c      	b.n	80013e8 <HAL_DMA_IRQHandler+0x2a0>
 800138e:	bf00      	nop
 8001390:	20000004 	.word	0x20000004
 8001394:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139c:	2b00      	cmp	r3, #0
 800139e:	d023      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	4798      	blx	r3
 80013a8:	e01e      	b.n	80013e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10f      	bne.n	80013d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0210 	bic.w	r2, r2, #16
 80013c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d032      	beq.n	8001456 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d022      	beq.n	8001442 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2205      	movs	r2, #5
 8001400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	3301      	adds	r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	429a      	cmp	r2, r3
 800141e:	d307      	bcc.n	8001430 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f2      	bne.n	8001414 <HAL_DMA_IRQHandler+0x2cc>
 800142e:	e000      	b.n	8001432 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001430:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	4798      	blx	r3
 8001452:	e000      	b.n	8001456 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001454:	bf00      	nop
    }
  }
}
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001478:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b40      	cmp	r3, #64	; 0x40
 8001488:	d108      	bne.n	800149c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800149a:	e007      	b.n	80014ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	60da      	str	r2, [r3, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	3b10      	subs	r3, #16
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <DMA_CalcBaseAndBitshift+0x64>)
 80014ca:	fba2 2303 	umull	r2, r3, r2, r3
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <DMA_CalcBaseAndBitshift+0x68>)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d909      	bls.n	80014fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014ee:	f023 0303 	bic.w	r3, r3, #3
 80014f2:	1d1a      	adds	r2, r3, #4
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	659a      	str	r2, [r3, #88]	; 0x58
 80014f8:	e007      	b.n	800150a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001502:	f023 0303 	bic.w	r3, r3, #3
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	aaaaaaab 	.word	0xaaaaaaab
 8001520:	0800bb98 	.word	0x0800bb98

08001524 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d11f      	bne.n	800157e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d856      	bhi.n	80015f2 <DMA_CheckFifoParam+0xce>
 8001544:	a201      	add	r2, pc, #4	; (adr r2, 800154c <DMA_CheckFifoParam+0x28>)
 8001546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154a:	bf00      	nop
 800154c:	0800155d 	.word	0x0800155d
 8001550:	0800156f 	.word	0x0800156f
 8001554:	0800155d 	.word	0x0800155d
 8001558:	080015f3 	.word	0x080015f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d046      	beq.n	80015f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800156c:	e043      	b.n	80015f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001576:	d140      	bne.n	80015fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800157c:	e03d      	b.n	80015fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001586:	d121      	bne.n	80015cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d837      	bhi.n	80015fe <DMA_CheckFifoParam+0xda>
 800158e:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <DMA_CheckFifoParam+0x70>)
 8001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001594:	080015a5 	.word	0x080015a5
 8001598:	080015ab 	.word	0x080015ab
 800159c:	080015a5 	.word	0x080015a5
 80015a0:	080015bd 	.word	0x080015bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
      break;
 80015a8:	e030      	b.n	800160c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d025      	beq.n	8001602 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015ba:	e022      	b.n	8001602 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015c4:	d11f      	bne.n	8001606 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015ca:	e01c      	b.n	8001606 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d903      	bls.n	80015da <DMA_CheckFifoParam+0xb6>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d003      	beq.n	80015e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015d8:	e018      	b.n	800160c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
      break;
 80015de:	e015      	b.n	800160c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00e      	beq.n	800160a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
      break;
 80015f0:	e00b      	b.n	800160a <DMA_CheckFifoParam+0xe6>
      break;
 80015f2:	bf00      	nop
 80015f4:	e00a      	b.n	800160c <DMA_CheckFifoParam+0xe8>
      break;
 80015f6:	bf00      	nop
 80015f8:	e008      	b.n	800160c <DMA_CheckFifoParam+0xe8>
      break;
 80015fa:	bf00      	nop
 80015fc:	e006      	b.n	800160c <DMA_CheckFifoParam+0xe8>
      break;
 80015fe:	bf00      	nop
 8001600:	e004      	b.n	800160c <DMA_CheckFifoParam+0xe8>
      break;
 8001602:	bf00      	nop
 8001604:	e002      	b.n	800160c <DMA_CheckFifoParam+0xe8>
      break;   
 8001606:	bf00      	nop
 8001608:	e000      	b.n	800160c <DMA_CheckFifoParam+0xe8>
      break;
 800160a:	bf00      	nop
    }
  } 
  
  return status; 
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop

0800161c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	e159      	b.n	80018ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001638:	2201      	movs	r2, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	f040 8148 	bne.w	80018e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b01      	cmp	r3, #1
 8001660:	d005      	beq.n	800166e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166a:	2b02      	cmp	r3, #2
 800166c:	d130      	bne.n	80016d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a4:	2201      	movs	r2, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 0201 	and.w	r2, r3, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d017      	beq.n	800170c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d123      	bne.n	8001760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	08da      	lsrs	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	69b9      	ldr	r1, [r7, #24]
 800175c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80a2 	beq.w	80018e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b57      	ldr	r3, [pc, #348]	; (8001904 <HAL_GPIO_Init+0x2e8>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a56      	ldr	r2, [pc, #344]	; (8001904 <HAL_GPIO_Init+0x2e8>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b54      	ldr	r3, [pc, #336]	; (8001904 <HAL_GPIO_Init+0x2e8>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017be:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_GPIO_Init+0x2ec>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a49      	ldr	r2, [pc, #292]	; (800190c <HAL_GPIO_Init+0x2f0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d019      	beq.n	800181e <HAL_GPIO_Init+0x202>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a48      	ldr	r2, [pc, #288]	; (8001910 <HAL_GPIO_Init+0x2f4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_Init+0x1fe>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a47      	ldr	r2, [pc, #284]	; (8001914 <HAL_GPIO_Init+0x2f8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00d      	beq.n	8001816 <HAL_GPIO_Init+0x1fa>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a46      	ldr	r2, [pc, #280]	; (8001918 <HAL_GPIO_Init+0x2fc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d007      	beq.n	8001812 <HAL_GPIO_Init+0x1f6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a45      	ldr	r2, [pc, #276]	; (800191c <HAL_GPIO_Init+0x300>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_GPIO_Init+0x1f2>
 800180a:	2304      	movs	r3, #4
 800180c:	e008      	b.n	8001820 <HAL_GPIO_Init+0x204>
 800180e:	2307      	movs	r3, #7
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x204>
 8001812:	2303      	movs	r3, #3
 8001814:	e004      	b.n	8001820 <HAL_GPIO_Init+0x204>
 8001816:	2302      	movs	r3, #2
 8001818:	e002      	b.n	8001820 <HAL_GPIO_Init+0x204>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_GPIO_Init+0x204>
 800181e:	2300      	movs	r3, #0
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	f002 0203 	and.w	r2, r2, #3
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4093      	lsls	r3, r2
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001830:	4935      	ldr	r1, [pc, #212]	; (8001908 <HAL_GPIO_Init+0x2ec>)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_GPIO_Init+0x304>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001862:	4a2f      	ldr	r2, [pc, #188]	; (8001920 <HAL_GPIO_Init+0x304>)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_GPIO_Init+0x304>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800188c:	4a24      	ldr	r2, [pc, #144]	; (8001920 <HAL_GPIO_Init+0x304>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_GPIO_Init+0x304>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018b6:	4a1a      	ldr	r2, [pc, #104]	; (8001920 <HAL_GPIO_Init+0x304>)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_GPIO_Init+0x304>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e0:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_GPIO_Init+0x304>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3301      	adds	r3, #1
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	2b0f      	cmp	r3, #15
 80018f0:	f67f aea2 	bls.w	8001638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40013800 	.word	0x40013800
 800190c:	40020000 	.word	0x40020000
 8001910:	40020400 	.word	0x40020400
 8001914:	40020800 	.word	0x40020800
 8001918:	40020c00 	.word	0x40020c00
 800191c:	40021000 	.word	0x40021000
 8001920:	40013c00 	.word	0x40013c00

08001924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
 8001930:	4613      	mov	r3, r2
 8001932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001934:	787b      	ldrb	r3, [r7, #1]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001940:	e003      	b.n	800194a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	041a      	lsls	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	619a      	str	r2, [r3, #24]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e128      	b.n	8001bbc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a90      	ldr	r2, [pc, #576]	; (8001bc4 <HAL_I2S_Init+0x26c>)
 8001982:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7fe ffd3 	bl	8000930 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2202      	movs	r2, #2
 800198e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019a0:	f023 030f 	bic.w	r3, r3, #15
 80019a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2202      	movs	r2, #2
 80019ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d060      	beq.n	8001a78 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80019be:	2310      	movs	r3, #16
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e001      	b.n	80019c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80019c4:	2320      	movs	r3, #32
 80019c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d802      	bhi.n	80019d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f002 fd5a 	bl	8004490 <HAL_RCCEx_GetPeriphCLKFreq>
 80019dc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e6:	d125      	bne.n	8001a34 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d010      	beq.n	8001a12 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	461a      	mov	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0c:	3305      	adds	r3, #5
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	e01f      	b.n	8001a52 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	461a      	mov	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	3305      	adds	r3, #5
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	e00e      	b.n	8001a52 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	461a      	mov	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	3305      	adds	r3, #5
 8001a50:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4a5c      	ldr	r2, [pc, #368]	; (8001bc8 <HAL_I2S_Init+0x270>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	08db      	lsrs	r3, r3, #3
 8001a5c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	e003      	b.n	8001a80 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d902      	bls.n	8001a8c <HAL_I2S_Init+0x134>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	2bff      	cmp	r3, #255	; 0xff
 8001a8a:	d907      	bls.n	8001a9c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a90:	f043 0210 	orr.w	r2, r3, #16
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e08f      	b.n	8001bbc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	ea42 0103 	orr.w	r1, r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001aba:	f023 030f 	bic.w	r3, r3, #15
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6851      	ldr	r1, [r2, #4]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6892      	ldr	r2, [r2, #8]
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	68d2      	ldr	r2, [r2, #12]
 8001acc:	4311      	orrs	r1, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6992      	ldr	r2, [r2, #24]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ade:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d161      	bne.n	8001bac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a38      	ldr	r2, [pc, #224]	; (8001bcc <HAL_I2S_Init+0x274>)
 8001aec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a37      	ldr	r2, [pc, #220]	; (8001bd0 <HAL_I2S_Init+0x278>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_I2S_Init+0x1a4>
 8001af8:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <HAL_I2S_Init+0x27c>)
 8001afa:	e001      	b.n	8001b00 <HAL_I2S_Init+0x1a8>
 8001afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	4932      	ldr	r1, [pc, #200]	; (8001bd0 <HAL_I2S_Init+0x278>)
 8001b08:	428a      	cmp	r2, r1
 8001b0a:	d101      	bne.n	8001b10 <HAL_I2S_Init+0x1b8>
 8001b0c:	4a31      	ldr	r2, [pc, #196]	; (8001bd4 <HAL_I2S_Init+0x27c>)
 8001b0e:	e001      	b.n	8001b14 <HAL_I2S_Init+0x1bc>
 8001b10:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001b14:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b18:	f023 030f 	bic.w	r3, r3, #15
 8001b1c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a2b      	ldr	r2, [pc, #172]	; (8001bd0 <HAL_I2S_Init+0x278>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_I2S_Init+0x1d4>
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_I2S_Init+0x27c>)
 8001b2a:	e001      	b.n	8001b30 <HAL_I2S_Init+0x1d8>
 8001b2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b30:	2202      	movs	r2, #2
 8001b32:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a25      	ldr	r2, [pc, #148]	; (8001bd0 <HAL_I2S_Init+0x278>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_I2S_Init+0x1ea>
 8001b3e:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <HAL_I2S_Init+0x27c>)
 8001b40:	e001      	b.n	8001b46 <HAL_I2S_Init+0x1ee>
 8001b42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b52:	d003      	beq.n	8001b5c <HAL_I2S_Init+0x204>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d103      	bne.n	8001b64 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	e001      	b.n	8001b68 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	897b      	ldrh	r3, [r7, #10]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b94:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <HAL_I2S_Init+0x278>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_I2S_Init+0x24c>
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_I2S_Init+0x27c>)
 8001ba2:	e001      	b.n	8001ba8 <HAL_I2S_Init+0x250>
 8001ba4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ba8:	897a      	ldrh	r2, [r7, #10]
 8001baa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	08001edd 	.word	0x08001edd
 8001bc8:	cccccccd 	.word	0xcccccccd
 8001bcc:	08001ff1 	.word	0x08001ff1
 8001bd0:	40003800 	.word	0x40003800
 8001bd4:	40003400 	.word	0x40003400

08001bd8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	4613      	mov	r3, r2
 8001be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_I2S_Receive_DMA+0x1a>
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0a1      	b.n	8001d3a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_I2S_Receive_DMA+0x2e>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e099      	b.n	8001d3a <HAL_I2S_Receive_DMA+0x162>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d005      	beq.n	8001c26 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
 8001c24:	e089      	b.n	8001d3a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d002      	beq.n	8001c52 <HAL_I2S_Receive_DMA+0x7a>
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d10a      	bne.n	8001c68 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	865a      	strh	r2, [r3, #50]	; 0x32
 8001c66:	e005      	b.n	8001c74 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c78:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <HAL_I2S_Receive_DMA+0x16c>)
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c80:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <HAL_I2S_Receive_DMA+0x170>)
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	4a30      	ldr	r2, [pc, #192]	; (8001d4c <HAL_I2S_Receive_DMA+0x174>)
 8001c8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c9a:	d10a      	bne.n	8001cb2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	330c      	adds	r3, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001cc8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001cca:	f7ff f9e5 	bl	8001098 <HAL_DMA_Start_IT>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00f      	beq.n	8001cf4 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	f043 0208 	orr.w	r2, r3, #8
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e022      	b.n	8001d3a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d107      	bne.n	8001d12 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69da      	ldr	r2, [r3, #28]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d10:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d107      	bne.n	8001d30 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	08001dbb 	.word	0x08001dbb
 8001d48:	08001d79 	.word	0x08001d79
 8001d4c:	08001dd7 	.word	0x08001dd7

08001d50 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d84:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10e      	bne.n	8001dac <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7fe fbab 	bl	8000508 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f7fe fb87 	bl	80004dc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0203 	bic.w	r2, r2, #3
 8001df2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	f043 0208 	orr.w	r2, r3, #8
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7ff ffa5 	bl	8001d64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	881a      	ldrh	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	1c9a      	adds	r2, r3, #2
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10e      	bne.n	8001e76 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e66:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ff6d 	bl	8001d50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	b292      	uxth	r2, r2
 8001e92:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	1c9a      	adds	r2, r3, #2
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10e      	bne.n	8001ed4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ec4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fb1a 	bl	8000508 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d13a      	bne.n	8001f6e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d109      	bne.n	8001f16 <I2S_IRQHandler+0x3a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0c:	2b40      	cmp	r3, #64	; 0x40
 8001f0e:	d102      	bne.n	8001f16 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ffb4 	bl	8001e7e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1c:	2b40      	cmp	r3, #64	; 0x40
 8001f1e:	d126      	bne.n	8001f6e <I2S_IRQHandler+0x92>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d11f      	bne.n	8001f6e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f3c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f043 0202 	orr.w	r2, r3, #2
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fefb 	bl	8001d64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d136      	bne.n	8001fe8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d109      	bne.n	8001f98 <I2S_IRQHandler+0xbc>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8e:	2b80      	cmp	r3, #128	; 0x80
 8001f90:	d102      	bne.n	8001f98 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ff45 	bl	8001e22 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d122      	bne.n	8001fe8 <I2S_IRQHandler+0x10c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d11b      	bne.n	8001fe8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fbe:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f043 0204 	orr.w	r2, r3, #4
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff febe 	bl	8001d64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a92      	ldr	r2, [pc, #584]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800200a:	4b92      	ldr	r3, [pc, #584]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800200c:	e001      	b.n	8002012 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800200e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a8b      	ldr	r2, [pc, #556]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d101      	bne.n	800202c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002028:	4b8a      	ldr	r3, [pc, #552]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800202a:	e001      	b.n	8002030 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800202c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203c:	d004      	beq.n	8002048 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f040 8099 	bne.w	800217a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b02      	cmp	r3, #2
 8002050:	d107      	bne.n	8002062 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f925 	bl	80022ac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f9c8 	bl	800240c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002082:	2b40      	cmp	r3, #64	; 0x40
 8002084:	d13a      	bne.n	80020fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d035      	beq.n	80020fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6e      	ldr	r2, [pc, #440]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800209a:	4b6e      	ldr	r3, [pc, #440]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800209c:	e001      	b.n	80020a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800209e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4969      	ldr	r1, [pc, #420]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020aa:	428b      	cmp	r3, r1
 80020ac:	d101      	bne.n	80020b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80020ae:	4b69      	ldr	r3, [pc, #420]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020b0:	e001      	b.n	80020b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80020b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020ba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f043 0202 	orr.w	r2, r3, #2
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fe34 	bl	8001d64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b08      	cmp	r3, #8
 8002104:	f040 80c3 	bne.w	800228e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 80bd 	beq.w	800228e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002122:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a49      	ldr	r2, [pc, #292]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800212e:	4b49      	ldr	r3, [pc, #292]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002130:	e001      	b.n	8002136 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002132:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4944      	ldr	r1, [pc, #272]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800213e:	428b      	cmp	r3, r1
 8002140:	d101      	bne.n	8002146 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002142:	4b44      	ldr	r3, [pc, #272]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002144:	e001      	b.n	800214a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800214a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800214e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f043 0204 	orr.w	r2, r3, #4
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fdf6 	bl	8001d64 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002178:	e089      	b.n	800228e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b02      	cmp	r3, #2
 8002182:	d107      	bne.n	8002194 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f8be 	bl	8002310 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f8fd 	bl	80023a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b4:	2b40      	cmp	r3, #64	; 0x40
 80021b6:	d12f      	bne.n	8002218 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d02a      	beq.n	8002218 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1e      	ldr	r2, [pc, #120]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021de:	e001      	b.n	80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80021e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4919      	ldr	r1, [pc, #100]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021ec:	428b      	cmp	r3, r1
 80021ee:	d101      	bne.n	80021f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021f2:	e001      	b.n	80021f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80021f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f043 0202 	orr.w	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fda6 	bl	8001d64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b08      	cmp	r3, #8
 8002220:	d136      	bne.n	8002290 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d031      	beq.n	8002290 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a07      	ldr	r2, [pc, #28]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002238:	e001      	b.n	800223e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800223a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4902      	ldr	r1, [pc, #8]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002246:	428b      	cmp	r3, r1
 8002248:	d106      	bne.n	8002258 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800224a:	4b02      	ldr	r3, [pc, #8]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800224c:	e006      	b.n	800225c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800224e:	bf00      	nop
 8002250:	40003800 	.word	0x40003800
 8002254:	40003400 	.word	0x40003400
 8002258:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800225c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002260:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002270:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f043 0204 	orr.w	r2, r3, #4
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fd6c 	bl	8001d64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800228c:	e000      	b.n	8002290 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800228e:	bf00      	nop
}
 8002290:	bf00      	nop
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	1c99      	adds	r1, r3, #2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6251      	str	r1, [r2, #36]	; 0x24
 80022be:	881a      	ldrh	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d113      	bne.n	8002306 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ffc9 	bl	8002298 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	1c99      	adds	r1, r3, #2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6251      	str	r1, [r2, #36]	; 0x24
 8002322:	8819      	ldrh	r1, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <I2SEx_TxISR_I2SExt+0x90>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <I2SEx_TxISR_I2SExt+0x22>
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <I2SEx_TxISR_I2SExt+0x94>)
 8002330:	e001      	b.n	8002336 <I2SEx_TxISR_I2SExt+0x26>
 8002332:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002336:	460a      	mov	r2, r1
 8002338:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d121      	bne.n	8002396 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <I2SEx_TxISR_I2SExt+0x90>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d101      	bne.n	8002360 <I2SEx_TxISR_I2SExt+0x50>
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <I2SEx_TxISR_I2SExt+0x94>)
 800235e:	e001      	b.n	8002364 <I2SEx_TxISR_I2SExt+0x54>
 8002360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	490d      	ldr	r1, [pc, #52]	; (80023a0 <I2SEx_TxISR_I2SExt+0x90>)
 800236c:	428b      	cmp	r3, r1
 800236e:	d101      	bne.n	8002374 <I2SEx_TxISR_I2SExt+0x64>
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <I2SEx_TxISR_I2SExt+0x94>)
 8002372:	e001      	b.n	8002378 <I2SEx_TxISR_I2SExt+0x68>
 8002374:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002378:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800237c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff81 	bl	8002298 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40003800 	.word	0x40003800
 80023a4:	40003400 	.word	0x40003400

080023a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68d8      	ldr	r0, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	1c99      	adds	r1, r3, #2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80023c0:	b282      	uxth	r2, r0
 80023c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d113      	bne.n	8002404 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ff4a 	bl	8002298 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a20      	ldr	r2, [pc, #128]	; (800249c <I2SEx_RxISR_I2SExt+0x90>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <I2SEx_RxISR_I2SExt+0x16>
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <I2SEx_RxISR_I2SExt+0x94>)
 8002420:	e001      	b.n	8002426 <I2SEx_RxISR_I2SExt+0x1a>
 8002422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002426:	68d8      	ldr	r0, [r3, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	1c99      	adds	r1, r3, #2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002432:	b282      	uxth	r2, r0
 8002434:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d121      	bne.n	8002492 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a12      	ldr	r2, [pc, #72]	; (800249c <I2SEx_RxISR_I2SExt+0x90>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d101      	bne.n	800245c <I2SEx_RxISR_I2SExt+0x50>
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <I2SEx_RxISR_I2SExt+0x94>)
 800245a:	e001      	b.n	8002460 <I2SEx_RxISR_I2SExt+0x54>
 800245c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	490d      	ldr	r1, [pc, #52]	; (800249c <I2SEx_RxISR_I2SExt+0x90>)
 8002468:	428b      	cmp	r3, r1
 800246a:	d101      	bne.n	8002470 <I2SEx_RxISR_I2SExt+0x64>
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <I2SEx_RxISR_I2SExt+0x94>)
 800246e:	e001      	b.n	8002474 <I2SEx_RxISR_I2SExt+0x68>
 8002470:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002474:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002478:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff03 	bl	8002298 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40003800 	.word	0x40003800
 80024a0:	40003400 	.word	0x40003400

080024a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e101      	b.n	80026ba <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f008 feed 	bl	800b2b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2203      	movs	r2, #3
 80024da:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e4:	d102      	bne.n	80024ec <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 fe7c 	bl	80051ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7c1a      	ldrb	r2, [r3, #16]
 80024fe:	f88d 2000 	strb.w	r2, [sp]
 8002502:	3304      	adds	r3, #4
 8002504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002506:	f002 fd5b 	bl	8004fc0 <USB_CoreInit>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0ce      	b.n	80026ba <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f002 fe74 	bl	8005210 <USB_SetCurrentMode>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0bf      	b.n	80026ba <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e04a      	b.n	80025d6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3315      	adds	r3, #21
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3314      	adds	r3, #20
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	b298      	uxth	r0, r3
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	332e      	adds	r3, #46	; 0x2e
 800257c:	4602      	mov	r2, r0
 800257e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	3318      	adds	r3, #24
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	331c      	adds	r3, #28
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	3320      	adds	r3, #32
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	3324      	adds	r3, #36	; 0x24
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	3301      	adds	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	791b      	ldrb	r3, [r3, #4]
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d3af      	bcc.n	8002540 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e044      	b.n	8002670 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	f203 2355 	addw	r3, r3, #597	; 0x255
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	3301      	adds	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	791b      	ldrb	r3, [r3, #4]
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	429a      	cmp	r2, r3
 8002678:	d3b5      	bcc.n	80025e6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7c1a      	ldrb	r2, [r3, #16]
 8002682:	f88d 2000 	strb.w	r2, [sp]
 8002686:	3304      	adds	r3, #4
 8002688:	cb0e      	ldmia	r3, {r1, r2, r3}
 800268a:	f002 fe0d 	bl	80052a8 <USB_DevInit>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e00c      	b.n	80026ba <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 fe51 	bl	800635a <USB_DevDisconnect>

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_PCD_Start+0x1c>
 80026da:	2302      	movs	r3, #2
 80026dc:	e022      	b.n	8002724 <HAL_PCD_Start+0x62>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f002 fd5e 	bl	80051cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f003 fdff 	bl	8006318 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b08d      	sub	sp, #52	; 0x34
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 febd 	bl	80064c2 <USB_GetMode>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 848c 	bne.w	8003068 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fe21 	bl	800639c <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8482 	beq.w	8003066 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fe0e 	bl	800639c <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b02      	cmp	r3, #2
 8002788:	d107      	bne.n	800279a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f002 0202 	and.w	r2, r2, #2
 8002798:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 fdfc 	bl	800639c <USB_ReadInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d161      	bne.n	8002872 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0210 	bic.w	r2, r2, #16
 80027bc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	f003 020f 	and.w	r2, r3, #15
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	3304      	adds	r3, #4
 80027dc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	0c5b      	lsrs	r3, r3, #17
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d124      	bne.n	8002834 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d035      	beq.n	8002862 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	6a38      	ldr	r0, [r7, #32]
 800280a:	f003 fc33 	bl	8006074 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800281a:	441a      	add	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800282c:	441a      	add	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	615a      	str	r2, [r3, #20]
 8002832:	e016      	b.n	8002862 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	0c5b      	lsrs	r3, r3, #17
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	2b06      	cmp	r3, #6
 800283e:	d110      	bne.n	8002862 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002846:	2208      	movs	r2, #8
 8002848:	4619      	mov	r1, r3
 800284a:	6a38      	ldr	r0, [r7, #32]
 800284c:	f003 fc12 	bl	8006074 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800285c:	441a      	add	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0210 	orr.w	r2, r2, #16
 8002870:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fd90 	bl	800639c <USB_ReadInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002882:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002886:	f040 80a7 	bne.w	80029d8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f003 fd95 	bl	80063c2 <USB_ReadDevAllOutEpInterrupt>
 8002898:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800289a:	e099      	b.n	80029d0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 808e 	beq.w	80029c4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f003 fdb9 	bl	800642a <USB_ReadDevOutEPInterrupt>
 80028b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00c      	beq.n	80028de <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d0:	461a      	mov	r2, r3
 80028d2:	2301      	movs	r3, #1
 80028d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fecf 	bl	800367c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00c      	beq.n	8002902 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f4:	461a      	mov	r2, r3
 80028f6:	2308      	movs	r3, #8
 80028f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 ffa5 	bl	800384c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	4413      	add	r3, r2
 8002914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002918:	461a      	mov	r2, r3
 800291a:	2310      	movs	r3, #16
 800291c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d030      	beq.n	800298a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	2b80      	cmp	r3, #128	; 0x80
 8002932:	d109      	bne.n	8002948 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002946:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	3304      	adds	r3, #4
 800295c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	78db      	ldrb	r3, [r3, #3]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d108      	bne.n	8002978 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2200      	movs	r2, #0
 800296a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	b2db      	uxtb	r3, r3
 8002970:	4619      	mov	r1, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f008 fd98 	bl	800b4a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002984:	461a      	mov	r2, r3
 8002986:	2302      	movs	r3, #2
 8002988:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	4413      	add	r3, r2
 800299c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a0:	461a      	mov	r2, r3
 80029a2:	2320      	movs	r3, #32
 80029a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d009      	beq.n	80029c4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029bc:	461a      	mov	r2, r3
 80029be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	3301      	adds	r3, #1
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f47f af62 	bne.w	800289c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 fcdd 	bl	800639c <USB_ReadInterrupts>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029ec:	f040 80db 	bne.w	8002ba6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 fcfe 	bl	80063f6 <USB_ReadDevAllInEpInterrupt>
 80029fa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a00:	e0cd      	b.n	8002b9e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80c2 	beq.w	8002b92 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fd24 	bl	8006466 <USB_ReadDevInEPInterrupt>
 8002a1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d057      	beq.n	8002ada <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	2201      	movs	r2, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69f9      	ldr	r1, [r7, #28]
 8002a46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	799b      	ldrb	r3, [r3, #6]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d132      	bne.n	8002ace <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	3320      	adds	r3, #32
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4403      	add	r3, r0
 8002a88:	331c      	adds	r3, #28
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4419      	add	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4403      	add	r3, r0
 8002a9c:	3320      	adds	r3, #32
 8002a9e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d113      	bne.n	8002ace <HAL_PCD_IRQHandler+0x3a2>
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3324      	adds	r3, #36	; 0x24
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d108      	bne.n	8002ace <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2101      	movs	r1, #1
 8002aca:	f003 fd2b 	bl	8006524 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f008 fc6c 	bl	800b3b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af0:	461a      	mov	r2, r3
 8002af2:	2308      	movs	r3, #8
 8002af4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2310      	movs	r3, #16
 8002b10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2340      	movs	r3, #64	; 0x40
 8002b2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d023      	beq.n	8002b80 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b3a:	6a38      	ldr	r0, [r7, #32]
 8002b3c:	f002 fd18 	bl	8005570 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3310      	adds	r3, #16
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	78db      	ldrb	r3, [r3, #3]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d108      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f008 fcaf 	bl	800b4cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fce8 	bl	8003562 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	3301      	adds	r3, #1
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	085b      	lsrs	r3, r3, #1
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f47f af2e 	bne.w	8002a02 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fbf6 	bl	800639c <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bba:	d122      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d108      	bne.n	8002bec <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002be2:	2100      	movs	r1, #0
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fecf 	bl	8003988 <HAL_PCDEx_LPM_Callback>
 8002bea:	e002      	b.n	8002bf2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f008 fc4d 	bl	800b48c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f003 fbc8 	bl	800639c <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c16:	d112      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d102      	bne.n	8002c2e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f008 fc09 	bl	800b440 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c3c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fbaa 	bl	800639c <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c52:	f040 80b7 	bne.w	8002dc4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2110      	movs	r1, #16
 8002c70:	4618      	mov	r0, r3
 8002c72:	f002 fc7d 	bl	8005570 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7a:	e046      	b.n	8002d0a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c8e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca0:	0151      	lsls	r1, r2, #5
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cc2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd4:	0151      	lsls	r1, r2, #5
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	440a      	add	r2, r1
 8002cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ce2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf4:	0151      	lsls	r1, r2, #5
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	440a      	add	r2, r1
 8002cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d02:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	3301      	adds	r3, #1
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	791b      	ldrb	r3, [r3, #4]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d3b2      	bcc.n	8002c7c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d24:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d28:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7bdb      	ldrb	r3, [r3, #15]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d42:	f043 030b 	orr.w	r3, r3, #11
 8002d46:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d58:	f043 030b 	orr.w	r3, r3, #11
 8002d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5e:	e015      	b.n	8002d8c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d72:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d76:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d86:	f043 030b 	orr.w	r3, r3, #11
 8002d8a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d9e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dae:	461a      	mov	r2, r3
 8002db0:	f003 fbb8 	bl	8006524 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 fae7 	bl	800639c <USB_ReadInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd8:	d123      	bne.n	8002e22 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 fb7d 	bl	80064de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 fc3a 	bl	8005662 <USB_GetDevSpeed>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681c      	ldr	r4, [r3, #0]
 8002dfa:	f001 f9f5 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8002dfe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e04:	461a      	mov	r2, r3
 8002e06:	4620      	mov	r0, r4
 8002e08:	f002 f93e 	bl	8005088 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f008 faf8 	bl	800b402 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 fab8 	bl	800639c <USB_ReadInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d10a      	bne.n	8002e4c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f008 fad5 	bl	800b3e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f002 0208 	and.w	r2, r2, #8
 8002e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 faa3 	bl	800639c <USB_ReadInterrupts>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5c:	2b80      	cmp	r3, #128	; 0x80
 8002e5e:	d123      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e70:	e014      	b.n	8002e9c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d105      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fb08 	bl	80034a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	3301      	adds	r3, #1
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	791b      	ldrb	r3, [r3, #4]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d3e4      	bcc.n	8002e72 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 fa75 	bl	800639c <USB_ReadInterrupts>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ebc:	d13c      	bne.n	8002f38 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec2:	e02b      	b.n	8002f1c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3318      	adds	r3, #24
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d115      	bne.n	8002f16 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002eea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	da12      	bge.n	8002f16 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	3317      	adds	r3, #23
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fac8 	bl	80034a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	3301      	adds	r3, #1
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	791b      	ldrb	r3, [r3, #4]
 8002f20:	461a      	mov	r2, r3
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d3cd      	bcc.n	8002ec4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fa2d 	bl	800639c <USB_ReadInterrupts>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f4c:	d156      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f4e:	2301      	movs	r3, #1
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
 8002f52:	e045      	b.n	8002fe0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d12e      	bne.n	8002fda <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	da2b      	bge.n	8002fda <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002f8e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d121      	bne.n	8002fda <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd6:	6053      	str	r3, [r2, #4]
            break;
 8002fd8:	e008      	b.n	8002fec <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	3301      	adds	r3, #1
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	791b      	ldrb	r3, [r3, #4]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d3b3      	bcc.n	8002f54 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ffa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f003 f9cb 	bl	800639c <USB_ReadInterrupts>
 8003006:	4603      	mov	r3, r0
 8003008:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003010:	d10a      	bne.n	8003028 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f008 fa6c 	bl	800b4f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003026:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f003 f9b5 	bl	800639c <USB_ReadInterrupts>
 8003032:	4603      	mov	r3, r0
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b04      	cmp	r3, #4
 800303a:	d115      	bne.n	8003068 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f008 fa5c 	bl	800b50c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6859      	ldr	r1, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	430a      	orrs	r2, r1
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	e000      	b.n	8003068 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003066:	bf00      	nop
    }
  }
}
 8003068:	3734      	adds	r7, #52	; 0x34
 800306a:	46bd      	mov	sp, r7
 800306c:	bd90      	pop	{r4, r7, pc}

0800306e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_PCD_SetAddress+0x1a>
 8003084:	2302      	movs	r3, #2
 8003086:	e012      	b.n	80030ae <HAL_PCD_SetAddress+0x40>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 f914 	bl	80062cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	4608      	mov	r0, r1
 80030c0:	4611      	mov	r1, r2
 80030c2:	461a      	mov	r2, r3
 80030c4:	4603      	mov	r3, r0
 80030c6:	70fb      	strb	r3, [r7, #3]
 80030c8:	460b      	mov	r3, r1
 80030ca:	803b      	strh	r3, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da0f      	bge.n	80030fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	f003 020f 	and.w	r2, r3, #15
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	3310      	adds	r3, #16
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	3304      	adds	r3, #4
 80030f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	705a      	strb	r2, [r3, #1]
 80030fa:	e00f      	b.n	800311c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	f003 020f 	and.w	r2, r3, #15
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	3304      	adds	r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003128:	883a      	ldrh	r2, [r7, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	78ba      	ldrb	r2, [r7, #2]
 8003132:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	785b      	ldrb	r3, [r3, #1]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003146:	78bb      	ldrb	r3, [r7, #2]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d102      	bne.n	8003152 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_PCD_EP_Open+0xaa>
 800315c:	2302      	movs	r3, #2
 800315e:	e00e      	b.n	800317e <HAL_PCD_EP_Open+0xc8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68f9      	ldr	r1, [r7, #12]
 800316e:	4618      	mov	r0, r3
 8003170:	f002 fa9c 	bl	80056ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800317c:	7afb      	ldrb	r3, [r7, #11]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003192:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003196:	2b00      	cmp	r3, #0
 8003198:	da0f      	bge.n	80031ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f003 020f 	and.w	r2, r3, #15
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	3310      	adds	r3, #16
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	3304      	adds	r3, #4
 80031b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	705a      	strb	r2, [r3, #1]
 80031b8:	e00f      	b.n	80031da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	f003 020f 	and.w	r2, r3, #15
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	3304      	adds	r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_PCD_EP_Close+0x6e>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e00e      	b.n	8003212 <HAL_PCD_EP_Close+0x8c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68f9      	ldr	r1, [r7, #12]
 8003202:	4618      	mov	r0, r3
 8003204:	f002 fada 	bl	80057bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	460b      	mov	r3, r1
 8003228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800322a:	7afb      	ldrb	r3, [r7, #11]
 800322c:	f003 020f 	and.w	r2, r3, #15
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	3304      	adds	r3, #4
 8003242:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2200      	movs	r2, #0
 8003254:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800325c:	7afb      	ldrb	r3, [r7, #11]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	b2da      	uxtb	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	799b      	ldrb	r3, [r3, #6]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d102      	bne.n	8003276 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	799b      	ldrb	r3, [r3, #6]
 800327e:	461a      	mov	r2, r3
 8003280:	6979      	ldr	r1, [r7, #20]
 8003282:	f002 fb77 	bl	8005974 <USB_EPStartXfer>

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	f003 020f 	and.w	r2, r3, #15
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	460b      	mov	r3, r1
 80032ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d0:	7afb      	ldrb	r3, [r7, #11]
 80032d2:	f003 020f 	and.w	r2, r3, #15
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	3310      	adds	r3, #16
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	3304      	adds	r3, #4
 80032e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2200      	movs	r2, #0
 80032f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2201      	movs	r2, #1
 80032fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003300:	7afb      	ldrb	r3, [r7, #11]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	b2da      	uxtb	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	799b      	ldrb	r3, [r3, #6]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d102      	bne.n	800331a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	799b      	ldrb	r3, [r3, #6]
 8003322:	461a      	mov	r2, r3
 8003324:	6979      	ldr	r1, [r7, #20]
 8003326:	f002 fb25 	bl	8005974 <USB_EPStartXfer>

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	7912      	ldrb	r2, [r2, #4]
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e04f      	b.n	80033f2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003356:	2b00      	cmp	r3, #0
 8003358:	da0f      	bge.n	800337a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	f003 020f 	and.w	r2, r3, #15
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	3310      	adds	r3, #16
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	3304      	adds	r3, #4
 8003370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	705a      	strb	r2, [r3, #1]
 8003378:	e00d      	b.n	8003396 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	3304      	adds	r3, #4
 800338e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_PCD_EP_SetStall+0x82>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e01d      	b.n	80033f2 <HAL_PCD_EP_SetStall+0xbe>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68f9      	ldr	r1, [r7, #12]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f002 fead 	bl	8006124 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7999      	ldrb	r1, [r3, #6]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80033e2:	461a      	mov	r2, r3
 80033e4:	f003 f89e 	bl	8006524 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	7912      	ldrb	r2, [r2, #4]
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e042      	b.n	800349e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800341c:	2b00      	cmp	r3, #0
 800341e:	da0f      	bge.n	8003440 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	f003 020f 	and.w	r2, r3, #15
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	3310      	adds	r3, #16
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	3304      	adds	r3, #4
 8003436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	705a      	strb	r2, [r3, #1]
 800343e:	e00f      	b.n	8003460 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	f003 020f 	and.w	r2, r3, #15
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	3304      	adds	r3, #4
 8003458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_PCD_EP_ClrStall+0x86>
 800347c:	2302      	movs	r3, #2
 800347e:	e00e      	b.n	800349e <HAL_PCD_EP_ClrStall+0xa4>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68f9      	ldr	r1, [r7, #12]
 800348e:	4618      	mov	r0, r3
 8003490:	f002 feb6 	bl	8006200 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	da0c      	bge.n	80034d4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	f003 020f 	and.w	r2, r3, #15
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	3310      	adds	r3, #16
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	3304      	adds	r3, #4
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	e00c      	b.n	80034ee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	f003 020f 	and.w	r2, r3, #15
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	3304      	adds	r3, #4
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f002 fcd5 	bl	8005ea4 <USB_EPStopXfer>
 80034fa:	4603      	mov	r3, r0
 80034fc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_PCD_EP_Flush+0x1a>
 800351e:	2302      	movs	r3, #2
 8003520:	e01b      	b.n	800355a <HAL_PCD_EP_Flush+0x52>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 800352a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800352e:	2b00      	cmp	r3, #0
 8003530:	da09      	bge.n	8003546 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f002 f816 	bl	8005570 <USB_FlushTxFifo>
 8003544:	e004      	b.n	8003550 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f002 f842 	bl	80055d4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b08a      	sub	sp, #40	; 0x28
 8003566:	af02      	add	r7, sp, #8
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	3310      	adds	r3, #16
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4413      	add	r3, r2
 8003586:	3304      	adds	r3, #4
 8003588:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	429a      	cmp	r2, r3
 8003594:	d901      	bls.n	800359a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e06b      	b.n	8003672 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d902      	bls.n	80035b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3303      	adds	r3, #3
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035be:	e02a      	b.n	8003616 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d902      	bls.n	80035dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	3303      	adds	r3, #3
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68d9      	ldr	r1, [r3, #12]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	4603      	mov	r3, r0
 80035f8:	6978      	ldr	r0, [r7, #20]
 80035fa:	f002 fcfd 	bl	8005ff8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	441a      	add	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	441a      	add	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	429a      	cmp	r2, r3
 800362a:	d809      	bhi.n	8003640 <PCD_WriteEmptyTxFifo+0xde>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003634:	429a      	cmp	r2, r3
 8003636:	d203      	bcs.n	8003640 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1bf      	bne.n	80035c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	429a      	cmp	r2, r3
 800364a:	d811      	bhi.n	8003670 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	2201      	movs	r2, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	43db      	mvns	r3, r3
 8003666:	6939      	ldr	r1, [r7, #16]
 8003668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800366c:	4013      	ands	r3, r2
 800366e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	333c      	adds	r3, #60	; 0x3c
 8003694:	3304      	adds	r3, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	799b      	ldrb	r3, [r3, #6]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d17b      	bne.n	80037aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4a61      	ldr	r2, [pc, #388]	; (8003844 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	f240 80b9 	bls.w	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80b3 	beq.w	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036de:	461a      	mov	r2, r3
 80036e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036e4:	6093      	str	r3, [r2, #8]
 80036e6:	e0a7      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	461a      	mov	r2, r3
 8003700:	2320      	movs	r3, #32
 8003702:	6093      	str	r3, [r2, #8]
 8003704:	e098      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	f040 8093 	bne.w	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d90f      	bls.n	800373a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003730:	461a      	mov	r2, r3
 8003732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	e07e      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4413      	add	r3, r2
 800374c:	3304      	adds	r3, #4
 800374e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	0159      	lsls	r1, r3, #5
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	440b      	add	r3, r1
 800375c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003766:	1ad2      	subs	r2, r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d114      	bne.n	800379c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003784:	461a      	mov	r2, r3
 8003786:	2101      	movs	r1, #1
 8003788:	f002 fecc 	bl	8006524 <USB_EP0_OutStart>
 800378c:	e006      	b.n	800379c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	441a      	add	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f007 fdea 	bl	800b37c <HAL_PCD_DataOutStageCallback>
 80037a8:	e046      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	4a26      	ldr	r2, [pc, #152]	; (8003848 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d124      	bne.n	80037fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c8:	461a      	mov	r2, r3
 80037ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ce:	6093      	str	r3, [r2, #8]
 80037d0:	e032      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e8:	461a      	mov	r2, r3
 80037ea:	2320      	movs	r3, #32
 80037ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f007 fdc1 	bl	800b37c <HAL_PCD_DataOutStageCallback>
 80037fa:	e01d      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d114      	bne.n	800382c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003824:	461a      	mov	r2, r3
 8003826:	2100      	movs	r1, #0
 8003828:	f002 fe7c 	bl	8006524 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	4619      	mov	r1, r3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f007 fda2 	bl	800b37c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	4f54300a 	.word	0x4f54300a
 8003848:	4f54310a 	.word	0x4f54310a

0800384c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	333c      	adds	r3, #60	; 0x3c
 8003864:	3304      	adds	r3, #4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d90e      	bls.n	80038a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003898:	461a      	mov	r2, r3
 800389a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f007 fd59 	bl	800b358 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d90c      	bls.n	80038c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	799b      	ldrb	r3, [r3, #6]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d108      	bne.n	80038c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80038c0:	461a      	mov	r2, r3
 80038c2:	2101      	movs	r1, #1
 80038c4:	f002 fe2e 	bl	8006524 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	4f54300a 	.word	0x4f54300a

080038d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]
 80038e4:	4613      	mov	r3, r2
 80038e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d107      	bne.n	8003906 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038f6:	883b      	ldrh	r3, [r7, #0]
 80038f8:	0419      	lsls	r1, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	430a      	orrs	r2, r1
 8003902:	629a      	str	r2, [r3, #40]	; 0x28
 8003904:	e028      	b.n	8003958 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4413      	add	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	e00d      	b.n	8003936 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	3340      	adds	r3, #64	; 0x40
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	4413      	add	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	3301      	adds	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	3b01      	subs	r3, #1
 800393c:	429a      	cmp	r2, r3
 800393e:	d3ec      	bcc.n	800391a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003940:	883b      	ldrh	r3, [r7, #0]
 8003942:	0418      	lsls	r0, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	3b01      	subs	r3, #1
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	4302      	orrs	r2, r0
 8003950:	3340      	adds	r3, #64	; 0x40
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e267      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d075      	beq.n	8003aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039be:	4b88      	ldr	r3, [pc, #544]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d112      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d6:	4b82      	ldr	r3, [pc, #520]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e2:	d10b      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	4b7e      	ldr	r3, [pc, #504]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d05b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x108>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d157      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e242      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d106      	bne.n	8003a14 <HAL_RCC_OscConfig+0x74>
 8003a06:	4b76      	ldr	r3, [pc, #472]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a75      	ldr	r2, [pc, #468]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e01d      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x98>
 8003a1e:	4b70      	ldr	r3, [pc, #448]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6f      	ldr	r2, [pc, #444]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6c      	ldr	r2, [pc, #432]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a38:	4b69      	ldr	r3, [pc, #420]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a68      	ldr	r2, [pc, #416]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd f95e 	bl	8000d18 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd f95a 	bl	8000d18 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e207      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b5b      	ldr	r3, [pc, #364]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0xc0>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fd f94a 	bl	8000d18 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd f946 	bl	8000d18 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1f3      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	4b51      	ldr	r3, [pc, #324]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0xe8>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d063      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d11c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ace:	4b44      	ldr	r3, [pc, #272]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e1c7      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b3b      	ldr	r3, [pc, #236]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4937      	ldr	r1, [pc, #220]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	e03a      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b10:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fd f8ff 	bl	8000d18 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7fd f8fb 	bl	8000d18 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1a8      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4925      	ldr	r1, [pc, #148]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
 8003b50:	e015      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd f8de 	bl	8000d18 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd f8da 	bl	8000d18 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e187      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d036      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd f8be 	bl	8000d18 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fd f8ba 	bl	8000d18 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e167      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x200>
 8003bbe:	e01b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc6:	f7fd f8a7 	bl	8000d18 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	e00e      	b.n	8003bec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bce:	f7fd f8a3 	bl	8000d18 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d907      	bls.n	8003bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e150      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003be0:	40023800 	.word	0x40023800
 8003be4:	42470000 	.word	0x42470000
 8003be8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ea      	bne.n	8003bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8097 	beq.w	8003d34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0a:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10f      	bne.n	8003c36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	4b7d      	ldr	r3, [pc, #500]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	4a7c      	ldr	r2, [pc, #496]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6413      	str	r3, [r2, #64]	; 0x40
 8003c26:	4b7a      	ldr	r3, [pc, #488]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c32:	2301      	movs	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	4b77      	ldr	r3, [pc, #476]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d118      	bne.n	8003c74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c42:	4b74      	ldr	r3, [pc, #464]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a73      	ldr	r2, [pc, #460]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4e:	f7fd f863 	bl	8000d18 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c56:	f7fd f85f 	bl	8000d18 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e10c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	4b6a      	ldr	r3, [pc, #424]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x2ea>
 8003c7c:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	4a63      	ldr	r2, [pc, #396]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6713      	str	r3, [r2, #112]	; 0x70
 8003c88:	e01c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x30c>
 8003c92:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	4a5e      	ldr	r2, [pc, #376]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 0304 	orr.w	r3, r3, #4
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	4a5b      	ldr	r2, [pc, #364]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003cac:	4b58      	ldr	r3, [pc, #352]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a57      	ldr	r2, [pc, #348]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb8:	4b55      	ldr	r3, [pc, #340]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a54      	ldr	r2, [pc, #336]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	f023 0304 	bic.w	r3, r3, #4
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fd f824 	bl	8000d18 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fd f820 	bl	8000d18 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0cb      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ee      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x334>
 8003cf6:	e014      	b.n	8003d22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf8:	f7fd f80e 	bl	8000d18 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd f80a 	bl	8000d18 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0b5      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ee      	bne.n	8003d00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d28:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	4a38      	ldr	r2, [pc, #224]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80a1 	beq.w	8003e80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d3e:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d05c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d141      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fc ffde 	bl	8000d18 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fc ffda 	bl	8000d18 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e087      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	491b      	ldr	r1, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da8:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fc ffb3 	bl	8000d18 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fc ffaf 	bl	8000d18 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e05c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x416>
 8003dd4:	e054      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fc ff9c 	bl	8000d18 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fc ff98 	bl	8000d18 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e045      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x444>
 8003e02:	e03d      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e038      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40007000 	.word	0x40007000
 8003e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_RCC_OscConfig+0x4ec>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d028      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d121      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d11a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d111      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	3b01      	subs	r3, #1
 8003e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800

08003e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0cc      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b68      	ldr	r3, [pc, #416]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d90c      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b63      	ldr	r3, [pc, #396]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0b8      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee4:	4b59      	ldr	r3, [pc, #356]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a58      	ldr	r2, [pc, #352]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003efc:	4b53      	ldr	r3, [pc, #332]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a52      	ldr	r2, [pc, #328]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f08:	4b50      	ldr	r3, [pc, #320]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	494d      	ldr	r1, [pc, #308]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d044      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b47      	ldr	r3, [pc, #284]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d119      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e07f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e06f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e067      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b37      	ldr	r3, [pc, #220]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4934      	ldr	r1, [pc, #208]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f80:	f7fc feca 	bl	8000d18 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fc fec6 	bl	8000d18 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e04f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b25      	ldr	r3, [pc, #148]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d20c      	bcs.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b20      	ldr	r3, [pc, #128]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e032      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4916      	ldr	r1, [pc, #88]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004002:	4b12      	ldr	r3, [pc, #72]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	490e      	ldr	r1, [pc, #56]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004016:	f000 f821 	bl	800405c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	490a      	ldr	r1, [pc, #40]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc fd56 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023c00 	.word	0x40023c00
 800404c:	40023800 	.word	0x40023800
 8004050:	0800bb80 	.word	0x0800bb80
 8004054:	20000004 	.word	0x20000004
 8004058:	20000008 	.word	0x20000008

0800405c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004060:	b090      	sub	sp, #64	; 0x40
 8004062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
 8004068:	2300      	movs	r3, #0
 800406a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800406c:	2300      	movs	r3, #0
 800406e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004074:	4b59      	ldr	r3, [pc, #356]	; (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d00d      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x40>
 8004080:	2b08      	cmp	r3, #8
 8004082:	f200 80a1 	bhi.w	80041c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x34>
 800408a:	2b04      	cmp	r3, #4
 800408c:	d003      	beq.n	8004096 <HAL_RCC_GetSysClockFreq+0x3a>
 800408e:	e09b      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b53      	ldr	r3, [pc, #332]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004092:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004094:	e09b      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004096:	4b53      	ldr	r3, [pc, #332]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004098:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800409a:	e098      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800409c:	4b4f      	ldr	r3, [pc, #316]	; (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a6:	4b4d      	ldr	r3, [pc, #308]	; (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d028      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b2:	4b4a      	ldr	r3, [pc, #296]	; (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	2200      	movs	r2, #0
 80040ba:	623b      	str	r3, [r7, #32]
 80040bc:	627a      	str	r2, [r7, #36]	; 0x24
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040c4:	2100      	movs	r1, #0
 80040c6:	4b47      	ldr	r3, [pc, #284]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040c8:	fb03 f201 	mul.w	r2, r3, r1
 80040cc:	2300      	movs	r3, #0
 80040ce:	fb00 f303 	mul.w	r3, r0, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	4a43      	ldr	r2, [pc, #268]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040d6:	fba0 1202 	umull	r1, r2, r0, r2
 80040da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040dc:	460a      	mov	r2, r1
 80040de:	62ba      	str	r2, [r7, #40]	; 0x28
 80040e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e2:	4413      	add	r3, r2
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e8:	2200      	movs	r2, #0
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	61fa      	str	r2, [r7, #28]
 80040ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040f6:	f7fc f873 	bl	80001e0 <__aeabi_uldivmod>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4613      	mov	r3, r2
 8004100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004102:	e053      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004104:	4b35      	ldr	r3, [pc, #212]	; (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	2200      	movs	r2, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	617a      	str	r2, [r7, #20]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004116:	f04f 0b00 	mov.w	fp, #0
 800411a:	4652      	mov	r2, sl
 800411c:	465b      	mov	r3, fp
 800411e:	f04f 0000 	mov.w	r0, #0
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	0159      	lsls	r1, r3, #5
 8004128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800412c:	0150      	lsls	r0, r2, #5
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	ebb2 080a 	subs.w	r8, r2, sl
 8004136:	eb63 090b 	sbc.w	r9, r3, fp
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004146:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800414a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800414e:	ebb2 0408 	subs.w	r4, r2, r8
 8004152:	eb63 0509 	sbc.w	r5, r3, r9
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	00eb      	lsls	r3, r5, #3
 8004160:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004164:	00e2      	lsls	r2, r4, #3
 8004166:	4614      	mov	r4, r2
 8004168:	461d      	mov	r5, r3
 800416a:	eb14 030a 	adds.w	r3, r4, sl
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	eb45 030b 	adc.w	r3, r5, fp
 8004174:	607b      	str	r3, [r7, #4]
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004182:	4629      	mov	r1, r5
 8004184:	028b      	lsls	r3, r1, #10
 8004186:	4621      	mov	r1, r4
 8004188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800418c:	4621      	mov	r1, r4
 800418e:	028a      	lsls	r2, r1, #10
 8004190:	4610      	mov	r0, r2
 8004192:	4619      	mov	r1, r3
 8004194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004196:	2200      	movs	r2, #0
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	60fa      	str	r2, [r7, #12]
 800419c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a0:	f7fc f81e 	bl	80001e0 <__aeabi_uldivmod>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4613      	mov	r3, r2
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	3301      	adds	r3, #1
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041c6:	e002      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80041ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3740      	adds	r7, #64	; 0x40
 80041d4:	46bd      	mov	sp, r7
 80041d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800
 80041e0:	00f42400 	.word	0x00f42400
 80041e4:	017d7840 	.word	0x017d7840

080041e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000004 	.word	0x20000004

08004200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004204:	f7ff fff0 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	0a9b      	lsrs	r3, r3, #10
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	4903      	ldr	r1, [pc, #12]	; (8004224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004216:	5ccb      	ldrb	r3, [r1, r3]
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40023800 	.word	0x40023800
 8004224:	0800bb90 	.word	0x0800bb90

08004228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800422c:	f7ff ffdc 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b05      	ldr	r3, [pc, #20]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	0b5b      	lsrs	r3, r3, #13
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4903      	ldr	r1, [pc, #12]	; (800424c <HAL_RCC_GetPCLK2Freq+0x24>)
 800423e:	5ccb      	ldrb	r3, [r1, r3]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40023800 	.word	0x40023800
 800424c:	0800bb90 	.word	0x0800bb90

08004250 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	220f      	movs	r2, #15
 800425e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004260:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0203 	and.w	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	08db      	lsrs	r3, r3, #3
 800428a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <HAL_RCC_GetClockConfig+0x60>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0207 	and.w	r2, r3, #7
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	601a      	str	r2, [r3, #0]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40023c00 	.word	0x40023c00

080042b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d035      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042dc:	4b67      	ldr	r3, [pc, #412]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042e2:	f7fc fd19 	bl	8000d18 <HAL_GetTick>
 80042e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042ea:	f7fc fd15 	bl	8000d18 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e0ba      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042fc:	4b60      	ldr	r3, [pc, #384]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f0      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	019a      	lsls	r2, r3, #6
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	071b      	lsls	r3, r3, #28
 8004314:	495a      	ldr	r1, [pc, #360]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800431c:	4b57      	ldr	r3, [pc, #348]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004322:	f7fc fcf9 	bl	8000d18 <HAL_GetTick>
 8004326:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800432a:	f7fc fcf5 	bl	8000d18 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e09a      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800433c:	4b50      	ldr	r3, [pc, #320]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8083 	beq.w	800445c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	4b49      	ldr	r3, [pc, #292]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	4a48      	ldr	r2, [pc, #288]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004364:	6413      	str	r3, [r2, #64]	; 0x40
 8004366:	4b46      	ldr	r3, [pc, #280]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004372:	4b44      	ldr	r3, [pc, #272]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a43      	ldr	r2, [pc, #268]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800437e:	f7fc fccb 	bl	8000d18 <HAL_GetTick>
 8004382:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004386:	f7fc fcc7 	bl	8000d18 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e06c      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004398:	4b3a      	ldr	r3, [pc, #232]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043a4:	4b36      	ldr	r3, [pc, #216]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d02f      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d028      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043c2:	4b2f      	ldr	r3, [pc, #188]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043cc:	4b2e      	ldr	r3, [pc, #184]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043d2:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043d8:	4a29      	ldr	r2, [pc, #164]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043de:	4b28      	ldr	r3, [pc, #160]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d114      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fc fc95 	bl	8000d18 <HAL_GetTick>
 80043ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f0:	e00a      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f2:	f7fc fc91 	bl	8000d18 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004400:	4293      	cmp	r3, r2
 8004402:	d901      	bls.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e034      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004408:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ee      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004420:	d10d      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004422:	4b17      	ldr	r3, [pc, #92]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004436:	4912      	ldr	r1, [pc, #72]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004438:	4313      	orrs	r3, r2
 800443a:	608b      	str	r3, [r1, #8]
 800443c:	e005      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	4a0f      	ldr	r2, [pc, #60]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004444:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004448:	6093      	str	r3, [r2, #8]
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800444c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004456:	490a      	ldr	r1, [pc, #40]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004458:	4313      	orrs	r3, r2
 800445a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	7c1a      	ldrb	r2, [r3, #16]
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800446e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	42470068 	.word	0x42470068
 8004480:	40023800 	.word	0x40023800
 8004484:	40007000 	.word	0x40007000
 8004488:	42470e40 	.word	0x42470e40
 800448c:	424711e0 	.word	0x424711e0

08004490 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d13f      	bne.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044ae:	4b24      	ldr	r3, [pc, #144]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044c4:	d12f      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044c6:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044c8:	617b      	str	r3, [r7, #20]
          break;
 80044ca:	e02f      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044cc:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d8:	d108      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044da:	4b19      	ldr	r3, [pc, #100]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e2:	4a19      	ldr	r2, [pc, #100]	; (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	e007      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044ec:	4b14      	ldr	r3, [pc, #80]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f4:	4a15      	ldr	r2, [pc, #84]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80044f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044fc:	4b10      	ldr	r3, [pc, #64]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004502:	099b      	lsrs	r3, r3, #6
 8004504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004516:	0f1b      	lsrs	r3, r3, #28
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004522:	617b      	str	r3, [r7, #20]
          break;
 8004524:	e002      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
          break;
 800452a:	bf00      	nop
        }
      }
      break;
 800452c:	e000      	b.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800452e:	bf00      	nop
    }
  }
  return frequency;
 8004530:	697b      	ldr	r3, [r7, #20]
}
 8004532:	4618      	mov	r0, r3
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	00bb8000 	.word	0x00bb8000
 8004548:	017d7840 	.word	0x017d7840
 800454c:	00f42400 	.word	0x00f42400

08004550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e041      	b.n	80045e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f839 	bl	80045ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f000 f9b2 	bl	80048f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d001      	beq.n	800461c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e044      	b.n	80046a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d018      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x6c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004646:	d013      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x6c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00e      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x6c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a19      	ldr	r2, [pc, #100]	; (80046bc <HAL_TIM_Base_Start_IT+0xb8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x6c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x6c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a16      	ldr	r2, [pc, #88]	; (80046c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d111      	bne.n	8004694 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b06      	cmp	r3, #6
 8004680:	d010      	beq.n	80046a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004692:	e007      	b.n	80046a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40014000 	.word	0x40014000

080046c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d020      	beq.n	800472c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01b      	beq.n	800472c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0202 	mvn.w	r2, #2
 80046fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f8d2 	bl	80048bc <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f8c4 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f8d5 	bl	80048d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d020      	beq.n	8004778 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01b      	beq.n	8004778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0204 	mvn.w	r2, #4
 8004748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f8ac 	bl	80048bc <HAL_TIM_IC_CaptureCallback>
 8004764:	e005      	b.n	8004772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f89e 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8af 	bl	80048d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d020      	beq.n	80047c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01b      	beq.n	80047c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0208 	mvn.w	r2, #8
 8004794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2204      	movs	r2, #4
 800479a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f886 	bl	80048bc <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f878 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f889 	bl	80048d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d020      	beq.n	8004810 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01b      	beq.n	8004810 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0210 	mvn.w	r2, #16
 80047e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2208      	movs	r2, #8
 80047e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f860 	bl	80048bc <HAL_TIM_IC_CaptureCallback>
 80047fc:	e005      	b.n	800480a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f852 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f863 	bl	80048d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00c      	beq.n	8004834 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d007      	beq.n	8004834 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0201 	mvn.w	r2, #1
 800482c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fc f83a 	bl	80008a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00c      	beq.n	8004858 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d007      	beq.n	8004858 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f8e6 	bl	8004a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00c      	beq.n	800487c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f834 	bl	80048e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00c      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0220 	mvn.w	r2, #32
 8004898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8b8 	bl	8004a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a3a      	ldr	r2, [pc, #232]	; (80049f4 <TIM_Base_SetConfig+0xfc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00f      	beq.n	8004930 <TIM_Base_SetConfig+0x38>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004916:	d00b      	beq.n	8004930 <TIM_Base_SetConfig+0x38>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a37      	ldr	r2, [pc, #220]	; (80049f8 <TIM_Base_SetConfig+0x100>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d007      	beq.n	8004930 <TIM_Base_SetConfig+0x38>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a36      	ldr	r2, [pc, #216]	; (80049fc <TIM_Base_SetConfig+0x104>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_Base_SetConfig+0x38>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a35      	ldr	r2, [pc, #212]	; (8004a00 <TIM_Base_SetConfig+0x108>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d108      	bne.n	8004942 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2b      	ldr	r2, [pc, #172]	; (80049f4 <TIM_Base_SetConfig+0xfc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d01b      	beq.n	8004982 <TIM_Base_SetConfig+0x8a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004950:	d017      	beq.n	8004982 <TIM_Base_SetConfig+0x8a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a28      	ldr	r2, [pc, #160]	; (80049f8 <TIM_Base_SetConfig+0x100>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <TIM_Base_SetConfig+0x8a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a27      	ldr	r2, [pc, #156]	; (80049fc <TIM_Base_SetConfig+0x104>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00f      	beq.n	8004982 <TIM_Base_SetConfig+0x8a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <TIM_Base_SetConfig+0x108>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00b      	beq.n	8004982 <TIM_Base_SetConfig+0x8a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a25      	ldr	r2, [pc, #148]	; (8004a04 <TIM_Base_SetConfig+0x10c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d007      	beq.n	8004982 <TIM_Base_SetConfig+0x8a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a24      	ldr	r2, [pc, #144]	; (8004a08 <TIM_Base_SetConfig+0x110>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d003      	beq.n	8004982 <TIM_Base_SetConfig+0x8a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a23      	ldr	r2, [pc, #140]	; (8004a0c <TIM_Base_SetConfig+0x114>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d108      	bne.n	8004994 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <TIM_Base_SetConfig+0xfc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d103      	bne.n	80049c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d105      	bne.n	80049e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f023 0201 	bic.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	611a      	str	r2, [r3, #16]
  }
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40010000 	.word	0x40010000
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40000800 	.word	0x40000800
 8004a00:	40000c00 	.word	0x40000c00
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800

08004a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e042      	b.n	8004ad0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fb fffa 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2224      	movs	r2, #36	; 0x24
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f82b 	bl	8004ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b0c0      	sub	sp, #256	; 0x100
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	68d9      	ldr	r1, [r3, #12]
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	ea40 0301 	orr.w	r3, r0, r1
 8004b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b30:	f021 010c 	bic.w	r1, r1, #12
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	6999      	ldr	r1, [r3, #24]
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	ea40 0301 	orr.w	r3, r0, r1
 8004b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b8f      	ldr	r3, [pc, #572]	; (8004da4 <UART_SetConfig+0x2cc>)
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d005      	beq.n	8004b78 <UART_SetConfig+0xa0>
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b8d      	ldr	r3, [pc, #564]	; (8004da8 <UART_SetConfig+0x2d0>)
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d104      	bne.n	8004b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b78:	f7ff fb56 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8004b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b80:	e003      	b.n	8004b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b82:	f7ff fb3d 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8004b86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b94:	f040 810c 	bne.w	8004db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004baa:	4622      	mov	r2, r4
 8004bac:	462b      	mov	r3, r5
 8004bae:	1891      	adds	r1, r2, r2
 8004bb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bb2:	415b      	adcs	r3, r3
 8004bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bba:	4621      	mov	r1, r4
 8004bbc:	eb12 0801 	adds.w	r8, r2, r1
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	eb43 0901 	adc.w	r9, r3, r1
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bda:	4690      	mov	r8, r2
 8004bdc:	4699      	mov	r9, r3
 8004bde:	4623      	mov	r3, r4
 8004be0:	eb18 0303 	adds.w	r3, r8, r3
 8004be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004be8:	462b      	mov	r3, r5
 8004bea:	eb49 0303 	adc.w	r3, r9, r3
 8004bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c06:	460b      	mov	r3, r1
 8004c08:	18db      	adds	r3, r3, r3
 8004c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	eb42 0303 	adc.w	r3, r2, r3
 8004c12:	657b      	str	r3, [r7, #84]	; 0x54
 8004c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c1c:	f7fb fae0 	bl	80001e0 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4b61      	ldr	r3, [pc, #388]	; (8004dac <UART_SetConfig+0x2d4>)
 8004c26:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	011c      	lsls	r4, r3, #4
 8004c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	1891      	adds	r1, r2, r2
 8004c46:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c48:	415b      	adcs	r3, r3
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c50:	4641      	mov	r1, r8
 8004c52:	eb12 0a01 	adds.w	sl, r2, r1
 8004c56:	4649      	mov	r1, r9
 8004c58:	eb43 0b01 	adc.w	fp, r3, r1
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c70:	4692      	mov	sl, r2
 8004c72:	469b      	mov	fp, r3
 8004c74:	4643      	mov	r3, r8
 8004c76:	eb1a 0303 	adds.w	r3, sl, r3
 8004c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c7e:	464b      	mov	r3, r9
 8004c80:	eb4b 0303 	adc.w	r3, fp, r3
 8004c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	18db      	adds	r3, r3, r3
 8004ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8004caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cb2:	f7fb fa95 	bl	80001e0 <__aeabi_uldivmod>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4b3b      	ldr	r3, [pc, #236]	; (8004dac <UART_SetConfig+0x2d4>)
 8004cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2264      	movs	r2, #100	; 0x64
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	1acb      	subs	r3, r1, r3
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cd2:	4b36      	ldr	r3, [pc, #216]	; (8004dac <UART_SetConfig+0x2d4>)
 8004cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ce0:	441c      	add	r4, r3
 8004ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	1891      	adds	r1, r2, r2
 8004cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cfc:	415b      	adcs	r3, r3
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d04:	4641      	mov	r1, r8
 8004d06:	1851      	adds	r1, r2, r1
 8004d08:	6339      	str	r1, [r7, #48]	; 0x30
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	414b      	adcs	r3, r1
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	00cb      	lsls	r3, r1, #3
 8004d20:	4651      	mov	r1, sl
 8004d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d26:	4651      	mov	r1, sl
 8004d28:	00ca      	lsls	r2, r1, #3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4642      	mov	r2, r8
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d38:	464b      	mov	r3, r9
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	eb42 0303 	adc.w	r3, r2, r3
 8004d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d58:	460b      	mov	r3, r1
 8004d5a:	18db      	adds	r3, r3, r3
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5e:	4613      	mov	r3, r2
 8004d60:	eb42 0303 	adc.w	r3, r2, r3
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d6e:	f7fb fa37 	bl	80001e0 <__aeabi_uldivmod>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <UART_SetConfig+0x2d4>)
 8004d78:	fba3 1302 	umull	r1, r3, r3, r2
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	2164      	movs	r1, #100	; 0x64
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	3332      	adds	r3, #50	; 0x32
 8004d8a:	4a08      	ldr	r2, [pc, #32]	; (8004dac <UART_SetConfig+0x2d4>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	f003 0207 	and.w	r2, r3, #7
 8004d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4422      	add	r2, r4
 8004d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da0:	e106      	b.n	8004fb0 <UART_SetConfig+0x4d8>
 8004da2:	bf00      	nop
 8004da4:	40011000 	.word	0x40011000
 8004da8:	40011400 	.word	0x40011400
 8004dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dc2:	4642      	mov	r2, r8
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	1891      	adds	r1, r2, r2
 8004dc8:	6239      	str	r1, [r7, #32]
 8004dca:	415b      	adcs	r3, r3
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	1854      	adds	r4, r2, r1
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	eb43 0501 	adc.w	r5, r3, r1
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	00eb      	lsls	r3, r5, #3
 8004de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dea:	00e2      	lsls	r2, r4, #3
 8004dec:	4614      	mov	r4, r2
 8004dee:	461d      	mov	r5, r3
 8004df0:	4643      	mov	r3, r8
 8004df2:	18e3      	adds	r3, r4, r3
 8004df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004df8:	464b      	mov	r3, r9
 8004dfa:	eb45 0303 	adc.w	r3, r5, r3
 8004dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e1e:	4629      	mov	r1, r5
 8004e20:	008b      	lsls	r3, r1, #2
 8004e22:	4621      	mov	r1, r4
 8004e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e28:	4621      	mov	r1, r4
 8004e2a:	008a      	lsls	r2, r1, #2
 8004e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e30:	f7fb f9d6 	bl	80001e0 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4b60      	ldr	r3, [pc, #384]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	011c      	lsls	r4, r3, #4
 8004e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	61b9      	str	r1, [r7, #24]
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e64:	4641      	mov	r1, r8
 8004e66:	1851      	adds	r1, r2, r1
 8004e68:	6139      	str	r1, [r7, #16]
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	414b      	adcs	r3, r1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	00cb      	lsls	r3, r1, #3
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e86:	4651      	mov	r1, sl
 8004e88:	00ca      	lsls	r2, r1, #3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4642      	mov	r2, r8
 8004e92:	189b      	adds	r3, r3, r2
 8004e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e98:	464b      	mov	r3, r9
 8004e9a:	460a      	mov	r2, r1
 8004e9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	008b      	lsls	r3, r1, #2
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	008a      	lsls	r2, r1, #2
 8004eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ece:	f7fb f987 	bl	80001e0 <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4b38      	ldr	r3, [pc, #224]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004eda:	fba3 2301 	umull	r2, r3, r3, r1
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	2264      	movs	r2, #100	; 0x64
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	1acb      	subs	r3, r1, r3
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	3332      	adds	r3, #50	; 0x32
 8004eec:	4a33      	ldr	r2, [pc, #204]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004eee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ef8:	441c      	add	r4, r3
 8004efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efe:	2200      	movs	r2, #0
 8004f00:	673b      	str	r3, [r7, #112]	; 0x70
 8004f02:	677a      	str	r2, [r7, #116]	; 0x74
 8004f04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	1891      	adds	r1, r2, r2
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	415b      	adcs	r3, r3
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f18:	4641      	mov	r1, r8
 8004f1a:	1851      	adds	r1, r2, r1
 8004f1c:	6039      	str	r1, [r7, #0]
 8004f1e:	4649      	mov	r1, r9
 8004f20:	414b      	adcs	r3, r1
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f30:	4659      	mov	r1, fp
 8004f32:	00cb      	lsls	r3, r1, #3
 8004f34:	4651      	mov	r1, sl
 8004f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	00ca      	lsls	r2, r1, #3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	4642      	mov	r2, r8
 8004f46:	189b      	adds	r3, r3, r2
 8004f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	460a      	mov	r2, r1
 8004f4e:	eb42 0303 	adc.w	r3, r2, r3
 8004f52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f5e:	667a      	str	r2, [r7, #100]	; 0x64
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	008b      	lsls	r3, r1, #2
 8004f70:	4641      	mov	r1, r8
 8004f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f76:	4641      	mov	r1, r8
 8004f78:	008a      	lsls	r2, r1, #2
 8004f7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f7e:	f7fb f92f 	bl	80001e0 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004f88:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	2164      	movs	r1, #100	; 0x64
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	3332      	adds	r3, #50	; 0x32
 8004f9a:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	f003 020f 	and.w	r2, r3, #15
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4422      	add	r2, r4
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fbc:	51eb851f 	.word	0x51eb851f

08004fc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	f107 001c 	add.w	r0, r7, #28
 8004fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fd2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d123      	bne.n	8005022 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005002:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005006:	2b01      	cmp	r3, #1
 8005008:	d105      	bne.n	8005016 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f001 fae2 	bl	80065e0 <USB_CoreReset>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]
 8005020:	e01b      	b.n	800505a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 fad6 	bl	80065e0 <USB_CoreReset>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005038:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
 800504c:	e005      	b.n	800505a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800505a:	7fbb      	ldrb	r3, [r7, #30]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10b      	bne.n	8005078 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f043 0206 	orr.w	r2, r3, #6
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f043 0220 	orr.w	r2, r3, #32
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005084:	b004      	add	sp, #16
 8005086:	4770      	bx	lr

08005088 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	4613      	mov	r3, r2
 8005094:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d165      	bne.n	8005168 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4a41      	ldr	r2, [pc, #260]	; (80051a4 <USB_SetTurnaroundTime+0x11c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d906      	bls.n	80050b2 <USB_SetTurnaroundTime+0x2a>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4a40      	ldr	r2, [pc, #256]	; (80051a8 <USB_SetTurnaroundTime+0x120>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d202      	bcs.n	80050b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80050ac:	230f      	movs	r3, #15
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e062      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4a3c      	ldr	r2, [pc, #240]	; (80051a8 <USB_SetTurnaroundTime+0x120>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d306      	bcc.n	80050c8 <USB_SetTurnaroundTime+0x40>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4a3b      	ldr	r2, [pc, #236]	; (80051ac <USB_SetTurnaroundTime+0x124>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d202      	bcs.n	80050c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050c2:	230e      	movs	r3, #14
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e057      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4a38      	ldr	r2, [pc, #224]	; (80051ac <USB_SetTurnaroundTime+0x124>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d306      	bcc.n	80050de <USB_SetTurnaroundTime+0x56>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4a37      	ldr	r2, [pc, #220]	; (80051b0 <USB_SetTurnaroundTime+0x128>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d202      	bcs.n	80050de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050d8:	230d      	movs	r3, #13
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e04c      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4a33      	ldr	r2, [pc, #204]	; (80051b0 <USB_SetTurnaroundTime+0x128>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d306      	bcc.n	80050f4 <USB_SetTurnaroundTime+0x6c>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4a32      	ldr	r2, [pc, #200]	; (80051b4 <USB_SetTurnaroundTime+0x12c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d802      	bhi.n	80050f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050ee:	230c      	movs	r3, #12
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e041      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4a2f      	ldr	r2, [pc, #188]	; (80051b4 <USB_SetTurnaroundTime+0x12c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d906      	bls.n	800510a <USB_SetTurnaroundTime+0x82>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4a2e      	ldr	r2, [pc, #184]	; (80051b8 <USB_SetTurnaroundTime+0x130>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d802      	bhi.n	800510a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005104:	230b      	movs	r3, #11
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e036      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4a2a      	ldr	r2, [pc, #168]	; (80051b8 <USB_SetTurnaroundTime+0x130>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d906      	bls.n	8005120 <USB_SetTurnaroundTime+0x98>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4a29      	ldr	r2, [pc, #164]	; (80051bc <USB_SetTurnaroundTime+0x134>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d802      	bhi.n	8005120 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800511a:	230a      	movs	r3, #10
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e02b      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4a26      	ldr	r2, [pc, #152]	; (80051bc <USB_SetTurnaroundTime+0x134>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d906      	bls.n	8005136 <USB_SetTurnaroundTime+0xae>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4a25      	ldr	r2, [pc, #148]	; (80051c0 <USB_SetTurnaroundTime+0x138>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d202      	bcs.n	8005136 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005130:	2309      	movs	r3, #9
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e020      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <USB_SetTurnaroundTime+0x138>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d306      	bcc.n	800514c <USB_SetTurnaroundTime+0xc4>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <USB_SetTurnaroundTime+0x13c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d802      	bhi.n	800514c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005146:	2308      	movs	r3, #8
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	e015      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <USB_SetTurnaroundTime+0x13c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d906      	bls.n	8005162 <USB_SetTurnaroundTime+0xda>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <USB_SetTurnaroundTime+0x140>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d202      	bcs.n	8005162 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800515c:	2307      	movs	r3, #7
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	e00a      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005162:	2306      	movs	r3, #6
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e007      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d102      	bne.n	8005174 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800516e:	2309      	movs	r3, #9
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	e001      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005174:	2309      	movs	r3, #9
 8005176:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	029b      	lsls	r3, r3, #10
 800518c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005190:	431a      	orrs	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	00d8acbf 	.word	0x00d8acbf
 80051a8:	00e4e1c0 	.word	0x00e4e1c0
 80051ac:	00f42400 	.word	0x00f42400
 80051b0:	01067380 	.word	0x01067380
 80051b4:	011a499f 	.word	0x011a499f
 80051b8:	01312cff 	.word	0x01312cff
 80051bc:	014ca43f 	.word	0x014ca43f
 80051c0:	016e3600 	.word	0x016e3600
 80051c4:	01a6ab1f 	.word	0x01a6ab1f
 80051c8:	01e84800 	.word	0x01e84800

080051cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f043 0201 	orr.w	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f023 0201 	bic.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d115      	bne.n	800525e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800523e:	200a      	movs	r0, #10
 8005240:	f7fb fd76 	bl	8000d30 <HAL_Delay>
      ms += 10U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	330a      	adds	r3, #10
 8005248:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f001 f939 	bl	80064c2 <USB_GetMode>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	d01e      	beq.n	8005294 <USB_SetCurrentMode+0x84>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2bc7      	cmp	r3, #199	; 0xc7
 800525a:	d9f0      	bls.n	800523e <USB_SetCurrentMode+0x2e>
 800525c:	e01a      	b.n	8005294 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d115      	bne.n	8005290 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005270:	200a      	movs	r0, #10
 8005272:	f7fb fd5d 	bl	8000d30 <HAL_Delay>
      ms += 10U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	330a      	adds	r3, #10
 800527a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f001 f920 	bl	80064c2 <USB_GetMode>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <USB_SetCurrentMode+0x84>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2bc7      	cmp	r3, #199	; 0xc7
 800528c:	d9f0      	bls.n	8005270 <USB_SetCurrentMode+0x60>
 800528e:	e001      	b.n	8005294 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e005      	b.n	80052a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2bc8      	cmp	r3, #200	; 0xc8
 8005298:	d101      	bne.n	800529e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052a8:	b084      	sub	sp, #16
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b086      	sub	sp, #24
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	e009      	b.n	80052dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	3340      	adds	r3, #64	; 0x40
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	2200      	movs	r2, #0
 80052d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	3301      	adds	r3, #1
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b0e      	cmp	r3, #14
 80052e0:	d9f2      	bls.n	80052c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d11c      	bne.n	8005324 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052f8:	f043 0302 	orr.w	r3, r3, #2
 80052fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	639a      	str	r2, [r3, #56]	; 0x38
 8005322:	e00b      	b.n	800533c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005342:	461a      	mov	r2, r3
 8005344:	2300      	movs	r3, #0
 8005346:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005348:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800534c:	2b01      	cmp	r3, #1
 800534e:	d10d      	bne.n	800536c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005358:	2100      	movs	r1, #0
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f968 	bl	8005630 <USB_SetDevSpeed>
 8005360:	e008      	b.n	8005374 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005362:	2101      	movs	r1, #1
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f963 	bl	8005630 <USB_SetDevSpeed>
 800536a:	e003      	b.n	8005374 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800536c:	2103      	movs	r1, #3
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f95e 	bl	8005630 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005374:	2110      	movs	r1, #16
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f8fa 	bl	8005570 <USB_FlushTxFifo>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f924 	bl	80055d4 <USB_FlushRxFifo>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539c:	461a      	mov	r2, r3
 800539e:	2300      	movs	r3, #0
 80053a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	461a      	mov	r2, r3
 80053aa:	2300      	movs	r3, #0
 80053ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b4:	461a      	mov	r2, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	e043      	b.n	8005448 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d6:	d118      	bne.n	800540a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	461a      	mov	r2, r3
 80053ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e013      	b.n	800541c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	461a      	mov	r2, r3
 8005402:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	e008      	b.n	800541c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005416:	461a      	mov	r2, r3
 8005418:	2300      	movs	r3, #0
 800541a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543a:	461a      	mov	r2, r3
 800543c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005440:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	3301      	adds	r3, #1
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800544c:	461a      	mov	r2, r3
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4293      	cmp	r3, r2
 8005452:	d3b5      	bcc.n	80053c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	e043      	b.n	80054e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800546c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005470:	d118      	bne.n	80054a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005484:	461a      	mov	r2, r3
 8005486:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	e013      	b.n	80054b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549a:	461a      	mov	r2, r3
 800549c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	e008      	b.n	80054b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b0:	461a      	mov	r2, r3
 80054b2:	2300      	movs	r3, #0
 80054b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c2:	461a      	mov	r2, r3
 80054c4:	2300      	movs	r3, #0
 80054c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	461a      	mov	r2, r3
 80054d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	3301      	adds	r3, #1
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054e6:	461a      	mov	r2, r3
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d3b5      	bcc.n	800545a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005500:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800550e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005510:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f043 0210 	orr.w	r2, r3, #16
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	4b10      	ldr	r3, [pc, #64]	; (800556c <USB_DevInit+0x2c4>)
 800552a:	4313      	orrs	r3, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005530:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f043 0208 	orr.w	r2, r3, #8
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005544:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005548:	2b01      	cmp	r3, #1
 800554a:	d107      	bne.n	800555c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005554:	f043 0304 	orr.w	r3, r3, #4
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005568:	b004      	add	sp, #16
 800556a:	4770      	bx	lr
 800556c:	803c3800 	.word	0x803c3800

08005570 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3301      	adds	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800558a:	d901      	bls.n	8005590 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e01b      	b.n	80055c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	daf2      	bge.n	800557e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	019b      	lsls	r3, r3, #6
 80055a0:	f043 0220 	orr.w	r2, r3, #32
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80055b4:	d901      	bls.n	80055ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e006      	b.n	80055c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d0f0      	beq.n	80055a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3301      	adds	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80055ec:	d901      	bls.n	80055f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e018      	b.n	8005624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	daf2      	bge.n	80055e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2210      	movs	r2, #16
 8005602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3301      	adds	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005610:	d901      	bls.n	8005616 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e006      	b.n	8005624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b10      	cmp	r3, #16
 8005620:	d0f0      	beq.n	8005604 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005650:	4313      	orrs	r3, r2
 8005652:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005662:	b480      	push	{r7}
 8005664:	b087      	sub	sp, #28
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0306 	and.w	r3, r3, #6
 800567a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005682:	2300      	movs	r3, #0
 8005684:	75fb      	strb	r3, [r7, #23]
 8005686:	e00a      	b.n	800569e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d002      	beq.n	8005694 <USB_GetDevSpeed+0x32>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b06      	cmp	r3, #6
 8005692:	d102      	bne.n	800569a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005694:	2302      	movs	r3, #2
 8005696:	75fb      	strb	r3, [r7, #23]
 8005698:	e001      	b.n	800569e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800569a:	230f      	movs	r3, #15
 800569c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800569e:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d13a      	bne.n	800573e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	2101      	movs	r1, #1
 80056da:	fa01 f303 	lsl.w	r3, r1, r3
 80056de:	b29b      	uxth	r3, r3
 80056e0:	68f9      	ldr	r1, [r7, #12]
 80056e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d155      	bne.n	80057ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	791b      	ldrb	r3, [r3, #4]
 800571a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800571c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	059b      	lsls	r3, r3, #22
 8005722:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005724:	4313      	orrs	r3, r2
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	e036      	b.n	80057ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	2101      	movs	r1, #1
 8005750:	fa01 f303 	lsl.w	r3, r1, r3
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	68f9      	ldr	r1, [r7, #12]
 8005758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800575c:	4313      	orrs	r3, r2
 800575e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d11a      	bne.n	80057ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	791b      	ldrb	r3, [r3, #4]
 8005790:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005792:	430b      	orrs	r3, r1
 8005794:	4313      	orrs	r3, r2
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	440a      	add	r2, r1
 800579e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	785b      	ldrb	r3, [r3, #1]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d161      	bne.n	800589c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ee:	d11f      	bne.n	8005830 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800580e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	0151      	lsls	r1, r2, #5
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	440a      	add	r2, r1
 8005826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800582e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	2101      	movs	r1, #1
 8005842:	fa01 f303 	lsl.w	r3, r1, r3
 8005846:	b29b      	uxth	r3, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005850:	4013      	ands	r3, r2
 8005852:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	2101      	movs	r1, #1
 8005866:	fa01 f303 	lsl.w	r3, r1, r3
 800586a:	b29b      	uxth	r3, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005874:	4013      	ands	r3, r2
 8005876:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	0159      	lsls	r1, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	440b      	add	r3, r1
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	4619      	mov	r1, r3
 8005894:	4b35      	ldr	r3, [pc, #212]	; (800596c <USB_DeactivateEndpoint+0x1b0>)
 8005896:	4013      	ands	r3, r2
 8005898:	600b      	str	r3, [r1, #0]
 800589a:	e060      	b.n	800595e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b2:	d11f      	bne.n	80058f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	2101      	movs	r1, #1
 8005906:	fa01 f303 	lsl.w	r3, r1, r3
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	43db      	mvns	r3, r3
 800590e:	68f9      	ldr	r1, [r7, #12]
 8005910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005914:	4013      	ands	r3, r2
 8005916:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	2101      	movs	r1, #1
 800592a:	fa01 f303 	lsl.w	r3, r1, r3
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	43db      	mvns	r3, r3
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005938:	4013      	ands	r3, r2
 800593a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	0159      	lsls	r1, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	440b      	add	r3, r1
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	4619      	mov	r1, r3
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <USB_DeactivateEndpoint+0x1b4>)
 800595a:	4013      	ands	r3, r2
 800595c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	ec337800 	.word	0xec337800
 8005970:	eff37800 	.word	0xeff37800

08005974 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	; 0x28
 8005978:	af02      	add	r7, sp, #8
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2b01      	cmp	r3, #1
 8005992:	f040 817a 	bne.w	8005c8a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d132      	bne.n	8005a04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	0151      	lsls	r1, r2, #5
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	440a      	add	r2, r1
 80059b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fc:	0cdb      	lsrs	r3, r3, #19
 80059fe:	04db      	lsls	r3, r3, #19
 8005a00:	6113      	str	r3, [r2, #16]
 8005a02:	e092      	b.n	8005b2a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	0151      	lsls	r1, r2, #5
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	440a      	add	r2, r1
 8005a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a1e:	0cdb      	lsrs	r3, r3, #19
 8005a20:	04db      	lsls	r3, r3, #19
 8005a22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	0151      	lsls	r1, r2, #5
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	440a      	add	r2, r1
 8005a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a46:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d11a      	bne.n	8005a84 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d903      	bls.n	8005a62 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	0151      	lsls	r1, r2, #5
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	440a      	add	r2, r1
 8005a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a80:	6113      	str	r3, [r2, #16]
 8005a82:	e01b      	b.n	8005abc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a90:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6919      	ldr	r1, [r3, #16]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	440b      	add	r3, r1
 8005a9c:	1e59      	subs	r1, r3, #1
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005aa6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005aa8:	4ba2      	ldr	r3, [pc, #648]	; (8005d34 <USB_EPStartXfer+0x3c0>)
 8005aaa:	400b      	ands	r3, r1
 8005aac:	69b9      	ldr	r1, [r7, #24]
 8005aae:	0148      	lsls	r0, r1, #5
 8005ab0:	69f9      	ldr	r1, [r7, #28]
 8005ab2:	4401      	add	r1, r0
 8005ab4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac8:	691a      	ldr	r2, [r3, #16]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad2:	69b9      	ldr	r1, [r7, #24]
 8005ad4:	0148      	lsls	r0, r1, #5
 8005ad6:	69f9      	ldr	r1, [r7, #28]
 8005ad8:	4401      	add	r1, r0
 8005ada:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	791b      	ldrb	r3, [r3, #4]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d11f      	bne.n	8005b2a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d14b      	bne.n	8005bc8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	461a      	mov	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	791b      	ldrb	r3, [r3, #4]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d128      	bne.n	8005ba6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d110      	bne.n	8005b86 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	e00f      	b.n	8005ba6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	e165      	b.n	8005e94 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005be6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	791b      	ldrb	r3, [r3, #4]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d015      	beq.n	8005c1c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 814d 	beq.w	8005e94 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c16:	4313      	orrs	r3, r2
 8005c18:	634b      	str	r3, [r1, #52]	; 0x34
 8005c1a:	e13b      	b.n	8005e94 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d110      	bne.n	8005c4e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	e00f      	b.n	8005c6e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	68d9      	ldr	r1, [r3, #12]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	b298      	uxth	r0, r3
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	4603      	mov	r3, r0
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f9b8 	bl	8005ff8 <USB_WritePacket>
 8005c88:	e104      	b.n	8005e94 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca4:	0cdb      	lsrs	r3, r3, #19
 8005ca6:	04db      	lsls	r3, r3, #19
 8005ca8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	0151      	lsls	r1, r2, #5
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	440a      	add	r2, r1
 8005cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ccc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d131      	bne.n	8005d38 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf8:	691a      	ldr	r2, [r3, #16]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d02:	69b9      	ldr	r1, [r7, #24]
 8005d04:	0148      	lsls	r0, r1, #5
 8005d06:	69f9      	ldr	r1, [r7, #28]
 8005d08:	4401      	add	r1, r0
 8005d0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d30:	6113      	str	r3, [r2, #16]
 8005d32:	e061      	b.n	8005df8 <USB_EPStartXfer+0x484>
 8005d34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d123      	bne.n	8005d88 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d56:	69b9      	ldr	r1, [r7, #24]
 8005d58:	0148      	lsls	r0, r1, #5
 8005d5a:	69f9      	ldr	r1, [r7, #28]
 8005d5c:	4401      	add	r1, r0
 8005d5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d62:	4313      	orrs	r3, r2
 8005d64:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d84:	6113      	str	r3, [r2, #16]
 8005d86:	e037      	b.n	8005df8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4413      	add	r3, r2
 8005d92:	1e5a      	subs	r2, r3, #1
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	8afa      	ldrh	r2, [r7, #22]
 8005da4:	fb03 f202 	mul.w	r2, r3, r2
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	8afb      	ldrh	r3, [r7, #22]
 8005dbc:	04d9      	lsls	r1, r3, #19
 8005dbe:	4b38      	ldr	r3, [pc, #224]	; (8005ea0 <USB_EPStartXfer+0x52c>)
 8005dc0:	400b      	ands	r3, r1
 8005dc2:	69b9      	ldr	r1, [r7, #24]
 8005dc4:	0148      	lsls	r0, r1, #5
 8005dc6:	69f9      	ldr	r1, [r7, #28]
 8005dc8:	4401      	add	r1, r0
 8005dca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de8:	69b9      	ldr	r1, [r7, #24]
 8005dea:	0148      	lsls	r0, r1, #5
 8005dec:	69f9      	ldr	r1, [r7, #28]
 8005dee:	4401      	add	r1, r0
 8005df0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005df4:	4313      	orrs	r3, r2
 8005df6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d10d      	bne.n	8005e1a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	68d9      	ldr	r1, [r3, #12]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	460a      	mov	r2, r1
 8005e18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	791b      	ldrb	r3, [r3, #4]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d128      	bne.n	8005e74 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d110      	bne.n	8005e54 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	e00f      	b.n	8005e74 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3720      	adds	r7, #32
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	1ff80000 	.word	0x1ff80000

08005ea4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d14a      	bne.n	8005f58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eda:	f040 8086 	bne.w	8005fea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	7812      	ldrb	r2, [r2, #0]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	7812      	ldrb	r2, [r2, #0]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d902      	bls.n	8005f3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	75fb      	strb	r3, [r7, #23]
          break;
 8005f3a:	e056      	b.n	8005fea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f54:	d0e7      	beq.n	8005f26 <USB_EPStopXfer+0x82>
 8005f56:	e048      	b.n	8005fea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f70:	d13b      	bne.n	8005fea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	7812      	ldrb	r2, [r2, #0]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	7812      	ldrb	r2, [r2, #0]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d902      	bls.n	8005fd0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8005fce:	e00c      	b.n	8005fea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fe8:	d0e7      	beq.n	8005fba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b089      	sub	sp, #36	; 0x24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	4611      	mov	r1, r2
 8006004:	461a      	mov	r2, r3
 8006006:	460b      	mov	r3, r1
 8006008:	71fb      	strb	r3, [r7, #7]
 800600a:	4613      	mov	r3, r2
 800600c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006016:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800601a:	2b00      	cmp	r3, #0
 800601c:	d123      	bne.n	8006066 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800601e:	88bb      	ldrh	r3, [r7, #4]
 8006020:	3303      	adds	r3, #3
 8006022:	089b      	lsrs	r3, r3, #2
 8006024:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006026:	2300      	movs	r3, #0
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	e018      	b.n	800605e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	031a      	lsls	r2, r3, #12
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	4413      	add	r3, r2
 8006034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006038:	461a      	mov	r2, r3
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	3301      	adds	r3, #1
 8006044:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	3301      	adds	r3, #1
 800604a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	3301      	adds	r3, #1
 8006050:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	3301      	adds	r3, #1
 8006056:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	3301      	adds	r3, #1
 800605c:	61bb      	str	r3, [r7, #24]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	429a      	cmp	r2, r3
 8006064:	d3e2      	bcc.n	800602c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3724      	adds	r7, #36	; 0x24
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006074:	b480      	push	{r7}
 8006076:	b08b      	sub	sp, #44	; 0x2c
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	089b      	lsrs	r3, r3, #2
 800608e:	b29b      	uxth	r3, r3
 8006090:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	f003 0303 	and.w	r3, r3, #3
 8006098:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	623b      	str	r3, [r7, #32]
 800609e:	e014      	b.n	80060ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	3301      	adds	r3, #1
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	3301      	adds	r3, #1
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	3301      	adds	r3, #1
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	3301      	adds	r3, #1
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	3301      	adds	r3, #1
 80060c8:	623b      	str	r3, [r7, #32]
 80060ca:	6a3a      	ldr	r2, [r7, #32]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d3e6      	bcc.n	80060a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060d2:	8bfb      	ldrh	r3, [r7, #30]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01e      	beq.n	8006116 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e2:	461a      	mov	r2, r3
 80060e4:	f107 0310 	add.w	r3, r7, #16
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	fa22 f303 	lsr.w	r3, r2, r3
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	701a      	strb	r2, [r3, #0]
      i++;
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	3301      	adds	r3, #1
 8006102:	623b      	str	r3, [r7, #32]
      pDest++;
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	3301      	adds	r3, #1
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800610a:	8bfb      	ldrh	r3, [r7, #30]
 800610c:	3b01      	subs	r3, #1
 800610e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006110:	8bfb      	ldrh	r3, [r7, #30]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1ea      	bne.n	80060ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006118:	4618      	mov	r0, r3
 800611a:	372c      	adds	r7, #44	; 0x2c
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	785b      	ldrb	r3, [r3, #1]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d12c      	bne.n	800619a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	db12      	blt.n	8006178 <USB_EPSetStall+0x54>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00f      	beq.n	8006178 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006172:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006176:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	e02b      	b.n	80061f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	db12      	blt.n	80061d2 <USB_EPSetStall+0xae>
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00f      	beq.n	80061d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	0151      	lsls	r1, r2, #5
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	440a      	add	r2, r1
 80061e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d128      	bne.n	800626e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	440a      	add	r2, r1
 8006232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006236:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800623a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	791b      	ldrb	r3, [r3, #4]
 8006240:	2b03      	cmp	r3, #3
 8006242:	d003      	beq.n	800624c <USB_EPClearStall+0x4c>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	791b      	ldrb	r3, [r3, #4]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d138      	bne.n	80062be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	440a      	add	r2, r1
 8006262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	e027      	b.n	80062be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	440a      	add	r2, r1
 8006284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006288:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800628c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	791b      	ldrb	r3, [r3, #4]
 8006292:	2b03      	cmp	r3, #3
 8006294:	d003      	beq.n	800629e <USB_EPClearStall+0x9e>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	791b      	ldrb	r3, [r3, #4]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d10f      	bne.n	80062be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	78fb      	ldrb	r3, [r7, #3]
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006300:	68f9      	ldr	r1, [r7, #12]
 8006302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006306:	4313      	orrs	r3, r2
 8006308:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006332:	f023 0303 	bic.w	r3, r3, #3
 8006336:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006346:	f023 0302 	bic.w	r3, r3, #2
 800634a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800635a:	b480      	push	{r7}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006374:	f023 0303 	bic.w	r3, r3, #3
 8006378:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006388:	f043 0302 	orr.w	r3, r3, #2
 800638c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4013      	ands	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063b4:	68fb      	ldr	r3, [r7, #12]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	4013      	ands	r3, r2
 80063e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	0c1b      	lsrs	r3, r3, #16
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	4013      	ands	r3, r2
 8006418:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	b29b      	uxth	r3, r3
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	460b      	mov	r3, r1
 8006434:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	4013      	ands	r3, r2
 8006456:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006458:	68bb      	ldr	r3, [r7, #8]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006466:	b480      	push	{r7}
 8006468:	b087      	sub	sp, #28
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006488:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	fa22 f303 	lsr.w	r3, r2, r3
 8006496:	01db      	lsls	r3, r3, #7
 8006498:	b2db      	uxtb	r3, r3
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	4313      	orrs	r3, r2
 800649e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4013      	ands	r3, r2
 80064b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064b4:	68bb      	ldr	r3, [r7, #8]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	f003 0301 	and.w	r3, r3, #1
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80064de:	b480      	push	{r7}
 80064e0:	b085      	sub	sp, #20
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064fc:	f023 0307 	bic.w	r3, r3, #7
 8006500:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006514:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	460b      	mov	r3, r1
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	333c      	adds	r3, #60	; 0x3c
 800653a:	3304      	adds	r3, #4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4a26      	ldr	r2, [pc, #152]	; (80065dc <USB_EP0_OutStart+0xb8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d90a      	bls.n	800655e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006558:	d101      	bne.n	800655e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	e037      	b.n	80065ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006564:	461a      	mov	r2, r3
 8006566:	2300      	movs	r3, #0
 8006568:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800657c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658c:	f043 0318 	orr.w	r3, r3, #24
 8006590:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065a6:	7afb      	ldrb	r3, [r7, #11]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d10f      	bne.n	80065cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	461a      	mov	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80065ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	4f54300a 	.word	0x4f54300a

080065e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3301      	adds	r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065f8:	d901      	bls.n	80065fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e01b      	b.n	8006636 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	daf2      	bge.n	80065ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f043 0201 	orr.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3301      	adds	r3, #1
 800661a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006622:	d901      	bls.n	8006628 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e006      	b.n	8006636 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b01      	cmp	r3, #1
 8006632:	d0f0      	beq.n	8006616 <USB_CoreReset+0x36>

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
	...

08006644 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8006650:	f643 4050 	movw	r0, #15440	; 0x3c50
 8006654:	f005 f912 	bl	800b87c <USBD_static_malloc>
 8006658:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	32b0      	adds	r2, #176	; 0xb0
 800666a:	2100      	movs	r1, #0
 800666c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006670:	2302      	movs	r3, #2
 8006672:	e07a      	b.n	800676a <USBD_AUDIO_Init+0x126>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	32b0      	adds	r2, #176	; 0xb0
 800667e:	68f9      	ldr	r1, [r7, #12]
 8006680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	32b0      	adds	r2, #176	; 0xb0
 800668e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
//#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
//  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
//#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	7c1b      	ldrb	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10d      	bne.n	80066bc <USBD_AUDIO_Init+0x78>
  {
    pdev->ep_in[AUDIOInEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 80066a0:	4b34      	ldr	r3, [pc, #208]	; (8006774 <USBD_AUDIO_Init+0x130>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	f003 020f 	and.w	r2, r3, #15
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	3326      	adds	r3, #38	; 0x26
 80066b6:	2201      	movs	r2, #1
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	e00c      	b.n	80066d6 <USBD_AUDIO_Init+0x92>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[AUDIOInEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 80066bc:	4b2d      	ldr	r3, [pc, #180]	; (8006774 <USBD_AUDIO_Init+0x130>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	f003 020f 	and.w	r2, r3, #15
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	440b      	add	r3, r1
 80066d0:	3326      	adds	r3, #38	; 0x26
 80066d2:	2201      	movs	r2, #1
 80066d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOInEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 80066d6:	4b27      	ldr	r3, [pc, #156]	; (8006774 <USBD_AUDIO_Init+0x130>)
 80066d8:	7819      	ldrb	r1, [r3, #0]
 80066da:	23c0      	movs	r3, #192	; 0xc0
 80066dc:	2201      	movs	r2, #1
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f004 ff89 	bl	800b5f6 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <USBD_AUDIO_Init+0x134>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	f003 020f 	and.w	r2, r3, #15
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	440b      	add	r3, r1
 80066f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066fc:	2201      	movs	r2, #1
 80066fe:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800670c:	2203      	movs	r2, #3
 800670e:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006718:	2200      	movs	r2, #0
 800671a:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006724:	2200      	movs	r2, #0
 8006726:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	33b0      	adds	r3, #176	; 0xb0
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2200      	movs	r2, #0
 800674a:	2146      	movs	r1, #70	; 0x46
 800674c:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8006750:	4798      	blx	r3
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <USBD_AUDIO_Init+0x118>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8006758:	2303      	movs	r3, #3
 800675a:	e006      	b.n	800676a <USBD_AUDIO_Init+0x126>

  /* Prepare Out endpoint to receive 1st packet */
 // (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 //                              AUDIO_OUT_PACKET);

  USBD_LL_Transmit(pdev, AUDIO_IN_EP, IsocInBuffDummy, 192);
 800675c:	23c0      	movs	r3, #192	; 0xc0
 800675e:	4a07      	ldr	r2, [pc, #28]	; (800677c <USBD_AUDIO_Init+0x138>)
 8006760:	2182      	movs	r1, #130	; 0x82
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f005 f834 	bl	800b7d0 <USBD_LL_Transmit>

  return (uint8_t)USBD_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200000b7 	.word	0x200000b7
 8006778:	200000b6 	.word	0x200000b6
 800677c:	2000159c 	.word	0x2000159c

08006780 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 800678c:	4b28      	ldr	r3, [pc, #160]	; (8006830 <USBD_AUDIO_DeInit+0xb0>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f004 ff55 	bl	800b642 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 8006798:	4b25      	ldr	r3, [pc, #148]	; (8006830 <USBD_AUDIO_DeInit+0xb0>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	f003 020f 	and.w	r2, r3, #15
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067b0:	2200      	movs	r2, #0
 80067b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 80067b4:	4b1e      	ldr	r3, [pc, #120]	; (8006830 <USBD_AUDIO_DeInit+0xb0>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	f003 020f 	and.w	r2, r3, #15
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	440b      	add	r3, r1
 80067c8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80067cc:	2200      	movs	r2, #0
 80067ce:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	32b0      	adds	r2, #176	; 0xb0
 80067da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d020      	beq.n	8006824 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	33b0      	adds	r3, #176	; 0xb0
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2000      	movs	r0, #0
 80067f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	32b0      	adds	r2, #176	; 0xb0
 8006802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006806:	4618      	mov	r0, r3
 8006808:	f005 f846 	bl	800b898 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	32b0      	adds	r2, #176	; 0xb0
 8006816:	2100      	movs	r1, #0
 8006818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	200000b6 	.word	0x200000b6

08006834 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	32b0      	adds	r2, #176	; 0xb0
 8006850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006854:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800685c:	2303      	movs	r3, #3
 800685e:	e0c1      	b.n	80069e4 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01a      	beq.n	80068a2 <USBD_AUDIO_Setup+0x6e>
 800686c:	2b20      	cmp	r3, #32
 800686e:	f040 80b1 	bne.w	80069d4 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d006      	beq.n	8006888 <USBD_AUDIO_Setup+0x54>
 800687a:	2b81      	cmp	r3, #129	; 0x81
 800687c:	d109      	bne.n	8006892 <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fa7d 	bl	8006d80 <AUDIO_REQ_GetCurrent>
          break;
 8006886:	e00b      	b.n	80068a0 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 faa4 	bl	8006dd8 <AUDIO_REQ_SetCurrent>
          break;
 8006890:	e006      	b.n	80068a0 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 fd0e 	bl	80082b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800689a:	2303      	movs	r3, #3
 800689c:	75fb      	strb	r3, [r7, #23]
          break;
 800689e:	bf00      	nop
      }
      break;
 80068a0:	e09f      	b.n	80069e2 <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b0b      	cmp	r3, #11
 80068a8:	f200 8089 	bhi.w	80069be <USBD_AUDIO_Setup+0x18a>
 80068ac:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <USBD_AUDIO_Setup+0x80>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	080068e5 	.word	0x080068e5
 80068b8:	080069cd 	.word	0x080069cd
 80068bc:	080069bf 	.word	0x080069bf
 80068c0:	080069bf 	.word	0x080069bf
 80068c4:	080069bf 	.word	0x080069bf
 80068c8:	080069bf 	.word	0x080069bf
 80068cc:	0800690f 	.word	0x0800690f
 80068d0:	080069bf 	.word	0x080069bf
 80068d4:	080069bf 	.word	0x080069bf
 80068d8:	080069bf 	.word	0x080069bf
 80068dc:	08006957 	.word	0x08006957
 80068e0:	0800697f 	.word	0x0800697f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d107      	bne.n	8006900 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068f0:	f107 0308 	add.w	r3, r7, #8
 80068f4:	2202      	movs	r2, #2
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 fd4d 	bl	8008398 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068fe:	e068      	b.n	80069d2 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 fcd7 	bl	80082b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006908:	2303      	movs	r3, #3
 800690a:	75fb      	strb	r3, [r7, #23]
          break;
 800690c:	e061      	b.n	80069d2 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	885b      	ldrh	r3, [r3, #2]
 8006912:	0a1b      	lsrs	r3, r3, #8
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b21      	cmp	r3, #33	; 0x21
 8006918:	d15a      	bne.n	80069d0 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fac7 	bl	8006eb4 <USBD_AUDIO_GetAudioHeaderDesc>
 8006926:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00c      	beq.n	8006948 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	88db      	ldrh	r3, [r3, #6]
 8006932:	2b09      	cmp	r3, #9
 8006934:	bf28      	it	cs
 8006936:	2309      	movcs	r3, #9
 8006938:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800693a:	897b      	ldrh	r3, [r7, #10]
 800693c:	461a      	mov	r2, r3
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 fd29 	bl	8008398 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8006946:	e043      	b.n	80069d0 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 fcb3 	bl	80082b6 <USBD_CtlError>
              ret = USBD_FAIL;
 8006950:	2303      	movs	r3, #3
 8006952:	75fb      	strb	r3, [r7, #23]
          break;
 8006954:	e03c      	b.n	80069d0 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b03      	cmp	r3, #3
 8006960:	d106      	bne.n	8006970 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2201      	movs	r2, #1
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fd15 	bl	8008398 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800696e:	e030      	b.n	80069d2 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fc9f 	bl	80082b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006978:	2303      	movs	r3, #3
 800697a:	75fb      	strb	r3, [r7, #23]
          break;
 800697c:	e029      	b.n	80069d2 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b03      	cmp	r3, #3
 8006988:	d112      	bne.n	80069b0 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	885b      	ldrh	r3, [r3, #2]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d806      	bhi.n	80069a2 <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	885b      	ldrh	r3, [r3, #2]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	461a      	mov	r2, r3
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069a0:	e017      	b.n	80069d2 <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fc86 	bl	80082b6 <USBD_CtlError>
              ret = USBD_FAIL;
 80069aa:	2303      	movs	r3, #3
 80069ac:	75fb      	strb	r3, [r7, #23]
          break;
 80069ae:	e010      	b.n	80069d2 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f001 fc7f 	bl	80082b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80069b8:	2303      	movs	r3, #3
 80069ba:	75fb      	strb	r3, [r7, #23]
          break;
 80069bc:	e009      	b.n	80069d2 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 fc78 	bl	80082b6 <USBD_CtlError>
          ret = USBD_FAIL;
 80069c6:	2303      	movs	r3, #3
 80069c8:	75fb      	strb	r3, [r7, #23]
          break;
 80069ca:	e002      	b.n	80069d2 <USBD_AUDIO_Setup+0x19e>
          break;
 80069cc:	bf00      	nop
 80069ce:	e008      	b.n	80069e2 <USBD_AUDIO_Setup+0x1ae>
          break;
 80069d0:	bf00      	nop
      }
      break;
 80069d2:	e006      	b.n	80069e2 <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 fc6d 	bl	80082b6 <USBD_CtlError>
      ret = USBD_FAIL;
 80069dc:	2303      	movs	r3, #3
 80069de:	75fb      	strb	r3, [r7, #23]
      break;
 80069e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2264      	movs	r2, #100	; 0x64
 80069f8:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 80069fa:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	20000048 	.word	0x20000048

08006a0c <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]





  if (dataReady ==1 || dataReady==2){
 8006a18:	4b33      	ldr	r3, [pc, #204]	; (8006ae8 <USBD_AUDIO_DataIn+0xdc>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d004      	beq.n	8006a2c <USBD_AUDIO_DataIn+0x20>
 8006a22:	4b31      	ldr	r3, [pc, #196]	; (8006ae8 <USBD_AUDIO_DataIn+0xdc>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d13d      	bne.n	8006aa8 <USBD_AUDIO_DataIn+0x9c>

  #define MSB (i2SDataBuffer[i2SSampleIdx + sampleInBufferIdx] & 0xff)
  #define LSB ((i2SDataBuffer[i2SSampleIdx + sampleInBufferIdx] >> 8)&0xff)

    for (uint8_t sampleInBufferIdx = 0; sampleInBufferIdx < SAMPLES_16_MS; sampleInBufferIdx++) {
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
 8006a30:	e021      	b.n	8006a76 <USBD_AUDIO_DataIn+0x6a>
    		usbData[0][(sampleInBufferIdx * 2)] =  MSB;
 8006a32:	4b2e      	ldr	r3, [pc, #184]	; (8006aec <USBD_AUDIO_DataIn+0xe0>)
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	4a2c      	ldr	r2, [pc, #176]	; (8006af0 <USBD_AUDIO_DataIn+0xe4>)
 8006a40:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	b2d1      	uxtb	r1, r2
 8006a4a:	4a2a      	ldr	r2, [pc, #168]	; (8006af4 <USBD_AUDIO_DataIn+0xe8>)
 8006a4c:	54d1      	strb	r1, [r2, r3]
    		usbData[0][(sampleInBufferIdx * 2) + 1] = LSB;
 8006a4e:	4b27      	ldr	r3, [pc, #156]	; (8006aec <USBD_AUDIO_DataIn+0xe0>)
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	4413      	add	r3, r2
 8006a5a:	4a25      	ldr	r2, [pc, #148]	; (8006af0 <USBD_AUDIO_DataIn+0xe4>)
 8006a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a60:	0a1b      	lsrs	r3, r3, #8
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	3301      	adds	r3, #1
 8006a6a:	b2d1      	uxtb	r1, r2
 8006a6c:	4a21      	ldr	r2, [pc, #132]	; (8006af4 <USBD_AUDIO_DataIn+0xe8>)
 8006a6e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t sampleInBufferIdx = 0; sampleInBufferIdx < SAMPLES_16_MS; sampleInBufferIdx++) {
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	3301      	adds	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	2b5f      	cmp	r3, #95	; 0x5f
 8006a7a:	d9da      	bls.n	8006a32 <USBD_AUDIO_DataIn+0x26>
    		//increment sample in 16bit array of i2s data

    }
    i2SSampleIdx+=SAMPLES_16_MS;
 8006a7c:	4b1b      	ldr	r3, [pc, #108]	; (8006aec <USBD_AUDIO_DataIn+0xe0>)
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3360      	adds	r3, #96	; 0x60
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	4b19      	ldr	r3, [pc, #100]	; (8006aec <USBD_AUDIO_DataIn+0xe0>)
 8006a88:	801a      	strh	r2, [r3, #0]
    i2SSampleIdx = (i2SSampleIdx % BUFFER_SIZE);
 8006a8a:	4b18      	ldr	r3, [pc, #96]	; (8006aec <USBD_AUDIO_DataIn+0xe0>)
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	4b19      	ldr	r3, [pc, #100]	; (8006af8 <USBD_AUDIO_DataIn+0xec>)
 8006a92:	fba3 1302 	umull	r1, r3, r3, r2
 8006a96:	0a59      	lsrs	r1, r3, #9
 8006a98:	460b      	mov	r3, r1
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	440b      	add	r3, r1
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	4b11      	ldr	r3, [pc, #68]	; (8006aec <USBD_AUDIO_DataIn+0xe0>)
 8006aa6:	801a      	strh	r2, [r3, #0]


  }


  	  	USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 8006aa8:	2182      	movs	r1, #130	; 0x82
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f004 fde8 	bl	800b680 <USBD_LL_FlushEP>
  	    USBD_StatusTypeDef status = USBD_LL_Transmit(pdev, AUDIO_IN_EP, &usbData[0][0], SAMPLES_8_MS);
 8006ab0:	23c0      	movs	r3, #192	; 0xc0
 8006ab2:	4a10      	ldr	r2, [pc, #64]	; (8006af4 <USBD_AUDIO_DataIn+0xe8>)
 8006ab4:	2182      	movs	r1, #130	; 0x82
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f004 fe8a 	bl	800b7d0 <USBD_LL_Transmit>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73bb      	strb	r3, [r7, #14]

  	    usbPkgIdx++;
 8006ac0:	4b0e      	ldr	r3, [pc, #56]	; (8006afc <USBD_AUDIO_DataIn+0xf0>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <USBD_AUDIO_DataIn+0xf0>)
 8006acc:	701a      	strb	r2, [r3, #0]
  	    usbPkgIdx = (usbPkgIdx % 2);
 8006ace:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <USBD_AUDIO_DataIn+0xf0>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	4b08      	ldr	r3, [pc, #32]	; (8006afc <USBD_AUDIO_DataIn+0xf0>)
 8006adc:	701a      	strb	r2, [r3, #0]



  /* Only OUT data are processed */

  return (uint8_t)USBD_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	2000028a 	.word	0x2000028a
 8006aec:	2000028c 	.word	0x2000028c
 8006af0:	20000290 	.word	0x20000290
 8006af4:	20001490 	.word	0x20001490
 8006af8:	38e38e39 	.word	0x38e38e39
 8006afc:	20000288 	.word	0x20000288

08006b00 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	32b0      	adds	r2, #176	; 0xb0
 8006b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b16:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e02a      	b.n	8006b78 <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006b28:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d122      	bne.n	8006b76 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006b36:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d11b      	bne.n	8006b76 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	33b0      	adds	r3, #176	; 0xb0
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8006b56:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
	...

08006b98 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  //UNUSED(pdev);

	 USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	32b0      	adds	r2, #176	; 0xb0
 8006baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bae:	60fb      	str	r3, [r7, #12]

  if (haudio->alt_setting == 1){
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d108      	bne.n	8006bca <USBD_AUDIO_SOF+0x32>
	  //do somehing

	  //set to invalid state.. might be issue when requested by host :)
	  haudio->alt_setting =2;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	601a      	str	r2, [r3, #0]

	  pdevRef = pdev;
 8006bbe:	4a06      	ldr	r2, [pc, #24]	; (8006bd8 <USBD_AUDIO_SOF+0x40>)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6013      	str	r3, [r2, #0]
      usbPkgSendFlag=1;
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <USBD_AUDIO_SOF+0x44>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	701a      	strb	r2, [r3, #0]

  }

  return (uint8_t)USBD_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	2000171c 	.word	0x2000171c
 8006bdc:	20000289 	.word	0x20000289

08006be0 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	460b      	mov	r3, r1
 8006c04:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	32b0      	adds	r2, #176	; 0xb0
 8006c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <USBD_AUDIO_IsoOutIncomplete+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e016      	b.n	8006c4a <USBD_AUDIO_IsoOutIncomplete+0x50>
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32b0      	adds	r2, #176	; 0xb0
 8006c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, epnum,
                               &haudio->buffer[haudio->wr_ptr],
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006c32:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8006c36:	461a      	mov	r2, r3
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	1d1a      	adds	r2, r3, #4
 8006c3e:	78f9      	ldrb	r1, [r7, #3]
 8006c40:	23c0      	movs	r3, #192	; 0xc0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f004 fde5 	bl	800b812 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	32b0      	adds	r2, #176	; 0xb0
 8006c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6e:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e07c      	b.n	8006d74 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 8006c7a:	4b40      	ldr	r3, [pc, #256]	; (8006d7c <USBD_AUDIO_DataOut+0x128>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	78fa      	ldrb	r2, [r7, #3]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d176      	bne.n	8006d72 <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f004 fde3 	bl	800b854 <USBD_LL_GetRxDataSize>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	33b0      	adds	r3, #176	; 0xb0
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8006caa:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 8006cae:	4611      	mov	r1, r2
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	1d10      	adds	r0, r2, #4
 8006cb6:	8979      	ldrh	r1, [r7, #10]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006cc2:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 8006cc6:	897b      	ldrh	r3, [r7, #10]
 8006cc8:	4413      	add	r3, r2
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006cd2:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006cdc:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8006ce0:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8006ce4:	d321      	bcc.n	8006d2a <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006cec:	2200      	movs	r2, #0
 8006cee:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006cf8:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d114      	bne.n	8006d2a <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	33b0      	adds	r3, #176	; 0xb0
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	1d10      	adds	r0, r2, #4
 8006d16:	2201      	movs	r2, #1
 8006d18:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8006d1c:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006d30:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10d      	bne.n	8006d54 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006d3e:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8006d42:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8006d46:	d105      	bne.n	8006d54 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8006d54:	4b09      	ldr	r3, [pc, #36]	; (8006d7c <USBD_AUDIO_DataOut+0x128>)
 8006d56:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006d5e:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8006d62:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	1d1a      	adds	r2, r3, #4
 8006d6a:	23c0      	movs	r3, #192	; 0xc0
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f004 fd50 	bl	800b812 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	200000b6 	.word	0x200000b6

08006d80 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	32b0      	adds	r2, #176	; 0xb0
 8006d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d98:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d017      	beq.n	8006dd0 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006da6:	330b      	adds	r3, #11
 8006da8:	2240      	movs	r2, #64	; 0x40
 8006daa:	2100      	movs	r1, #0
 8006dac:	4618      	mov	r0, r3
 8006dae:	f004 fda9 	bl	800b904 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006db8:	330b      	adds	r3, #11
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	88d2      	ldrh	r2, [r2, #6]
 8006dbe:	2a40      	cmp	r2, #64	; 0x40
 8006dc0:	bf28      	it	cs
 8006dc2:	2240      	movcs	r2, #64	; 0x40
 8006dc4:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 fae5 	bl	8008398 <USBD_CtlSendData>
 8006dce:	e000      	b.n	8006dd2 <AUDIO_REQ_GetCurrent+0x52>
    return;
 8006dd0:	bf00      	nop
}
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	32b0      	adds	r2, #176	; 0xb0
 8006dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df0:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d02f      	beq.n	8006e58 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	88db      	ldrh	r3, [r3, #6]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d02c      	beq.n	8006e5a <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	88db      	ldrh	r3, [r3, #6]
 8006e10:	2b3f      	cmp	r3, #63	; 0x3f
 8006e12:	d803      	bhi.n	8006e1c <AUDIO_REQ_SetCurrent+0x44>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	88db      	ldrh	r3, [r3, #6]
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	e000      	b.n	8006e1e <AUDIO_REQ_SetCurrent+0x46>
 8006e1c:	2240      	movs	r2, #64	; 0x40
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006e24:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	889b      	ldrh	r3, [r3, #4]
 8006e2c:	0a1b      	lsrs	r3, r3, #8
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006e38:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006e42:	330b      	adds	r3, #11
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8006e4a:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 facd 	bl	80083f0 <USBD_CtlPrepareRx>
 8006e56:	e000      	b.n	8006e5a <AUDIO_REQ_SetCurrent+0x82>
    return;
 8006e58:	bf00      	nop
  }
}
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	220a      	movs	r2, #10
 8006e6c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8006e6e:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	200000ac 	.word	0x200000ac

08006e80 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e009      	b.n	8006ea8 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	33b0      	adds	r3, #176	; 0xb0
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	885b      	ldrh	r3, [r3, #2]
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d91c      	bls.n	8006f12 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006ee0:	e011      	b.n	8006f06 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006ee2:	f107 030a 	add.w	r3, r7, #10
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6978      	ldr	r0, [r7, #20]
 8006eea:	f000 fbe6 	bl	80076ba <USBD_GetNextDesc>
 8006eee:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	785b      	ldrb	r3, [r3, #1]
 8006ef4:	2b24      	cmp	r3, #36	; 0x24
 8006ef6:	d106      	bne.n	8006f06 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d102      	bne.n	8006f06 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	613b      	str	r3, [r7, #16]
        break;
 8006f04:	e005      	b.n	8006f12 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	885b      	ldrh	r3, [r3, #2]
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	897b      	ldrh	r3, [r7, #10]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d8e7      	bhi.n	8006ee2 <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 8006f12:	693b      	ldr	r3, [r7, #16]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	4613      	mov	r3, r2
 8006f28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e01f      	b.n	8006f74 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	79fa      	ldrb	r2, [r7, #7]
 8006f66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f004 fadd 	bl	800b528 <USBD_LL_Init>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e025      	b.n	8006fe0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	32ae      	adds	r2, #174	; 0xae
 8006fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00f      	beq.n	8006fd0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	32ae      	adds	r2, #174	; 0xae
 8006fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	f107 020e 	add.w	r2, r7, #14
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4798      	blx	r3
 8006fc8:	4602      	mov	r2, r0
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f004 fae5 	bl	800b5c0 <USBD_LL_Start>
 8006ff6:	4603      	mov	r3, r0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007008:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d009      	beq.n	8007044 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	78fa      	ldrb	r2, [r7, #3]
 800703a:	4611      	mov	r1, r2
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	4611      	mov	r1, r2
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	4618      	mov	r0, r3
 8007096:	f001 f8d4 	bl	8008242 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80070a8:	461a      	mov	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d01a      	beq.n	80070f4 <USBD_LL_SetupStage+0x72>
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d822      	bhi.n	8007108 <USBD_LL_SetupStage+0x86>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <USBD_LL_SetupStage+0x4a>
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d00a      	beq.n	80070e0 <USBD_LL_SetupStage+0x5e>
 80070ca:	e01d      	b.n	8007108 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fb2b 	bl	8007730 <USBD_StdDevReq>
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]
      break;
 80070de:	e020      	b.n	8007122 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fb93 	bl	8007814 <USBD_StdItfReq>
 80070ee:	4603      	mov	r3, r0
 80070f0:	73fb      	strb	r3, [r7, #15]
      break;
 80070f2:	e016      	b.n	8007122 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fbf5 	bl	80078ec <USBD_StdEPReq>
 8007102:	4603      	mov	r3, r0
 8007104:	73fb      	strb	r3, [r7, #15]
      break;
 8007106:	e00c      	b.n	8007122 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800710e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007112:	b2db      	uxtb	r3, r3
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f004 fad1 	bl	800b6be <USBD_LL_StallEP>
 800711c:	4603      	mov	r3, r0
 800711e:	73fb      	strb	r3, [r7, #15]
      break;
 8007120:	bf00      	nop
  }

  return ret;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	460b      	mov	r3, r1
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800713e:	7afb      	ldrb	r3, [r7, #11]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d16e      	bne.n	8007222 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800714a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007152:	2b03      	cmp	r3, #3
 8007154:	f040 8098 	bne.w	8007288 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	429a      	cmp	r2, r3
 8007162:	d913      	bls.n	800718c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	1ad2      	subs	r2, r2, r3
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	4293      	cmp	r3, r2
 800717c:	bf28      	it	cs
 800717e:	4613      	movcs	r3, r2
 8007180:	461a      	mov	r2, r3
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f001 f950 	bl	800842a <USBD_CtlContinueRx>
 800718a:	e07d      	b.n	8007288 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2b02      	cmp	r3, #2
 8007198:	d014      	beq.n	80071c4 <USBD_LL_DataOutStage+0x98>
 800719a:	2b02      	cmp	r3, #2
 800719c:	d81d      	bhi.n	80071da <USBD_LL_DataOutStage+0xae>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <USBD_LL_DataOutStage+0x7c>
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d003      	beq.n	80071ae <USBD_LL_DataOutStage+0x82>
 80071a6:	e018      	b.n	80071da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75bb      	strb	r3, [r7, #22]
            break;
 80071ac:	e018      	b.n	80071e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	4619      	mov	r1, r3
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 fa64 	bl	8007686 <USBD_CoreFindIF>
 80071be:	4603      	mov	r3, r0
 80071c0:	75bb      	strb	r3, [r7, #22]
            break;
 80071c2:	e00d      	b.n	80071e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	4619      	mov	r1, r3
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fa66 	bl	80076a0 <USBD_CoreFindEP>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75bb      	strb	r3, [r7, #22]
            break;
 80071d8:	e002      	b.n	80071e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	75bb      	strb	r3, [r7, #22]
            break;
 80071de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071e0:	7dbb      	ldrb	r3, [r7, #22]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d119      	bne.n	800721a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d113      	bne.n	800721a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071f2:	7dba      	ldrb	r2, [r7, #22]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	32ae      	adds	r2, #174	; 0xae
 80071f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00b      	beq.n	800721a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007202:	7dba      	ldrb	r2, [r7, #22]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800720a:	7dba      	ldrb	r2, [r7, #22]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	32ae      	adds	r2, #174	; 0xae
 8007210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f001 f916 	bl	800844c <USBD_CtlSendStatus>
 8007220:	e032      	b.n	8007288 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007228:	b2db      	uxtb	r3, r3
 800722a:	4619      	mov	r1, r3
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 fa37 	bl	80076a0 <USBD_CoreFindEP>
 8007232:	4603      	mov	r3, r0
 8007234:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007236:	7dbb      	ldrb	r3, [r7, #22]
 8007238:	2bff      	cmp	r3, #255	; 0xff
 800723a:	d025      	beq.n	8007288 <USBD_LL_DataOutStage+0x15c>
 800723c:	7dbb      	ldrb	r3, [r7, #22]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d122      	bne.n	8007288 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d117      	bne.n	800727e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800724e:	7dba      	ldrb	r2, [r7, #22]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	32ae      	adds	r2, #174	; 0xae
 8007254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00f      	beq.n	800727e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800725e:	7dba      	ldrb	r2, [r7, #22]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007266:	7dba      	ldrb	r2, [r7, #22]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	32ae      	adds	r2, #174	; 0xae
 800726c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	7afa      	ldrb	r2, [r7, #11]
 8007274:	4611      	mov	r1, r2
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	4798      	blx	r3
 800727a:	4603      	mov	r3, r0
 800727c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	e000      	b.n	800728a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	460b      	mov	r3, r1
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d16f      	bne.n	8007386 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3314      	adds	r3, #20
 80072aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d15a      	bne.n	800736c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d914      	bls.n	80072ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	1ad2      	subs	r2, r2, r3
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f001 f878 	bl	80083ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072de:	2300      	movs	r3, #0
 80072e0:	2200      	movs	r2, #0
 80072e2:	2100      	movs	r1, #0
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f004 fa94 	bl	800b812 <USBD_LL_PrepareReceive>
 80072ea:	e03f      	b.n	800736c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d11c      	bne.n	8007332 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007300:	429a      	cmp	r2, r3
 8007302:	d316      	bcc.n	8007332 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800730e:	429a      	cmp	r2, r3
 8007310:	d20f      	bcs.n	8007332 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007312:	2200      	movs	r2, #0
 8007314:	2100      	movs	r1, #0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f001 f859 	bl	80083ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007324:	2300      	movs	r3, #0
 8007326:	2200      	movs	r2, #0
 8007328:	2100      	movs	r1, #0
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f004 fa71 	bl	800b812 <USBD_LL_PrepareReceive>
 8007330:	e01c      	b.n	800736c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b03      	cmp	r3, #3
 800733c:	d10f      	bne.n	800735e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d009      	beq.n	800735e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800735e:	2180      	movs	r1, #128	; 0x80
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f004 f9ac 	bl	800b6be <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f001 f883 	bl	8008472 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d03a      	beq.n	80073ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff fe42 	bl	8007000 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007384:	e032      	b.n	80073ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007386:	7afb      	ldrb	r3, [r7, #11]
 8007388:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800738c:	b2db      	uxtb	r3, r3
 800738e:	4619      	mov	r1, r3
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f985 	bl	80076a0 <USBD_CoreFindEP>
 8007396:	4603      	mov	r3, r0
 8007398:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	2bff      	cmp	r3, #255	; 0xff
 800739e:	d025      	beq.n	80073ec <USBD_LL_DataInStage+0x15a>
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d122      	bne.n	80073ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d11c      	bne.n	80073ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073b2:	7dfa      	ldrb	r2, [r7, #23]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	32ae      	adds	r2, #174	; 0xae
 80073b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d014      	beq.n	80073ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073c2:	7dfa      	ldrb	r2, [r7, #23]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073ca:	7dfa      	ldrb	r2, [r7, #23]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	32ae      	adds	r2, #174	; 0xae
 80073d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	7afa      	ldrb	r2, [r7, #11]
 80073d8:	4611      	mov	r1, r2
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	4798      	blx	r3
 80073de:	4603      	mov	r3, r0
 80073e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073e2:	7dbb      	ldrb	r3, [r7, #22]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073e8:	7dbb      	ldrb	r3, [r7, #22]
 80073ea:	e000      	b.n	80073ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742e:	2b00      	cmp	r3, #0
 8007430:	d014      	beq.n	800745c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00e      	beq.n	800745c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6852      	ldr	r2, [r2, #4]
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	4611      	mov	r1, r2
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	4798      	blx	r3
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007458:	2303      	movs	r3, #3
 800745a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800745c:	2340      	movs	r3, #64	; 0x40
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f004 f8c7 	bl	800b5f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2240      	movs	r2, #64	; 0x40
 8007474:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007478:	2340      	movs	r3, #64	; 0x40
 800747a:	2200      	movs	r2, #0
 800747c:	2180      	movs	r1, #128	; 0x80
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f004 f8b9 	bl	800b5f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2240      	movs	r2, #64	; 0x40
 800748e:	621a      	str	r2, [r3, #32]

  return ret;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	460b      	mov	r3, r1
 80074a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d006      	beq.n	80074dc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2204      	movs	r2, #4
 80074e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b04      	cmp	r3, #4
 8007504:	d106      	bne.n	8007514 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800750c:	b2da      	uxtb	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b03      	cmp	r3, #3
 8007534:	d110      	bne.n	8007558 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	32ae      	adds	r2, #174	; 0xae
 8007578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007580:	2303      	movs	r3, #3
 8007582:	e01c      	b.n	80075be <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b03      	cmp	r3, #3
 800758e:	d115      	bne.n	80075bc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	32ae      	adds	r2, #174	; 0xae
 800759a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	32ae      	adds	r2, #174	; 0xae
 80075ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	4611      	mov	r1, r2
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	32ae      	adds	r2, #174	; 0xae
 80075dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e01c      	b.n	8007622 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d115      	bne.n	8007620 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	32ae      	adds	r2, #174	; 0xae
 80075fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32ae      	adds	r2, #174	; 0xae
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	4611      	mov	r1, r2
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00e      	beq.n	800767c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6852      	ldr	r2, [r2, #4]
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	4611      	mov	r1, r2
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	4798      	blx	r3
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007692:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	881a      	ldrh	r2, [r3, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	4413      	add	r3, r2
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4413      	add	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076e6:	68fb      	ldr	r3, [r7, #12]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	3301      	adds	r3, #1
 800770a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007712:	8a3b      	ldrh	r3, [r7, #16]
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	b21a      	sxth	r2, r3
 8007718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800771c:	4313      	orrs	r3, r2
 800771e:	b21b      	sxth	r3, r3
 8007720:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007722:	89fb      	ldrh	r3, [r7, #14]
}
 8007724:	4618      	mov	r0, r3
 8007726:	371c      	adds	r7, #28
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007746:	2b40      	cmp	r3, #64	; 0x40
 8007748:	d005      	beq.n	8007756 <USBD_StdDevReq+0x26>
 800774a:	2b40      	cmp	r3, #64	; 0x40
 800774c:	d857      	bhi.n	80077fe <USBD_StdDevReq+0xce>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00f      	beq.n	8007772 <USBD_StdDevReq+0x42>
 8007752:	2b20      	cmp	r3, #32
 8007754:	d153      	bne.n	80077fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	32ae      	adds	r2, #174	; 0xae
 8007760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	4798      	blx	r3
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]
      break;
 8007770:	e04a      	b.n	8007808 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	785b      	ldrb	r3, [r3, #1]
 8007776:	2b09      	cmp	r3, #9
 8007778:	d83b      	bhi.n	80077f2 <USBD_StdDevReq+0xc2>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <USBD_StdDevReq+0x50>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	080077d5 	.word	0x080077d5
 8007784:	080077e9 	.word	0x080077e9
 8007788:	080077f3 	.word	0x080077f3
 800778c:	080077df 	.word	0x080077df
 8007790:	080077f3 	.word	0x080077f3
 8007794:	080077b3 	.word	0x080077b3
 8007798:	080077a9 	.word	0x080077a9
 800779c:	080077f3 	.word	0x080077f3
 80077a0:	080077cb 	.word	0x080077cb
 80077a4:	080077bd 	.word	0x080077bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa3c 	bl	8007c28 <USBD_GetDescriptor>
          break;
 80077b0:	e024      	b.n	80077fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fba1 	bl	8007efc <USBD_SetAddress>
          break;
 80077ba:	e01f      	b.n	80077fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fbe0 	bl	8007f84 <USBD_SetConfig>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]
          break;
 80077c8:	e018      	b.n	80077fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fc83 	bl	80080d8 <USBD_GetConfig>
          break;
 80077d2:	e013      	b.n	80077fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fcb4 	bl	8008144 <USBD_GetStatus>
          break;
 80077dc:	e00e      	b.n	80077fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fce3 	bl	80081ac <USBD_SetFeature>
          break;
 80077e6:	e009      	b.n	80077fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fd07 	bl	80081fe <USBD_ClrFeature>
          break;
 80077f0:	e004      	b.n	80077fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fd5e 	bl	80082b6 <USBD_CtlError>
          break;
 80077fa:	bf00      	nop
      }
      break;
 80077fc:	e004      	b.n	8007808 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fd58 	bl	80082b6 <USBD_CtlError>
      break;
 8007806:	bf00      	nop
  }

  return ret;
 8007808:	7bfb      	ldrb	r3, [r7, #15]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop

08007814 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800782a:	2b40      	cmp	r3, #64	; 0x40
 800782c:	d005      	beq.n	800783a <USBD_StdItfReq+0x26>
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d852      	bhi.n	80078d8 <USBD_StdItfReq+0xc4>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <USBD_StdItfReq+0x26>
 8007836:	2b20      	cmp	r3, #32
 8007838:	d14e      	bne.n	80078d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007840:	b2db      	uxtb	r3, r3
 8007842:	3b01      	subs	r3, #1
 8007844:	2b02      	cmp	r3, #2
 8007846:	d840      	bhi.n	80078ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	889b      	ldrh	r3, [r3, #4]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d836      	bhi.n	80078c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	889b      	ldrh	r3, [r3, #4]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff ff13 	bl	8007686 <USBD_CoreFindIF>
 8007860:	4603      	mov	r3, r0
 8007862:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	2bff      	cmp	r3, #255	; 0xff
 8007868:	d01d      	beq.n	80078a6 <USBD_StdItfReq+0x92>
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d11a      	bne.n	80078a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007870:	7bba      	ldrb	r2, [r7, #14]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	32ae      	adds	r2, #174	; 0xae
 8007876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00f      	beq.n	80078a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007880:	7bba      	ldrb	r2, [r7, #14]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007888:	7bba      	ldrb	r2, [r7, #14]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	32ae      	adds	r2, #174	; 0xae
 800788e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	4798      	blx	r3
 800789a:	4603      	mov	r3, r0
 800789c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800789e:	e004      	b.n	80078aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80078a0:	2303      	movs	r3, #3
 80078a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078a4:	e001      	b.n	80078aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80078a6:	2303      	movs	r3, #3
 80078a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	88db      	ldrh	r3, [r3, #6]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d110      	bne.n	80078d4 <USBD_StdItfReq+0xc0>
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10d      	bne.n	80078d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fdc7 	bl	800844c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078be:	e009      	b.n	80078d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fcf7 	bl	80082b6 <USBD_CtlError>
          break;
 80078c8:	e004      	b.n	80078d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fcf2 	bl	80082b6 <USBD_CtlError>
          break;
 80078d2:	e000      	b.n	80078d6 <USBD_StdItfReq+0xc2>
          break;
 80078d4:	bf00      	nop
      }
      break;
 80078d6:	e004      	b.n	80078e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fceb 	bl	80082b6 <USBD_CtlError>
      break;
 80078e0:	bf00      	nop
  }

  return ret;
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	889b      	ldrh	r3, [r3, #4]
 80078fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007908:	2b40      	cmp	r3, #64	; 0x40
 800790a:	d007      	beq.n	800791c <USBD_StdEPReq+0x30>
 800790c:	2b40      	cmp	r3, #64	; 0x40
 800790e:	f200 817f 	bhi.w	8007c10 <USBD_StdEPReq+0x324>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d02a      	beq.n	800796c <USBD_StdEPReq+0x80>
 8007916:	2b20      	cmp	r3, #32
 8007918:	f040 817a 	bne.w	8007c10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff febd 	bl	80076a0 <USBD_CoreFindEP>
 8007926:	4603      	mov	r3, r0
 8007928:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800792a:	7b7b      	ldrb	r3, [r7, #13]
 800792c:	2bff      	cmp	r3, #255	; 0xff
 800792e:	f000 8174 	beq.w	8007c1a <USBD_StdEPReq+0x32e>
 8007932:	7b7b      	ldrb	r3, [r7, #13]
 8007934:	2b00      	cmp	r3, #0
 8007936:	f040 8170 	bne.w	8007c1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800793a:	7b7a      	ldrb	r2, [r7, #13]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007942:	7b7a      	ldrb	r2, [r7, #13]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	32ae      	adds	r2, #174	; 0xae
 8007948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 8163 	beq.w	8007c1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007954:	7b7a      	ldrb	r2, [r7, #13]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	32ae      	adds	r2, #174	; 0xae
 800795a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800796a:	e156      	b.n	8007c1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	785b      	ldrb	r3, [r3, #1]
 8007970:	2b03      	cmp	r3, #3
 8007972:	d008      	beq.n	8007986 <USBD_StdEPReq+0x9a>
 8007974:	2b03      	cmp	r3, #3
 8007976:	f300 8145 	bgt.w	8007c04 <USBD_StdEPReq+0x318>
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 809b 	beq.w	8007ab6 <USBD_StdEPReq+0x1ca>
 8007980:	2b01      	cmp	r3, #1
 8007982:	d03c      	beq.n	80079fe <USBD_StdEPReq+0x112>
 8007984:	e13e      	b.n	8007c04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d002      	beq.n	8007998 <USBD_StdEPReq+0xac>
 8007992:	2b03      	cmp	r3, #3
 8007994:	d016      	beq.n	80079c4 <USBD_StdEPReq+0xd8>
 8007996:	e02c      	b.n	80079f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00d      	beq.n	80079ba <USBD_StdEPReq+0xce>
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b80      	cmp	r3, #128	; 0x80
 80079a2:	d00a      	beq.n	80079ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f003 fe88 	bl	800b6be <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ae:	2180      	movs	r1, #128	; 0x80
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f003 fe84 	bl	800b6be <USBD_LL_StallEP>
 80079b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079b8:	e020      	b.n	80079fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fc7a 	bl	80082b6 <USBD_CtlError>
              break;
 80079c2:	e01b      	b.n	80079fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	885b      	ldrh	r3, [r3, #2]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10e      	bne.n	80079ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00b      	beq.n	80079ea <USBD_StdEPReq+0xfe>
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b80      	cmp	r3, #128	; 0x80
 80079d6:	d008      	beq.n	80079ea <USBD_StdEPReq+0xfe>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	88db      	ldrh	r3, [r3, #6]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f003 fe6a 	bl	800b6be <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fd2e 	bl	800844c <USBD_CtlSendStatus>

              break;
 80079f0:	e004      	b.n	80079fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fc5e 	bl	80082b6 <USBD_CtlError>
              break;
 80079fa:	bf00      	nop
          }
          break;
 80079fc:	e107      	b.n	8007c0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d002      	beq.n	8007a10 <USBD_StdEPReq+0x124>
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d016      	beq.n	8007a3c <USBD_StdEPReq+0x150>
 8007a0e:	e04b      	b.n	8007aa8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00d      	beq.n	8007a32 <USBD_StdEPReq+0x146>
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b80      	cmp	r3, #128	; 0x80
 8007a1a:	d00a      	beq.n	8007a32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f003 fe4c 	bl	800b6be <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a26:	2180      	movs	r1, #128	; 0x80
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f003 fe48 	bl	800b6be <USBD_LL_StallEP>
 8007a2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a30:	e040      	b.n	8007ab4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fc3e 	bl	80082b6 <USBD_CtlError>
              break;
 8007a3a:	e03b      	b.n	8007ab4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	885b      	ldrh	r3, [r3, #2]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d136      	bne.n	8007ab2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d004      	beq.n	8007a58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f003 fe52 	bl	800b6fc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fcf7 	bl	800844c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff fe1c 	bl	80076a0 <USBD_CoreFindEP>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a6c:	7b7b      	ldrb	r3, [r7, #13]
 8007a6e:	2bff      	cmp	r3, #255	; 0xff
 8007a70:	d01f      	beq.n	8007ab2 <USBD_StdEPReq+0x1c6>
 8007a72:	7b7b      	ldrb	r3, [r7, #13]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d11c      	bne.n	8007ab2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007a78:	7b7a      	ldrb	r2, [r7, #13]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a80:	7b7a      	ldrb	r2, [r7, #13]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	32ae      	adds	r2, #174	; 0xae
 8007a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d010      	beq.n	8007ab2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a90:	7b7a      	ldrb	r2, [r7, #13]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	32ae      	adds	r2, #174	; 0xae
 8007a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007aa6:	e004      	b.n	8007ab2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fc03 	bl	80082b6 <USBD_CtlError>
              break;
 8007ab0:	e000      	b.n	8007ab4 <USBD_StdEPReq+0x1c8>
              break;
 8007ab2:	bf00      	nop
          }
          break;
 8007ab4:	e0ab      	b.n	8007c0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d002      	beq.n	8007ac8 <USBD_StdEPReq+0x1dc>
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d032      	beq.n	8007b2c <USBD_StdEPReq+0x240>
 8007ac6:	e097      	b.n	8007bf8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d007      	beq.n	8007ade <USBD_StdEPReq+0x1f2>
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b80      	cmp	r3, #128	; 0x80
 8007ad2:	d004      	beq.n	8007ade <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fbed 	bl	80082b6 <USBD_CtlError>
                break;
 8007adc:	e091      	b.n	8007c02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	da0b      	bge.n	8007afe <USBD_StdEPReq+0x212>
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	3310      	adds	r3, #16
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	4413      	add	r3, r2
 8007afa:	3304      	adds	r3, #4
 8007afc:	e00b      	b.n	8007b16 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b04:	4613      	mov	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	4413      	add	r3, r2
 8007b14:	3304      	adds	r3, #4
 8007b16:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2202      	movs	r2, #2
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc37 	bl	8008398 <USBD_CtlSendData>
              break;
 8007b2a:	e06a      	b.n	8007c02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	da11      	bge.n	8007b58 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	f003 020f 	and.w	r2, r3, #15
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	440b      	add	r3, r1
 8007b46:	3324      	adds	r3, #36	; 0x24
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d117      	bne.n	8007b7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fbb0 	bl	80082b6 <USBD_CtlError>
                  break;
 8007b56:	e054      	b.n	8007c02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	f003 020f 	and.w	r2, r3, #15
 8007b5e:	6879      	ldr	r1, [r7, #4]
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	440b      	add	r3, r1
 8007b6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fb9d 	bl	80082b6 <USBD_CtlError>
                  break;
 8007b7c:	e041      	b.n	8007c02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	da0b      	bge.n	8007b9e <USBD_StdEPReq+0x2b2>
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	3310      	adds	r3, #16
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	4413      	add	r3, r2
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	e00b      	b.n	8007bb6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <USBD_StdEPReq+0x2d8>
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	2b80      	cmp	r3, #128	; 0x80
 8007bc2:	d103      	bne.n	8007bcc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	e00e      	b.n	8007bea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f003 fdb2 	bl	800b73a <USBD_LL_IsStallEP>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2201      	movs	r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	e002      	b.n	8007bea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2202      	movs	r2, #2
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fbd1 	bl	8008398 <USBD_CtlSendData>
              break;
 8007bf6:	e004      	b.n	8007c02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fb5b 	bl	80082b6 <USBD_CtlError>
              break;
 8007c00:	bf00      	nop
          }
          break;
 8007c02:	e004      	b.n	8007c0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fb55 	bl	80082b6 <USBD_CtlError>
          break;
 8007c0c:	bf00      	nop
      }
      break;
 8007c0e:	e005      	b.n	8007c1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fb4f 	bl	80082b6 <USBD_CtlError>
      break;
 8007c18:	e000      	b.n	8007c1c <USBD_StdEPReq+0x330>
      break;
 8007c1a:	bf00      	nop
  }

  return ret;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	885b      	ldrh	r3, [r3, #2]
 8007c42:	0a1b      	lsrs	r3, r3, #8
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	3b01      	subs	r3, #1
 8007c48:	2b06      	cmp	r3, #6
 8007c4a:	f200 8128 	bhi.w	8007e9e <USBD_GetDescriptor+0x276>
 8007c4e:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <USBD_GetDescriptor+0x2c>)
 8007c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c54:	08007c71 	.word	0x08007c71
 8007c58:	08007c89 	.word	0x08007c89
 8007c5c:	08007cc9 	.word	0x08007cc9
 8007c60:	08007e9f 	.word	0x08007e9f
 8007c64:	08007e9f 	.word	0x08007e9f
 8007c68:	08007e3f 	.word	0x08007e3f
 8007c6c:	08007e6b 	.word	0x08007e6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	7c12      	ldrb	r2, [r2, #16]
 8007c7c:	f107 0108 	add.w	r1, r7, #8
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3
 8007c84:	60f8      	str	r0, [r7, #12]
      break;
 8007c86:	e112      	b.n	8007eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	7c1b      	ldrb	r3, [r3, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10d      	bne.n	8007cac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	f107 0208 	add.w	r2, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007caa:	e100      	b.n	8007eae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	f107 0208 	add.w	r2, r7, #8
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
 8007cbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	701a      	strb	r2, [r3, #0]
      break;
 8007cc6:	e0f2      	b.n	8007eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	885b      	ldrh	r3, [r3, #2]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b05      	cmp	r3, #5
 8007cd0:	f200 80ac 	bhi.w	8007e2c <USBD_GetDescriptor+0x204>
 8007cd4:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <USBD_GetDescriptor+0xb4>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007cf5 	.word	0x08007cf5
 8007ce0:	08007d29 	.word	0x08007d29
 8007ce4:	08007d5d 	.word	0x08007d5d
 8007ce8:	08007d91 	.word	0x08007d91
 8007cec:	08007dc5 	.word	0x08007dc5
 8007cf0:	08007df9 	.word	0x08007df9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d16:	e091      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 facb 	bl	80082b6 <USBD_CtlError>
            err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
          break;
 8007d26:	e089      	b.n	8007e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	7c12      	ldrb	r2, [r2, #16]
 8007d40:	f107 0108 	add.w	r1, r7, #8
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d4a:	e077      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fab1 	bl	80082b6 <USBD_CtlError>
            err++;
 8007d54:	7afb      	ldrb	r3, [r7, #11]
 8007d56:	3301      	adds	r3, #1
 8007d58:	72fb      	strb	r3, [r7, #11]
          break;
 8007d5a:	e06f      	b.n	8007e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7c12      	ldrb	r2, [r2, #16]
 8007d74:	f107 0108 	add.w	r1, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d7e:	e05d      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa97 	bl	80082b6 <USBD_CtlError>
            err++;
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d8e:	e055      	b.n	8007e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	7c12      	ldrb	r2, [r2, #16]
 8007da8:	f107 0108 	add.w	r1, r7, #8
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
 8007db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007db2:	e043      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa7d 	bl	80082b6 <USBD_CtlError>
            err++;
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007dc2:	e03b      	b.n	8007e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	7c12      	ldrb	r2, [r2, #16]
 8007ddc:	f107 0108 	add.w	r1, r7, #8
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
 8007de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007de6:	e029      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa63 	bl	80082b6 <USBD_CtlError>
            err++;
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	3301      	adds	r3, #1
 8007df4:	72fb      	strb	r3, [r7, #11]
          break;
 8007df6:	e021      	b.n	8007e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	7c12      	ldrb	r2, [r2, #16]
 8007e10:	f107 0108 	add.w	r1, r7, #8
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e1a:	e00f      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa49 	bl	80082b6 <USBD_CtlError>
            err++;
 8007e24:	7afb      	ldrb	r3, [r7, #11]
 8007e26:	3301      	adds	r3, #1
 8007e28:	72fb      	strb	r3, [r7, #11]
          break;
 8007e2a:	e007      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fa41 	bl	80082b6 <USBD_CtlError>
          err++;
 8007e34:	7afb      	ldrb	r3, [r7, #11]
 8007e36:	3301      	adds	r3, #1
 8007e38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e3a:	bf00      	nop
      }
      break;
 8007e3c:	e037      	b.n	8007eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	7c1b      	ldrb	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d109      	bne.n	8007e5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4e:	f107 0208 	add.w	r2, r7, #8
 8007e52:	4610      	mov	r0, r2
 8007e54:	4798      	blx	r3
 8007e56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e58:	e029      	b.n	8007eae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fa2a 	bl	80082b6 <USBD_CtlError>
        err++;
 8007e62:	7afb      	ldrb	r3, [r7, #11]
 8007e64:	3301      	adds	r3, #1
 8007e66:	72fb      	strb	r3, [r7, #11]
      break;
 8007e68:	e021      	b.n	8007eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	7c1b      	ldrb	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10d      	bne.n	8007e8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	f107 0208 	add.w	r2, r7, #8
 8007e7e:	4610      	mov	r0, r2
 8007e80:	4798      	blx	r3
 8007e82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	2207      	movs	r2, #7
 8007e8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e8c:	e00f      	b.n	8007eae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fa10 	bl	80082b6 <USBD_CtlError>
        err++;
 8007e96:	7afb      	ldrb	r3, [r7, #11]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e9c:	e007      	b.n	8007eae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fa08 	bl	80082b6 <USBD_CtlError>
      err++;
 8007ea6:	7afb      	ldrb	r3, [r7, #11]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	72fb      	strb	r3, [r7, #11]
      break;
 8007eac:	bf00      	nop
  }

  if (err != 0U)
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d11e      	bne.n	8007ef2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	88db      	ldrh	r3, [r3, #6]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d016      	beq.n	8007eea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ebc:	893b      	ldrh	r3, [r7, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00e      	beq.n	8007ee0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	88da      	ldrh	r2, [r3, #6]
 8007ec6:	893b      	ldrh	r3, [r7, #8]
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	bf28      	it	cs
 8007ecc:	4613      	movcs	r3, r2
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ed2:	893b      	ldrh	r3, [r7, #8]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	68f9      	ldr	r1, [r7, #12]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fa5d 	bl	8008398 <USBD_CtlSendData>
 8007ede:	e009      	b.n	8007ef4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f9e7 	bl	80082b6 <USBD_CtlError>
 8007ee8:	e004      	b.n	8007ef4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 faae 	bl	800844c <USBD_CtlSendStatus>
 8007ef0:	e000      	b.n	8007ef4 <USBD_GetDescriptor+0x2cc>
    return;
 8007ef2:	bf00      	nop
  }
}
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop

08007efc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	889b      	ldrh	r3, [r3, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d131      	bne.n	8007f72 <USBD_SetAddress+0x76>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	88db      	ldrh	r3, [r3, #6]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d12d      	bne.n	8007f72 <USBD_SetAddress+0x76>
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	885b      	ldrh	r3, [r3, #2]
 8007f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f1c:	d829      	bhi.n	8007f72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d104      	bne.n	8007f40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f9bc 	bl	80082b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3e:	e01d      	b.n	8007f7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	7bfa      	ldrb	r2, [r7, #15]
 8007f44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f003 fc20 	bl	800b792 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa7a 	bl	800844c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2202      	movs	r2, #2
 8007f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f66:	e009      	b.n	8007f7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f70:	e004      	b.n	8007f7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f99e 	bl	80082b6 <USBD_CtlError>
  }
}
 8007f7a:	bf00      	nop
 8007f7c:	bf00      	nop
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	885b      	ldrh	r3, [r3, #2]
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	4b4e      	ldr	r3, [pc, #312]	; (80080d4 <USBD_SetConfig+0x150>)
 8007f9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f9c:	4b4d      	ldr	r3, [pc, #308]	; (80080d4 <USBD_SetConfig+0x150>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d905      	bls.n	8007fb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f985 	bl	80082b6 <USBD_CtlError>
    return USBD_FAIL;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e08c      	b.n	80080ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d002      	beq.n	8007fc2 <USBD_SetConfig+0x3e>
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d029      	beq.n	8008014 <USBD_SetConfig+0x90>
 8007fc0:	e075      	b.n	80080ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007fc2:	4b44      	ldr	r3, [pc, #272]	; (80080d4 <USBD_SetConfig+0x150>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d020      	beq.n	800800c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007fca:	4b42      	ldr	r3, [pc, #264]	; (80080d4 <USBD_SetConfig+0x150>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fd4:	4b3f      	ldr	r3, [pc, #252]	; (80080d4 <USBD_SetConfig+0x150>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7ff f81b 	bl	8007016 <USBD_SetClassConfig>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d008      	beq.n	8007ffc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f962 	bl	80082b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ffa:	e065      	b.n	80080c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa25 	bl	800844c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2203      	movs	r2, #3
 8008006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800800a:	e05d      	b.n	80080c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fa1d 	bl	800844c <USBD_CtlSendStatus>
      break;
 8008012:	e059      	b.n	80080c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008014:	4b2f      	ldr	r3, [pc, #188]	; (80080d4 <USBD_SetConfig+0x150>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d112      	bne.n	8008042 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008024:	4b2b      	ldr	r3, [pc, #172]	; (80080d4 <USBD_SetConfig+0x150>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800802e:	4b29      	ldr	r3, [pc, #164]	; (80080d4 <USBD_SetConfig+0x150>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff f80a 	bl	800704e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa06 	bl	800844c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008040:	e042      	b.n	80080c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008042:	4b24      	ldr	r3, [pc, #144]	; (80080d4 <USBD_SetConfig+0x150>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d02a      	beq.n	80080a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	b2db      	uxtb	r3, r3
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7fe fff8 	bl	800704e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800805e:	4b1d      	ldr	r3, [pc, #116]	; (80080d4 <USBD_SetConfig+0x150>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008068:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <USBD_SetConfig+0x150>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7fe ffd1 	bl	8007016 <USBD_SetClassConfig>
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00f      	beq.n	800809e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f918 	bl	80082b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7fe ffdd 	bl	800704e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800809c:	e014      	b.n	80080c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f9d4 	bl	800844c <USBD_CtlSendStatus>
      break;
 80080a4:	e010      	b.n	80080c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f9d0 	bl	800844c <USBD_CtlSendStatus>
      break;
 80080ac:	e00c      	b.n	80080c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f900 	bl	80082b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080b6:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <USBD_SetConfig+0x150>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7fe ffc6 	bl	800704e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80080c2:	2303      	movs	r3, #3
 80080c4:	73fb      	strb	r3, [r7, #15]
      break;
 80080c6:	bf00      	nop
  }

  return ret;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20001720 	.word	0x20001720

080080d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	88db      	ldrh	r3, [r3, #6]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d004      	beq.n	80080f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f8e2 	bl	80082b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080f2:	e023      	b.n	800813c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	dc02      	bgt.n	8008106 <USBD_GetConfig+0x2e>
 8008100:	2b00      	cmp	r3, #0
 8008102:	dc03      	bgt.n	800810c <USBD_GetConfig+0x34>
 8008104:	e015      	b.n	8008132 <USBD_GetConfig+0x5a>
 8008106:	2b03      	cmp	r3, #3
 8008108:	d00b      	beq.n	8008122 <USBD_GetConfig+0x4a>
 800810a:	e012      	b.n	8008132 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3308      	adds	r3, #8
 8008116:	2201      	movs	r2, #1
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f93c 	bl	8008398 <USBD_CtlSendData>
        break;
 8008120:	e00c      	b.n	800813c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	3304      	adds	r3, #4
 8008126:	2201      	movs	r2, #1
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f934 	bl	8008398 <USBD_CtlSendData>
        break;
 8008130:	e004      	b.n	800813c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f8be 	bl	80082b6 <USBD_CtlError>
        break;
 800813a:	bf00      	nop
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008154:	b2db      	uxtb	r3, r3
 8008156:	3b01      	subs	r3, #1
 8008158:	2b02      	cmp	r3, #2
 800815a:	d81e      	bhi.n	800819a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	88db      	ldrh	r3, [r3, #6]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d004      	beq.n	800816e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f8a5 	bl	80082b6 <USBD_CtlError>
        break;
 800816c:	e01a      	b.n	80081a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f043 0202 	orr.w	r2, r3, #2
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	330c      	adds	r3, #12
 800818e:	2202      	movs	r2, #2
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f900 	bl	8008398 <USBD_CtlSendData>
      break;
 8008198:	e004      	b.n	80081a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f88a 	bl	80082b6 <USBD_CtlError>
      break;
 80081a2:	bf00      	nop
  }
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	885b      	ldrh	r3, [r3, #2]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d107      	bne.n	80081ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f940 	bl	800844c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80081cc:	e013      	b.n	80081f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	885b      	ldrh	r3, [r3, #2]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d10b      	bne.n	80081ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	889b      	ldrh	r3, [r3, #4]
 80081da:	0a1b      	lsrs	r3, r3, #8
 80081dc:	b29b      	uxth	r3, r3
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f930 	bl	800844c <USBD_CtlSendStatus>
}
 80081ec:	e003      	b.n	80081f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f860 	bl	80082b6 <USBD_CtlError>
}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820e:	b2db      	uxtb	r3, r3
 8008210:	3b01      	subs	r3, #1
 8008212:	2b02      	cmp	r3, #2
 8008214:	d80b      	bhi.n	800822e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	885b      	ldrh	r3, [r3, #2]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d10c      	bne.n	8008238 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f910 	bl	800844c <USBD_CtlSendStatus>
      }
      break;
 800822c:	e004      	b.n	8008238 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f840 	bl	80082b6 <USBD_CtlError>
      break;
 8008236:	e000      	b.n	800823a <USBD_ClrFeature+0x3c>
      break;
 8008238:	bf00      	nop
  }
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	781a      	ldrb	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3301      	adds	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	781a      	ldrb	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3301      	adds	r3, #1
 800826a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f7ff fa41 	bl	80076f4 <SWAPBYTE>
 8008272:	4603      	mov	r3, r0
 8008274:	461a      	mov	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3301      	adds	r3, #1
 800827e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	3301      	adds	r3, #1
 8008284:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f7ff fa34 	bl	80076f4 <SWAPBYTE>
 800828c:	4603      	mov	r3, r0
 800828e:	461a      	mov	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3301      	adds	r3, #1
 8008298:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3301      	adds	r3, #1
 800829e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f7ff fa27 	bl	80076f4 <SWAPBYTE>
 80082a6:	4603      	mov	r3, r0
 80082a8:	461a      	mov	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	80da      	strh	r2, [r3, #6]
}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80082c0:	2180      	movs	r1, #128	; 0x80
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f003 f9fb 	bl	800b6be <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80082c8:	2100      	movs	r1, #0
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f003 f9f7 	bl	800b6be <USBD_LL_StallEP>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d036      	beq.n	800835c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80082f2:	6938      	ldr	r0, [r7, #16]
 80082f4:	f000 f836 	bl	8008364 <USBD_GetLen>
 80082f8:	4603      	mov	r3, r0
 80082fa:	3301      	adds	r3, #1
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	4413      	add	r3, r2
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	7812      	ldrb	r2, [r2, #0]
 8008310:	701a      	strb	r2, [r3, #0]
  idx++;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	3301      	adds	r3, #1
 8008316:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	2203      	movs	r2, #3
 8008320:	701a      	strb	r2, [r3, #0]
  idx++;
 8008322:	7dfb      	ldrb	r3, [r7, #23]
 8008324:	3301      	adds	r3, #1
 8008326:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008328:	e013      	b.n	8008352 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	4413      	add	r3, r2
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	7812      	ldrb	r2, [r2, #0]
 8008334:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	3301      	adds	r3, #1
 800833a:	613b      	str	r3, [r7, #16]
    idx++;
 800833c:	7dfb      	ldrb	r3, [r7, #23]
 800833e:	3301      	adds	r3, #1
 8008340:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008342:	7dfb      	ldrb	r3, [r7, #23]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	4413      	add	r3, r2
 8008348:	2200      	movs	r2, #0
 800834a:	701a      	strb	r2, [r3, #0]
    idx++;
 800834c:	7dfb      	ldrb	r3, [r7, #23]
 800834e:	3301      	adds	r3, #1
 8008350:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e7      	bne.n	800832a <USBD_GetString+0x52>
 800835a:	e000      	b.n	800835e <USBD_GetString+0x86>
    return;
 800835c:	bf00      	nop
  }
}
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008374:	e005      	b.n	8008382 <USBD_GetLen+0x1e>
  {
    len++;
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	3301      	adds	r3, #1
 800837a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	3301      	adds	r3, #1
 8008380:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1f5      	bne.n	8008376 <USBD_GetLen+0x12>
  }

  return len;
 800838a:	7bfb      	ldrb	r3, [r7, #15]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2202      	movs	r2, #2
 80083a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	2100      	movs	r1, #0
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f003 fa06 	bl	800b7d0 <USBD_LL_Transmit>

  return USBD_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	60f8      	str	r0, [r7, #12]
 80083d6:	60b9      	str	r1, [r7, #8]
 80083d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	2100      	movs	r1, #0
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f003 f9f5 	bl	800b7d0 <USBD_LL_Transmit>

  return USBD_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2203      	movs	r2, #3
 8008400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	2100      	movs	r1, #0
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f003 f9f9 	bl	800b812 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	2100      	movs	r1, #0
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f003 f9e8 	bl	800b812 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2204      	movs	r2, #4
 8008458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800845c:	2300      	movs	r3, #0
 800845e:	2200      	movs	r2, #0
 8008460:	2100      	movs	r1, #0
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f003 f9b4 	bl	800b7d0 <USBD_LL_Transmit>

  return USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2205      	movs	r2, #5
 800847e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008482:	2300      	movs	r3, #0
 8008484:	2200      	movs	r2, #0
 8008486:	2100      	movs	r1, #0
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f003 f9c2 	bl	800b812 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <__NVIC_SetPriority>:
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	6039      	str	r1, [r7, #0]
 80084a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	db0a      	blt.n	80084c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	490c      	ldr	r1, [pc, #48]	; (80084e4 <__NVIC_SetPriority+0x4c>)
 80084b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084b6:	0112      	lsls	r2, r2, #4
 80084b8:	b2d2      	uxtb	r2, r2
 80084ba:	440b      	add	r3, r1
 80084bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80084c0:	e00a      	b.n	80084d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	4908      	ldr	r1, [pc, #32]	; (80084e8 <__NVIC_SetPriority+0x50>)
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	f003 030f 	and.w	r3, r3, #15
 80084ce:	3b04      	subs	r3, #4
 80084d0:	0112      	lsls	r2, r2, #4
 80084d2:	b2d2      	uxtb	r2, r2
 80084d4:	440b      	add	r3, r1
 80084d6:	761a      	strb	r2, [r3, #24]
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	e000e100 	.word	0xe000e100
 80084e8:	e000ed00 	.word	0xe000ed00

080084ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80084ec:	b580      	push	{r7, lr}
 80084ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80084f0:	4b05      	ldr	r3, [pc, #20]	; (8008508 <SysTick_Handler+0x1c>)
 80084f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80084f4:	f001 fcd8 	bl	8009ea8 <xTaskGetSchedulerState>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d001      	beq.n	8008502 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80084fe:	f002 fac3 	bl	800aa88 <xPortSysTickHandler>
  }
}
 8008502:	bf00      	nop
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	e000e010 	.word	0xe000e010

0800850c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800850c:	b580      	push	{r7, lr}
 800850e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008510:	2100      	movs	r1, #0
 8008512:	f06f 0004 	mvn.w	r0, #4
 8008516:	f7ff ffbf 	bl	8008498 <__NVIC_SetPriority>
#endif
}
 800851a:	bf00      	nop
 800851c:	bd80      	pop	{r7, pc}
	...

08008520 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008526:	f3ef 8305 	mrs	r3, IPSR
 800852a:	603b      	str	r3, [r7, #0]
  return(result);
 800852c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008532:	f06f 0305 	mvn.w	r3, #5
 8008536:	607b      	str	r3, [r7, #4]
 8008538:	e00c      	b.n	8008554 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800853a:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <osKernelInitialize+0x44>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d105      	bne.n	800854e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008542:	4b08      	ldr	r3, [pc, #32]	; (8008564 <osKernelInitialize+0x44>)
 8008544:	2201      	movs	r2, #1
 8008546:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008548:	2300      	movs	r3, #0
 800854a:	607b      	str	r3, [r7, #4]
 800854c:	e002      	b.n	8008554 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800854e:	f04f 33ff 	mov.w	r3, #4294967295
 8008552:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008554:	687b      	ldr	r3, [r7, #4]
}
 8008556:	4618      	mov	r0, r3
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20001724 	.word	0x20001724

08008568 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800856e:	f3ef 8305 	mrs	r3, IPSR
 8008572:	603b      	str	r3, [r7, #0]
  return(result);
 8008574:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <osKernelStart+0x1a>
    stat = osErrorISR;
 800857a:	f06f 0305 	mvn.w	r3, #5
 800857e:	607b      	str	r3, [r7, #4]
 8008580:	e010      	b.n	80085a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008582:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <osKernelStart+0x48>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d109      	bne.n	800859e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800858a:	f7ff ffbf 	bl	800850c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800858e:	4b08      	ldr	r3, [pc, #32]	; (80085b0 <osKernelStart+0x48>)
 8008590:	2202      	movs	r2, #2
 8008592:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008594:	f001 f82c 	bl	80095f0 <vTaskStartScheduler>
      stat = osOK;
 8008598:	2300      	movs	r3, #0
 800859a:	607b      	str	r3, [r7, #4]
 800859c:	e002      	b.n	80085a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800859e:	f04f 33ff 	mov.w	r3, #4294967295
 80085a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80085a4:	687b      	ldr	r3, [r7, #4]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20001724 	.word	0x20001724

080085b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08e      	sub	sp, #56	; 0x38
 80085b8:	af04      	add	r7, sp, #16
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80085c0:	2300      	movs	r3, #0
 80085c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085c4:	f3ef 8305 	mrs	r3, IPSR
 80085c8:	617b      	str	r3, [r7, #20]
  return(result);
 80085ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d17e      	bne.n	80086ce <osThreadNew+0x11a>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d07b      	beq.n	80086ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80085d6:	2380      	movs	r3, #128	; 0x80
 80085d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80085da:	2318      	movs	r3, #24
 80085dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80085e2:	f04f 33ff 	mov.w	r3, #4294967295
 80085e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d045      	beq.n	800867a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <osThreadNew+0x48>
        name = attr->name;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d008      	beq.n	8008622 <osThreadNew+0x6e>
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	2b38      	cmp	r3, #56	; 0x38
 8008614:	d805      	bhi.n	8008622 <osThreadNew+0x6e>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <osThreadNew+0x72>
        return (NULL);
 8008622:	2300      	movs	r3, #0
 8008624:	e054      	b.n	80086d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	089b      	lsrs	r3, r3, #2
 8008634:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00e      	beq.n	800865c <osThreadNew+0xa8>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	2ba7      	cmp	r3, #167	; 0xa7
 8008644:	d90a      	bls.n	800865c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800864a:	2b00      	cmp	r3, #0
 800864c:	d006      	beq.n	800865c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <osThreadNew+0xa8>
        mem = 1;
 8008656:	2301      	movs	r3, #1
 8008658:	61bb      	str	r3, [r7, #24]
 800865a:	e010      	b.n	800867e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10c      	bne.n	800867e <osThreadNew+0xca>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d108      	bne.n	800867e <osThreadNew+0xca>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d104      	bne.n	800867e <osThreadNew+0xca>
          mem = 0;
 8008674:	2300      	movs	r3, #0
 8008676:	61bb      	str	r3, [r7, #24]
 8008678:	e001      	b.n	800867e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800867a:	2300      	movs	r3, #0
 800867c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d110      	bne.n	80086a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800868c:	9202      	str	r2, [sp, #8]
 800868e:	9301      	str	r3, [sp, #4]
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	6a3a      	ldr	r2, [r7, #32]
 8008698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 fdf0 	bl	8009280 <xTaskCreateStatic>
 80086a0:	4603      	mov	r3, r0
 80086a2:	613b      	str	r3, [r7, #16]
 80086a4:	e013      	b.n	80086ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d110      	bne.n	80086ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	f107 0310 	add.w	r3, r7, #16
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 fe3b 	bl	800933a <xTaskCreate>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d001      	beq.n	80086ce <osThreadNew+0x11a>
            hTask = NULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80086ce:	693b      	ldr	r3, [r7, #16]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3728      	adds	r7, #40	; 0x28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4a07      	ldr	r2, [pc, #28]	; (8008704 <vApplicationGetIdleTaskMemory+0x2c>)
 80086e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	4a06      	ldr	r2, [pc, #24]	; (8008708 <vApplicationGetIdleTaskMemory+0x30>)
 80086ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2280      	movs	r2, #128	; 0x80
 80086f4:	601a      	str	r2, [r3, #0]
}
 80086f6:	bf00      	nop
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20001728 	.word	0x20001728
 8008708:	200017d0 	.word	0x200017d0

0800870c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4a07      	ldr	r2, [pc, #28]	; (8008738 <vApplicationGetTimerTaskMemory+0x2c>)
 800871c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	4a06      	ldr	r2, [pc, #24]	; (800873c <vApplicationGetTimerTaskMemory+0x30>)
 8008722:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800872a:	601a      	str	r2, [r3, #0]
}
 800872c:	bf00      	nop
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	200019d0 	.word	0x200019d0
 800873c:	20001a78 	.word	0x20001a78

08008740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f103 0208 	add.w	r2, r3, #8
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f04f 32ff 	mov.w	r2, #4294967295
 8008758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f103 0208 	add.w	r2, r3, #8
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f103 0208 	add.w	r2, r3, #8
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800879a:	b480      	push	{r7}
 800879c:	b085      	sub	sp, #20
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
}
 80087d6:	bf00      	nop
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087e2:	b480      	push	{r7}
 80087e4:	b085      	sub	sp, #20
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d103      	bne.n	8008802 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	e00c      	b.n	800881c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3308      	adds	r3, #8
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	e002      	b.n	8008810 <vListInsert+0x2e>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	429a      	cmp	r2, r3
 800881a:	d2f6      	bcs.n	800880a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	601a      	str	r2, [r3, #0]
}
 8008848:	bf00      	nop
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6892      	ldr	r2, [r2, #8]
 800886a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6852      	ldr	r2, [r2, #4]
 8008874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	429a      	cmp	r2, r3
 800887e:	d103      	bne.n	8008888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	1e5a      	subs	r2, r3, #1
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10a      	bne.n	80088d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80088ce:	bf00      	nop
 80088d0:	e7fe      	b.n	80088d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80088d2:	f002 f847 	bl	800a964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088de:	68f9      	ldr	r1, [r7, #12]
 80088e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088e2:	fb01 f303 	mul.w	r3, r1, r3
 80088e6:	441a      	add	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008902:	3b01      	subs	r3, #1
 8008904:	68f9      	ldr	r1, [r7, #12]
 8008906:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008908:	fb01 f303 	mul.w	r3, r1, r3
 800890c:	441a      	add	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	22ff      	movs	r2, #255	; 0xff
 8008916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	22ff      	movs	r2, #255	; 0xff
 800891e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d114      	bne.n	8008952 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01a      	beq.n	8008966 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3310      	adds	r3, #16
 8008934:	4618      	mov	r0, r3
 8008936:	f001 f8f5 	bl	8009b24 <xTaskRemoveFromEventList>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d012      	beq.n	8008966 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008940:	4b0c      	ldr	r3, [pc, #48]	; (8008974 <xQueueGenericReset+0xcc>)
 8008942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	e009      	b.n	8008966 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3310      	adds	r3, #16
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff fef2 	bl	8008740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	3324      	adds	r3, #36	; 0x24
 8008960:	4618      	mov	r0, r3
 8008962:	f7ff feed 	bl	8008740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008966:	f002 f82d 	bl	800a9c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800896a:	2301      	movs	r3, #1
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	e000ed04 	.word	0xe000ed04

08008978 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08e      	sub	sp, #56	; 0x38
 800897c:	af02      	add	r7, sp, #8
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10a      	bne.n	80089a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10a      	bne.n	80089be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089ba:	bf00      	nop
 80089bc:	e7fe      	b.n	80089bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <xQueueGenericCreateStatic+0x52>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <xQueueGenericCreateStatic+0x56>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <xQueueGenericCreateStatic+0x58>
 80089ce:	2300      	movs	r3, #0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	623b      	str	r3, [r7, #32]
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d102      	bne.n	80089f6 <xQueueGenericCreateStatic+0x7e>
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <xQueueGenericCreateStatic+0x82>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e000      	b.n	80089fc <xQueueGenericCreateStatic+0x84>
 80089fa:	2300      	movs	r3, #0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	61fb      	str	r3, [r7, #28]
}
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a16:	2350      	movs	r3, #80	; 0x50
 8008a18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2b50      	cmp	r3, #80	; 0x50
 8008a1e:	d00a      	beq.n	8008a36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	61bb      	str	r3, [r7, #24]
}
 8008a32:	bf00      	nop
 8008a34:	e7fe      	b.n	8008a34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00d      	beq.n	8008a5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	4613      	mov	r3, r2
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	68b9      	ldr	r1, [r7, #8]
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 f805 	bl	8008a68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3730      	adds	r7, #48	; 0x30
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d103      	bne.n	8008a84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	e002      	b.n	8008a8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a96:	2101      	movs	r1, #1
 8008a98:	69b8      	ldr	r0, [r7, #24]
 8008a9a:	f7ff ff05 	bl	80088a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	78fa      	ldrb	r2, [r7, #3]
 8008aa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08e      	sub	sp, #56	; 0x38
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <xQueueGenericSend+0x32>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d103      	bne.n	8008af0 <xQueueGenericSend+0x40>
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <xQueueGenericSend+0x44>
 8008af0:	2301      	movs	r3, #1
 8008af2:	e000      	b.n	8008af6 <xQueueGenericSend+0x46>
 8008af4:	2300      	movs	r3, #0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10a      	bne.n	8008b10 <xQueueGenericSend+0x60>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d103      	bne.n	8008b1e <xQueueGenericSend+0x6e>
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d101      	bne.n	8008b22 <xQueueGenericSend+0x72>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e000      	b.n	8008b24 <xQueueGenericSend+0x74>
 8008b22:	2300      	movs	r3, #0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <xQueueGenericSend+0x8e>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	623b      	str	r3, [r7, #32]
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b3e:	f001 f9b3 	bl	8009ea8 <xTaskGetSchedulerState>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <xQueueGenericSend+0x9e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <xQueueGenericSend+0xa2>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <xQueueGenericSend+0xa4>
 8008b52:	2300      	movs	r3, #0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <xQueueGenericSend+0xbe>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	61fb      	str	r3, [r7, #28]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b6e:	f001 fef9 	bl	800a964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d302      	bcc.n	8008b84 <xQueueGenericSend+0xd4>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d129      	bne.n	8008bd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b8a:	f000 fa0b 	bl	8008fa4 <prvCopyDataToQueue>
 8008b8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d010      	beq.n	8008bba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	3324      	adds	r3, #36	; 0x24
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 ffc1 	bl	8009b24 <xTaskRemoveFromEventList>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d013      	beq.n	8008bd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ba8:	4b3f      	ldr	r3, [pc, #252]	; (8008ca8 <xQueueGenericSend+0x1f8>)
 8008baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	e00a      	b.n	8008bd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d007      	beq.n	8008bd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008bc0:	4b39      	ldr	r3, [pc, #228]	; (8008ca8 <xQueueGenericSend+0x1f8>)
 8008bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008bd0:	f001 fef8 	bl	800a9c4 <vPortExitCritical>
				return pdPASS;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e063      	b.n	8008ca0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d103      	bne.n	8008be6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bde:	f001 fef1 	bl	800a9c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	e05c      	b.n	8008ca0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d106      	bne.n	8008bfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bec:	f107 0314 	add.w	r3, r7, #20
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fffb 	bl	8009bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bfa:	f001 fee3 	bl	800a9c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bfe:	f000 fd67 	bl	80096d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c02:	f001 feaf 	bl	800a964 <vPortEnterCritical>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c0c:	b25b      	sxtb	r3, r3
 8008c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c12:	d103      	bne.n	8008c1c <xQueueGenericSend+0x16c>
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c22:	b25b      	sxtb	r3, r3
 8008c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c28:	d103      	bne.n	8008c32 <xQueueGenericSend+0x182>
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c32:	f001 fec7 	bl	800a9c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c36:	1d3a      	adds	r2, r7, #4
 8008c38:	f107 0314 	add.w	r3, r7, #20
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 ffea 	bl	8009c18 <xTaskCheckForTimeOut>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d124      	bne.n	8008c94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c4c:	f000 faa2 	bl	8009194 <prvIsQueueFull>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d018      	beq.n	8008c88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	3310      	adds	r3, #16
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 ff10 	bl	8009a84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c66:	f000 fa2d 	bl	80090c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c6a:	f000 fd3f 	bl	80096ec <xTaskResumeAll>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f47f af7c 	bne.w	8008b6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008c76:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <xQueueGenericSend+0x1f8>)
 8008c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	e772      	b.n	8008b6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c8a:	f000 fa1b 	bl	80090c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c8e:	f000 fd2d 	bl	80096ec <xTaskResumeAll>
 8008c92:	e76c      	b.n	8008b6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c96:	f000 fa15 	bl	80090c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c9a:	f000 fd27 	bl	80096ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3738      	adds	r7, #56	; 0x38
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	e000ed04 	.word	0xe000ed04

08008cac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b090      	sub	sp, #64	; 0x40
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008cd6:	bf00      	nop
 8008cd8:	e7fe      	b.n	8008cd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d103      	bne.n	8008ce8 <xQueueGenericSendFromISR+0x3c>
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <xQueueGenericSendFromISR+0x40>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <xQueueGenericSendFromISR+0x42>
 8008cec:	2300      	movs	r3, #0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10a      	bne.n	8008d08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d103      	bne.n	8008d16 <xQueueGenericSendFromISR+0x6a>
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <xQueueGenericSendFromISR+0x6e>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e000      	b.n	8008d1c <xQueueGenericSendFromISR+0x70>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10a      	bne.n	8008d36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	623b      	str	r3, [r7, #32]
}
 8008d32:	bf00      	nop
 8008d34:	e7fe      	b.n	8008d34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d36:	f001 fef7 	bl	800ab28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	61fa      	str	r2, [r7, #28]
 8008d50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008d52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d302      	bcc.n	8008d68 <xQueueGenericSendFromISR+0xbc>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d12f      	bne.n	8008dc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	68b9      	ldr	r1, [r7, #8]
 8008d7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d7e:	f000 f911 	bl	8008fa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8a:	d112      	bne.n	8008db2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d016      	beq.n	8008dc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d96:	3324      	adds	r3, #36	; 0x24
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fec3 	bl	8009b24 <xTaskRemoveFromEventList>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00e      	beq.n	8008dc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00b      	beq.n	8008dc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	e007      	b.n	8008dc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008db2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008db6:	3301      	adds	r3, #1
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	b25a      	sxtb	r2, r3
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008dc6:	e001      	b.n	8008dcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008dd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3740      	adds	r7, #64	; 0x40
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08c      	sub	sp, #48	; 0x30
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <xQueueReceive+0x30>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	623b      	str	r3, [r7, #32]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d103      	bne.n	8008e22 <xQueueReceive+0x3e>
 8008e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d101      	bne.n	8008e26 <xQueueReceive+0x42>
 8008e22:	2301      	movs	r3, #1
 8008e24:	e000      	b.n	8008e28 <xQueueReceive+0x44>
 8008e26:	2300      	movs	r3, #0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10a      	bne.n	8008e42 <xQueueReceive+0x5e>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	61fb      	str	r3, [r7, #28]
}
 8008e3e:	bf00      	nop
 8008e40:	e7fe      	b.n	8008e40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e42:	f001 f831 	bl	8009ea8 <xTaskGetSchedulerState>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d102      	bne.n	8008e52 <xQueueReceive+0x6e>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <xQueueReceive+0x72>
 8008e52:	2301      	movs	r3, #1
 8008e54:	e000      	b.n	8008e58 <xQueueReceive+0x74>
 8008e56:	2300      	movs	r3, #0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10a      	bne.n	8008e72 <xQueueReceive+0x8e>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	61bb      	str	r3, [r7, #24]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e72:	f001 fd77 	bl	800a964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d01f      	beq.n	8008ec2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e82:	68b9      	ldr	r1, [r7, #8]
 8008e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e86:	f000 f8f7 	bl	8009078 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	1e5a      	subs	r2, r3, #1
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00f      	beq.n	8008eba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	3310      	adds	r3, #16
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fe40 	bl	8009b24 <xTaskRemoveFromEventList>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d007      	beq.n	8008eba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008eaa:	4b3d      	ldr	r3, [pc, #244]	; (8008fa0 <xQueueReceive+0x1bc>)
 8008eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008eba:	f001 fd83 	bl	800a9c4 <vPortExitCritical>
				return pdPASS;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e069      	b.n	8008f96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d103      	bne.n	8008ed0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ec8:	f001 fd7c 	bl	800a9c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	e062      	b.n	8008f96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d106      	bne.n	8008ee4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ed6:	f107 0310 	add.w	r3, r7, #16
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 fe86 	bl	8009bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ee4:	f001 fd6e 	bl	800a9c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ee8:	f000 fbf2 	bl	80096d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008eec:	f001 fd3a 	bl	800a964 <vPortEnterCritical>
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ef6:	b25b      	sxtb	r3, r3
 8008ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efc:	d103      	bne.n	8008f06 <xQueueReceive+0x122>
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f0c:	b25b      	sxtb	r3, r3
 8008f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f12:	d103      	bne.n	8008f1c <xQueueReceive+0x138>
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f1c:	f001 fd52 	bl	800a9c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f20:	1d3a      	adds	r2, r7, #4
 8008f22:	f107 0310 	add.w	r3, r7, #16
 8008f26:	4611      	mov	r1, r2
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f000 fe75 	bl	8009c18 <xTaskCheckForTimeOut>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d123      	bne.n	8008f7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f36:	f000 f917 	bl	8009168 <prvIsQueueEmpty>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d017      	beq.n	8008f70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	3324      	adds	r3, #36	; 0x24
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	4611      	mov	r1, r2
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 fd9b 	bl	8009a84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f50:	f000 f8b8 	bl	80090c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f54:	f000 fbca 	bl	80096ec <xTaskResumeAll>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d189      	bne.n	8008e72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008f5e:	4b10      	ldr	r3, [pc, #64]	; (8008fa0 <xQueueReceive+0x1bc>)
 8008f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	e780      	b.n	8008e72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f72:	f000 f8a7 	bl	80090c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f76:	f000 fbb9 	bl	80096ec <xTaskResumeAll>
 8008f7a:	e77a      	b.n	8008e72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f7e:	f000 f8a1 	bl	80090c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f82:	f000 fbb3 	bl	80096ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f88:	f000 f8ee 	bl	8009168 <prvIsQueueEmpty>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f43f af6f 	beq.w	8008e72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3730      	adds	r7, #48	; 0x30
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	e000ed04 	.word	0xe000ed04

08008fa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10d      	bne.n	8008fde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d14d      	bne.n	8009066 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 ff88 	bl	8009ee4 <xTaskPriorityDisinherit>
 8008fd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	609a      	str	r2, [r3, #8]
 8008fdc:	e043      	b.n	8009066 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d119      	bne.n	8009018 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6858      	ldr	r0, [r3, #4]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fec:	461a      	mov	r2, r3
 8008fee:	68b9      	ldr	r1, [r7, #8]
 8008ff0:	f002 fd0c 	bl	800ba0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffc:	441a      	add	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	429a      	cmp	r2, r3
 800900c:	d32b      	bcc.n	8009066 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	605a      	str	r2, [r3, #4]
 8009016:	e026      	b.n	8009066 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	68d8      	ldr	r0, [r3, #12]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009020:	461a      	mov	r2, r3
 8009022:	68b9      	ldr	r1, [r7, #8]
 8009024:	f002 fcf2 	bl	800ba0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	68da      	ldr	r2, [r3, #12]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009030:	425b      	negs	r3, r3
 8009032:	441a      	add	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	68da      	ldr	r2, [r3, #12]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	429a      	cmp	r2, r3
 8009042:	d207      	bcs.n	8009054 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	689a      	ldr	r2, [r3, #8]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904c:	425b      	negs	r3, r3
 800904e:	441a      	add	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b02      	cmp	r3, #2
 8009058:	d105      	bne.n	8009066 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	3b01      	subs	r3, #1
 8009064:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	1c5a      	adds	r2, r3, #1
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800906e:	697b      	ldr	r3, [r7, #20]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009086:	2b00      	cmp	r3, #0
 8009088:	d018      	beq.n	80090bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	441a      	add	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68da      	ldr	r2, [r3, #12]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d303      	bcc.n	80090ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	68d9      	ldr	r1, [r3, #12]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b4:	461a      	mov	r2, r3
 80090b6:	6838      	ldr	r0, [r7, #0]
 80090b8:	f002 fca8 	bl	800ba0c <memcpy>
	}
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090cc:	f001 fc4a 	bl	800a964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090d8:	e011      	b.n	80090fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d012      	beq.n	8009108 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	3324      	adds	r3, #36	; 0x24
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fd1c 	bl	8009b24 <xTaskRemoveFromEventList>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090f2:	f000 fdf3 	bl	8009cdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009102:	2b00      	cmp	r3, #0
 8009104:	dce9      	bgt.n	80090da <prvUnlockQueue+0x16>
 8009106:	e000      	b.n	800910a <prvUnlockQueue+0x46>
					break;
 8009108:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	22ff      	movs	r2, #255	; 0xff
 800910e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009112:	f001 fc57 	bl	800a9c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009116:	f001 fc25 	bl	800a964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009120:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009122:	e011      	b.n	8009148 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d012      	beq.n	8009152 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3310      	adds	r3, #16
 8009130:	4618      	mov	r0, r3
 8009132:	f000 fcf7 	bl	8009b24 <xTaskRemoveFromEventList>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800913c:	f000 fdce 	bl	8009cdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	3b01      	subs	r3, #1
 8009144:	b2db      	uxtb	r3, r3
 8009146:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800914c:	2b00      	cmp	r3, #0
 800914e:	dce9      	bgt.n	8009124 <prvUnlockQueue+0x60>
 8009150:	e000      	b.n	8009154 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009152:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	22ff      	movs	r2, #255	; 0xff
 8009158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800915c:	f001 fc32 	bl	800a9c4 <vPortExitCritical>
}
 8009160:	bf00      	nop
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009170:	f001 fbf8 	bl	800a964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800917c:	2301      	movs	r3, #1
 800917e:	60fb      	str	r3, [r7, #12]
 8009180:	e001      	b.n	8009186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009186:	f001 fc1d 	bl	800a9c4 <vPortExitCritical>

	return xReturn;
 800918a:	68fb      	ldr	r3, [r7, #12]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800919c:	f001 fbe2 	bl	800a964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d102      	bne.n	80091b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091ac:	2301      	movs	r3, #1
 80091ae:	60fb      	str	r3, [r7, #12]
 80091b0:	e001      	b.n	80091b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091b2:	2300      	movs	r3, #0
 80091b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091b6:	f001 fc05 	bl	800a9c4 <vPortExitCritical>

	return xReturn;
 80091ba:	68fb      	ldr	r3, [r7, #12]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	e014      	b.n	80091fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80091d4:	4a0f      	ldr	r2, [pc, #60]	; (8009214 <vQueueAddToRegistry+0x50>)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10b      	bne.n	80091f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80091e0:	490c      	ldr	r1, [pc, #48]	; (8009214 <vQueueAddToRegistry+0x50>)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80091ea:	4a0a      	ldr	r2, [pc, #40]	; (8009214 <vQueueAddToRegistry+0x50>)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	4413      	add	r3, r2
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80091f6:	e006      	b.n	8009206 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	3301      	adds	r3, #1
 80091fc:	60fb      	str	r3, [r7, #12]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2b07      	cmp	r3, #7
 8009202:	d9e7      	bls.n	80091d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009204:	bf00      	nop
 8009206:	bf00      	nop
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20001e78 	.word	0x20001e78

08009218 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009218:	b580      	push	{r7, lr}
 800921a:	b086      	sub	sp, #24
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009228:	f001 fb9c 	bl	800a964 <vPortEnterCritical>
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009232:	b25b      	sxtb	r3, r3
 8009234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009238:	d103      	bne.n	8009242 <vQueueWaitForMessageRestricted+0x2a>
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009248:	b25b      	sxtb	r3, r3
 800924a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924e:	d103      	bne.n	8009258 <vQueueWaitForMessageRestricted+0x40>
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009258:	f001 fbb4 	bl	800a9c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009260:	2b00      	cmp	r3, #0
 8009262:	d106      	bne.n	8009272 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	3324      	adds	r3, #36	; 0x24
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	68b9      	ldr	r1, [r7, #8]
 800926c:	4618      	mov	r0, r3
 800926e:	f000 fc2d 	bl	8009acc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009272:	6978      	ldr	r0, [r7, #20]
 8009274:	f7ff ff26 	bl	80090c4 <prvUnlockQueue>
	}
 8009278:	bf00      	nop
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009280:	b580      	push	{r7, lr}
 8009282:	b08e      	sub	sp, #56	; 0x38
 8009284:	af04      	add	r7, sp, #16
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800928e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	623b      	str	r3, [r7, #32]
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	61fb      	str	r3, [r7, #28]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092c6:	23a8      	movs	r3, #168	; 0xa8
 80092c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2ba8      	cmp	r3, #168	; 0xa8
 80092ce:	d00a      	beq.n	80092e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	61bb      	str	r3, [r7, #24]
}
 80092e2:	bf00      	nop
 80092e4:	e7fe      	b.n	80092e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80092e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d01e      	beq.n	800932c <xTaskCreateStatic+0xac>
 80092ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d01b      	beq.n	800932c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	2202      	movs	r2, #2
 8009302:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009306:	2300      	movs	r3, #0
 8009308:	9303      	str	r3, [sp, #12]
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	9302      	str	r3, [sp, #8]
 800930e:	f107 0314 	add.w	r3, r7, #20
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	68b9      	ldr	r1, [r7, #8]
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 f850 	bl	80093c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009326:	f000 f8f3 	bl	8009510 <prvAddNewTaskToReadyList>
 800932a:	e001      	b.n	8009330 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800932c:	2300      	movs	r3, #0
 800932e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009330:	697b      	ldr	r3, [r7, #20]
	}
 8009332:	4618      	mov	r0, r3
 8009334:	3728      	adds	r7, #40	; 0x28
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800933a:	b580      	push	{r7, lr}
 800933c:	b08c      	sub	sp, #48	; 0x30
 800933e:	af04      	add	r7, sp, #16
 8009340:	60f8      	str	r0, [r7, #12]
 8009342:	60b9      	str	r1, [r7, #8]
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	4613      	mov	r3, r2
 8009348:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800934a:	88fb      	ldrh	r3, [r7, #6]
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4618      	mov	r0, r3
 8009350:	f001 fc2a 	bl	800aba8 <pvPortMalloc>
 8009354:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00e      	beq.n	800937a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800935c:	20a8      	movs	r0, #168	; 0xa8
 800935e:	f001 fc23 	bl	800aba8 <pvPortMalloc>
 8009362:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	631a      	str	r2, [r3, #48]	; 0x30
 8009370:	e005      	b.n	800937e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009372:	6978      	ldr	r0, [r7, #20]
 8009374:	f001 fce4 	bl	800ad40 <vPortFree>
 8009378:	e001      	b.n	800937e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800937a:	2300      	movs	r3, #0
 800937c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d017      	beq.n	80093b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800938c:	88fa      	ldrh	r2, [r7, #6]
 800938e:	2300      	movs	r3, #0
 8009390:	9303      	str	r3, [sp, #12]
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	9302      	str	r3, [sp, #8]
 8009396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	68b9      	ldr	r1, [r7, #8]
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f000 f80e 	bl	80093c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093a8:	69f8      	ldr	r0, [r7, #28]
 80093aa:	f000 f8b1 	bl	8009510 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093ae:	2301      	movs	r3, #1
 80093b0:	61bb      	str	r3, [r7, #24]
 80093b2:	e002      	b.n	80093ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093b4:	f04f 33ff 	mov.w	r3, #4294967295
 80093b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093ba:	69bb      	ldr	r3, [r7, #24]
	}
 80093bc:	4618      	mov	r0, r3
 80093be:	3720      	adds	r7, #32
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	461a      	mov	r2, r3
 80093dc:	21a5      	movs	r1, #165	; 0xa5
 80093de:	f002 fa91 	bl	800b904 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093ec:	3b01      	subs	r3, #1
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	f023 0307 	bic.w	r3, r3, #7
 80093fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	f003 0307 	and.w	r3, r3, #7
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	617b      	str	r3, [r7, #20]
}
 8009418:	bf00      	nop
 800941a:	e7fe      	b.n	800941a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d01f      	beq.n	8009462 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009422:	2300      	movs	r3, #0
 8009424:	61fb      	str	r3, [r7, #28]
 8009426:	e012      	b.n	800944e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	4413      	add	r3, r2
 800942e:	7819      	ldrb	r1, [r3, #0]
 8009430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	4413      	add	r3, r2
 8009436:	3334      	adds	r3, #52	; 0x34
 8009438:	460a      	mov	r2, r1
 800943a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	4413      	add	r3, r2
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d006      	beq.n	8009456 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	3301      	adds	r3, #1
 800944c:	61fb      	str	r3, [r7, #28]
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	2b0f      	cmp	r3, #15
 8009452:	d9e9      	bls.n	8009428 <prvInitialiseNewTask+0x64>
 8009454:	e000      	b.n	8009458 <prvInitialiseNewTask+0x94>
			{
				break;
 8009456:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	2200      	movs	r2, #0
 800945c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009460:	e003      	b.n	800946a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946c:	2b37      	cmp	r3, #55	; 0x37
 800946e:	d901      	bls.n	8009474 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009470:	2337      	movs	r3, #55	; 0x37
 8009472:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009478:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800947e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	2200      	movs	r2, #0
 8009484:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	3304      	adds	r3, #4
 800948a:	4618      	mov	r0, r3
 800948c:	f7ff f978 	bl	8008780 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009492:	3318      	adds	r3, #24
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff f973 	bl	8008780 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800949e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80094c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c2:	3354      	adds	r3, #84	; 0x54
 80094c4:	224c      	movs	r2, #76	; 0x4c
 80094c6:	2100      	movs	r1, #0
 80094c8:	4618      	mov	r0, r3
 80094ca:	f002 fa1b 	bl	800b904 <memset>
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	4a0c      	ldr	r2, [pc, #48]	; (8009504 <prvInitialiseNewTask+0x140>)
 80094d2:	659a      	str	r2, [r3, #88]	; 0x58
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	4a0c      	ldr	r2, [pc, #48]	; (8009508 <prvInitialiseNewTask+0x144>)
 80094d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	4a0b      	ldr	r2, [pc, #44]	; (800950c <prvInitialiseNewTask+0x148>)
 80094de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	68f9      	ldr	r1, [r7, #12]
 80094e4:	69b8      	ldr	r0, [r7, #24]
 80094e6:	f001 f90d 	bl	800a704 <pxPortInitialiseStack>
 80094ea:	4602      	mov	r2, r0
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094fc:	bf00      	nop
 80094fe:	3720      	adds	r7, #32
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	2000a720 	.word	0x2000a720
 8009508:	2000a788 	.word	0x2000a788
 800950c:	2000a7f0 	.word	0x2000a7f0

08009510 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009518:	f001 fa24 	bl	800a964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800951c:	4b2d      	ldr	r3, [pc, #180]	; (80095d4 <prvAddNewTaskToReadyList+0xc4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3301      	adds	r3, #1
 8009522:	4a2c      	ldr	r2, [pc, #176]	; (80095d4 <prvAddNewTaskToReadyList+0xc4>)
 8009524:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009526:	4b2c      	ldr	r3, [pc, #176]	; (80095d8 <prvAddNewTaskToReadyList+0xc8>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d109      	bne.n	8009542 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800952e:	4a2a      	ldr	r2, [pc, #168]	; (80095d8 <prvAddNewTaskToReadyList+0xc8>)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009534:	4b27      	ldr	r3, [pc, #156]	; (80095d4 <prvAddNewTaskToReadyList+0xc4>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d110      	bne.n	800955e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800953c:	f000 fbf2 	bl	8009d24 <prvInitialiseTaskLists>
 8009540:	e00d      	b.n	800955e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009542:	4b26      	ldr	r3, [pc, #152]	; (80095dc <prvAddNewTaskToReadyList+0xcc>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d109      	bne.n	800955e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800954a:	4b23      	ldr	r3, [pc, #140]	; (80095d8 <prvAddNewTaskToReadyList+0xc8>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009554:	429a      	cmp	r2, r3
 8009556:	d802      	bhi.n	800955e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009558:	4a1f      	ldr	r2, [pc, #124]	; (80095d8 <prvAddNewTaskToReadyList+0xc8>)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800955e:	4b20      	ldr	r3, [pc, #128]	; (80095e0 <prvAddNewTaskToReadyList+0xd0>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	4a1e      	ldr	r2, [pc, #120]	; (80095e0 <prvAddNewTaskToReadyList+0xd0>)
 8009566:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009568:	4b1d      	ldr	r3, [pc, #116]	; (80095e0 <prvAddNewTaskToReadyList+0xd0>)
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009574:	4b1b      	ldr	r3, [pc, #108]	; (80095e4 <prvAddNewTaskToReadyList+0xd4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d903      	bls.n	8009584 <prvAddNewTaskToReadyList+0x74>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009580:	4a18      	ldr	r2, [pc, #96]	; (80095e4 <prvAddNewTaskToReadyList+0xd4>)
 8009582:	6013      	str	r3, [r2, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009588:	4613      	mov	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4a15      	ldr	r2, [pc, #84]	; (80095e8 <prvAddNewTaskToReadyList+0xd8>)
 8009592:	441a      	add	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3304      	adds	r3, #4
 8009598:	4619      	mov	r1, r3
 800959a:	4610      	mov	r0, r2
 800959c:	f7ff f8fd 	bl	800879a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095a0:	f001 fa10 	bl	800a9c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095a4:	4b0d      	ldr	r3, [pc, #52]	; (80095dc <prvAddNewTaskToReadyList+0xcc>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00e      	beq.n	80095ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095ac:	4b0a      	ldr	r3, [pc, #40]	; (80095d8 <prvAddNewTaskToReadyList+0xc8>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d207      	bcs.n	80095ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095ba:	4b0c      	ldr	r3, [pc, #48]	; (80095ec <prvAddNewTaskToReadyList+0xdc>)
 80095bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095ca:	bf00      	nop
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	2000238c 	.word	0x2000238c
 80095d8:	20001eb8 	.word	0x20001eb8
 80095dc:	20002398 	.word	0x20002398
 80095e0:	200023a8 	.word	0x200023a8
 80095e4:	20002394 	.word	0x20002394
 80095e8:	20001ebc 	.word	0x20001ebc
 80095ec:	e000ed04 	.word	0xe000ed04

080095f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08a      	sub	sp, #40	; 0x28
 80095f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095fe:	463a      	mov	r2, r7
 8009600:	1d39      	adds	r1, r7, #4
 8009602:	f107 0308 	add.w	r3, r7, #8
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff f866 	bl	80086d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	9202      	str	r2, [sp, #8]
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	2300      	movs	r3, #0
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	2300      	movs	r3, #0
 800961c:	460a      	mov	r2, r1
 800961e:	4924      	ldr	r1, [pc, #144]	; (80096b0 <vTaskStartScheduler+0xc0>)
 8009620:	4824      	ldr	r0, [pc, #144]	; (80096b4 <vTaskStartScheduler+0xc4>)
 8009622:	f7ff fe2d 	bl	8009280 <xTaskCreateStatic>
 8009626:	4603      	mov	r3, r0
 8009628:	4a23      	ldr	r2, [pc, #140]	; (80096b8 <vTaskStartScheduler+0xc8>)
 800962a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800962c:	4b22      	ldr	r3, [pc, #136]	; (80096b8 <vTaskStartScheduler+0xc8>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009634:	2301      	movs	r3, #1
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	e001      	b.n	800963e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d102      	bne.n	800964a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009644:	f000 fd10 	bl	800a068 <xTimerCreateTimerTask>
 8009648:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d11b      	bne.n	8009688 <vTaskStartScheduler+0x98>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	613b      	str	r3, [r7, #16]
}
 8009662:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009664:	4b15      	ldr	r3, [pc, #84]	; (80096bc <vTaskStartScheduler+0xcc>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3354      	adds	r3, #84	; 0x54
 800966a:	4a15      	ldr	r2, [pc, #84]	; (80096c0 <vTaskStartScheduler+0xd0>)
 800966c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800966e:	4b15      	ldr	r3, [pc, #84]	; (80096c4 <vTaskStartScheduler+0xd4>)
 8009670:	f04f 32ff 	mov.w	r2, #4294967295
 8009674:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009676:	4b14      	ldr	r3, [pc, #80]	; (80096c8 <vTaskStartScheduler+0xd8>)
 8009678:	2201      	movs	r2, #1
 800967a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800967c:	4b13      	ldr	r3, [pc, #76]	; (80096cc <vTaskStartScheduler+0xdc>)
 800967e:	2200      	movs	r2, #0
 8009680:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009682:	f001 f8cd 	bl	800a820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009686:	e00e      	b.n	80096a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	d10a      	bne.n	80096a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	60fb      	str	r3, [r7, #12]
}
 80096a2:	bf00      	nop
 80096a4:	e7fe      	b.n	80096a4 <vTaskStartScheduler+0xb4>
}
 80096a6:	bf00      	nop
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	0800bafc 	.word	0x0800bafc
 80096b4:	08009cf5 	.word	0x08009cf5
 80096b8:	200023b0 	.word	0x200023b0
 80096bc:	20001eb8 	.word	0x20001eb8
 80096c0:	20000174 	.word	0x20000174
 80096c4:	200023ac 	.word	0x200023ac
 80096c8:	20002398 	.word	0x20002398
 80096cc:	20002390 	.word	0x20002390

080096d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096d4:	4b04      	ldr	r3, [pc, #16]	; (80096e8 <vTaskSuspendAll+0x18>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3301      	adds	r3, #1
 80096da:	4a03      	ldr	r2, [pc, #12]	; (80096e8 <vTaskSuspendAll+0x18>)
 80096dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80096de:	bf00      	nop
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	200023b4 	.word	0x200023b4

080096ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096fa:	4b42      	ldr	r3, [pc, #264]	; (8009804 <xTaskResumeAll+0x118>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10a      	bne.n	8009718 <xTaskResumeAll+0x2c>
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	603b      	str	r3, [r7, #0]
}
 8009714:	bf00      	nop
 8009716:	e7fe      	b.n	8009716 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009718:	f001 f924 	bl	800a964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800971c:	4b39      	ldr	r3, [pc, #228]	; (8009804 <xTaskResumeAll+0x118>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3b01      	subs	r3, #1
 8009722:	4a38      	ldr	r2, [pc, #224]	; (8009804 <xTaskResumeAll+0x118>)
 8009724:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009726:	4b37      	ldr	r3, [pc, #220]	; (8009804 <xTaskResumeAll+0x118>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d162      	bne.n	80097f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800972e:	4b36      	ldr	r3, [pc, #216]	; (8009808 <xTaskResumeAll+0x11c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d05e      	beq.n	80097f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009736:	e02f      	b.n	8009798 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009738:	4b34      	ldr	r3, [pc, #208]	; (800980c <xTaskResumeAll+0x120>)
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	3318      	adds	r3, #24
 8009744:	4618      	mov	r0, r3
 8009746:	f7ff f885 	bl	8008854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	3304      	adds	r3, #4
 800974e:	4618      	mov	r0, r3
 8009750:	f7ff f880 	bl	8008854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009758:	4b2d      	ldr	r3, [pc, #180]	; (8009810 <xTaskResumeAll+0x124>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d903      	bls.n	8009768 <xTaskResumeAll+0x7c>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009764:	4a2a      	ldr	r2, [pc, #168]	; (8009810 <xTaskResumeAll+0x124>)
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976c:	4613      	mov	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4a27      	ldr	r2, [pc, #156]	; (8009814 <xTaskResumeAll+0x128>)
 8009776:	441a      	add	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	3304      	adds	r3, #4
 800977c:	4619      	mov	r1, r3
 800977e:	4610      	mov	r0, r2
 8009780:	f7ff f80b 	bl	800879a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009788:	4b23      	ldr	r3, [pc, #140]	; (8009818 <xTaskResumeAll+0x12c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978e:	429a      	cmp	r2, r3
 8009790:	d302      	bcc.n	8009798 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009792:	4b22      	ldr	r3, [pc, #136]	; (800981c <xTaskResumeAll+0x130>)
 8009794:	2201      	movs	r2, #1
 8009796:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009798:	4b1c      	ldr	r3, [pc, #112]	; (800980c <xTaskResumeAll+0x120>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1cb      	bne.n	8009738 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097a6:	f000 fb5f 	bl	8009e68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80097aa:	4b1d      	ldr	r3, [pc, #116]	; (8009820 <xTaskResumeAll+0x134>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d010      	beq.n	80097d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80097b6:	f000 f847 	bl	8009848 <xTaskIncrementTick>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d002      	beq.n	80097c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80097c0:	4b16      	ldr	r3, [pc, #88]	; (800981c <xTaskResumeAll+0x130>)
 80097c2:	2201      	movs	r2, #1
 80097c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1f1      	bne.n	80097b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80097d2:	4b13      	ldr	r3, [pc, #76]	; (8009820 <xTaskResumeAll+0x134>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097d8:	4b10      	ldr	r3, [pc, #64]	; (800981c <xTaskResumeAll+0x130>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d009      	beq.n	80097f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097e0:	2301      	movs	r3, #1
 80097e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097e4:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <xTaskResumeAll+0x138>)
 80097e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097f4:	f001 f8e6 	bl	800a9c4 <vPortExitCritical>

	return xAlreadyYielded;
 80097f8:	68bb      	ldr	r3, [r7, #8]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	200023b4 	.word	0x200023b4
 8009808:	2000238c 	.word	0x2000238c
 800980c:	2000234c 	.word	0x2000234c
 8009810:	20002394 	.word	0x20002394
 8009814:	20001ebc 	.word	0x20001ebc
 8009818:	20001eb8 	.word	0x20001eb8
 800981c:	200023a0 	.word	0x200023a0
 8009820:	2000239c 	.word	0x2000239c
 8009824:	e000ed04 	.word	0xe000ed04

08009828 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800982e:	4b05      	ldr	r3, [pc, #20]	; (8009844 <xTaskGetTickCount+0x1c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009834:	687b      	ldr	r3, [r7, #4]
}
 8009836:	4618      	mov	r0, r3
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	20002390 	.word	0x20002390

08009848 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800984e:	2300      	movs	r3, #0
 8009850:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009852:	4b4f      	ldr	r3, [pc, #316]	; (8009990 <xTaskIncrementTick+0x148>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f040 808f 	bne.w	800997a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800985c:	4b4d      	ldr	r3, [pc, #308]	; (8009994 <xTaskIncrementTick+0x14c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3301      	adds	r3, #1
 8009862:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009864:	4a4b      	ldr	r2, [pc, #300]	; (8009994 <xTaskIncrementTick+0x14c>)
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d120      	bne.n	80098b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009870:	4b49      	ldr	r3, [pc, #292]	; (8009998 <xTaskIncrementTick+0x150>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <xTaskIncrementTick+0x48>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	603b      	str	r3, [r7, #0]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <xTaskIncrementTick+0x46>
 8009890:	4b41      	ldr	r3, [pc, #260]	; (8009998 <xTaskIncrementTick+0x150>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	4b41      	ldr	r3, [pc, #260]	; (800999c <xTaskIncrementTick+0x154>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a3f      	ldr	r2, [pc, #252]	; (8009998 <xTaskIncrementTick+0x150>)
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	4a3f      	ldr	r2, [pc, #252]	; (800999c <xTaskIncrementTick+0x154>)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6013      	str	r3, [r2, #0]
 80098a4:	4b3e      	ldr	r3, [pc, #248]	; (80099a0 <xTaskIncrementTick+0x158>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3301      	adds	r3, #1
 80098aa:	4a3d      	ldr	r2, [pc, #244]	; (80099a0 <xTaskIncrementTick+0x158>)
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	f000 fadb 	bl	8009e68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098b2:	4b3c      	ldr	r3, [pc, #240]	; (80099a4 <xTaskIncrementTick+0x15c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d349      	bcc.n	8009950 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098bc:	4b36      	ldr	r3, [pc, #216]	; (8009998 <xTaskIncrementTick+0x150>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d104      	bne.n	80098d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098c6:	4b37      	ldr	r3, [pc, #220]	; (80099a4 <xTaskIncrementTick+0x15c>)
 80098c8:	f04f 32ff 	mov.w	r2, #4294967295
 80098cc:	601a      	str	r2, [r3, #0]
					break;
 80098ce:	e03f      	b.n	8009950 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d0:	4b31      	ldr	r3, [pc, #196]	; (8009998 <xTaskIncrementTick+0x150>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d203      	bcs.n	80098f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098e8:	4a2e      	ldr	r2, [pc, #184]	; (80099a4 <xTaskIncrementTick+0x15c>)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098ee:	e02f      	b.n	8009950 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fe ffad 	bl	8008854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d004      	beq.n	800990c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	3318      	adds	r3, #24
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe ffa4 	bl	8008854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009910:	4b25      	ldr	r3, [pc, #148]	; (80099a8 <xTaskIncrementTick+0x160>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	429a      	cmp	r2, r3
 8009916:	d903      	bls.n	8009920 <xTaskIncrementTick+0xd8>
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991c:	4a22      	ldr	r2, [pc, #136]	; (80099a8 <xTaskIncrementTick+0x160>)
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4a1f      	ldr	r2, [pc, #124]	; (80099ac <xTaskIncrementTick+0x164>)
 800992e:	441a      	add	r2, r3
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	3304      	adds	r3, #4
 8009934:	4619      	mov	r1, r3
 8009936:	4610      	mov	r0, r2
 8009938:	f7fe ff2f 	bl	800879a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009940:	4b1b      	ldr	r3, [pc, #108]	; (80099b0 <xTaskIncrementTick+0x168>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009946:	429a      	cmp	r2, r3
 8009948:	d3b8      	bcc.n	80098bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800994a:	2301      	movs	r3, #1
 800994c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800994e:	e7b5      	b.n	80098bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009950:	4b17      	ldr	r3, [pc, #92]	; (80099b0 <xTaskIncrementTick+0x168>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009956:	4915      	ldr	r1, [pc, #84]	; (80099ac <xTaskIncrementTick+0x164>)
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	440b      	add	r3, r1
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d901      	bls.n	800996c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009968:	2301      	movs	r3, #1
 800996a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800996c:	4b11      	ldr	r3, [pc, #68]	; (80099b4 <xTaskIncrementTick+0x16c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d007      	beq.n	8009984 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009974:	2301      	movs	r3, #1
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	e004      	b.n	8009984 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800997a:	4b0f      	ldr	r3, [pc, #60]	; (80099b8 <xTaskIncrementTick+0x170>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3301      	adds	r3, #1
 8009980:	4a0d      	ldr	r2, [pc, #52]	; (80099b8 <xTaskIncrementTick+0x170>)
 8009982:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009984:	697b      	ldr	r3, [r7, #20]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	200023b4 	.word	0x200023b4
 8009994:	20002390 	.word	0x20002390
 8009998:	20002344 	.word	0x20002344
 800999c:	20002348 	.word	0x20002348
 80099a0:	200023a4 	.word	0x200023a4
 80099a4:	200023ac 	.word	0x200023ac
 80099a8:	20002394 	.word	0x20002394
 80099ac:	20001ebc 	.word	0x20001ebc
 80099b0:	20001eb8 	.word	0x20001eb8
 80099b4:	200023a0 	.word	0x200023a0
 80099b8:	2000239c 	.word	0x2000239c

080099bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80099c2:	4b2a      	ldr	r3, [pc, #168]	; (8009a6c <vTaskSwitchContext+0xb0>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099ca:	4b29      	ldr	r3, [pc, #164]	; (8009a70 <vTaskSwitchContext+0xb4>)
 80099cc:	2201      	movs	r2, #1
 80099ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80099d0:	e046      	b.n	8009a60 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80099d2:	4b27      	ldr	r3, [pc, #156]	; (8009a70 <vTaskSwitchContext+0xb4>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d8:	4b26      	ldr	r3, [pc, #152]	; (8009a74 <vTaskSwitchContext+0xb8>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	60fb      	str	r3, [r7, #12]
 80099de:	e010      	b.n	8009a02 <vTaskSwitchContext+0x46>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10a      	bne.n	80099fc <vTaskSwitchContext+0x40>
	__asm volatile
 80099e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ea:	f383 8811 	msr	BASEPRI, r3
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	f3bf 8f4f 	dsb	sy
 80099f6:	607b      	str	r3, [r7, #4]
}
 80099f8:	bf00      	nop
 80099fa:	e7fe      	b.n	80099fa <vTaskSwitchContext+0x3e>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	60fb      	str	r3, [r7, #12]
 8009a02:	491d      	ldr	r1, [pc, #116]	; (8009a78 <vTaskSwitchContext+0xbc>)
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	4613      	mov	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	440b      	add	r3, r1
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0e4      	beq.n	80099e0 <vTaskSwitchContext+0x24>
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4a15      	ldr	r2, [pc, #84]	; (8009a78 <vTaskSwitchContext+0xbc>)
 8009a22:	4413      	add	r3, r2
 8009a24:	60bb      	str	r3, [r7, #8]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	605a      	str	r2, [r3, #4]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	3308      	adds	r3, #8
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d104      	bne.n	8009a46 <vTaskSwitchContext+0x8a>
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	605a      	str	r2, [r3, #4]
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	4a0b      	ldr	r2, [pc, #44]	; (8009a7c <vTaskSwitchContext+0xc0>)
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	4a08      	ldr	r2, [pc, #32]	; (8009a74 <vTaskSwitchContext+0xb8>)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a56:	4b09      	ldr	r3, [pc, #36]	; (8009a7c <vTaskSwitchContext+0xc0>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3354      	adds	r3, #84	; 0x54
 8009a5c:	4a08      	ldr	r2, [pc, #32]	; (8009a80 <vTaskSwitchContext+0xc4>)
 8009a5e:	6013      	str	r3, [r2, #0]
}
 8009a60:	bf00      	nop
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	200023b4 	.word	0x200023b4
 8009a70:	200023a0 	.word	0x200023a0
 8009a74:	20002394 	.word	0x20002394
 8009a78:	20001ebc 	.word	0x20001ebc
 8009a7c:	20001eb8 	.word	0x20001eb8
 8009a80:	20000174 	.word	0x20000174

08009a84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10a      	bne.n	8009aaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	60fb      	str	r3, [r7, #12]
}
 8009aa6:	bf00      	nop
 8009aa8:	e7fe      	b.n	8009aa8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009aaa:	4b07      	ldr	r3, [pc, #28]	; (8009ac8 <vTaskPlaceOnEventList+0x44>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	3318      	adds	r3, #24
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7fe fe95 	bl	80087e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ab8:	2101      	movs	r1, #1
 8009aba:	6838      	ldr	r0, [r7, #0]
 8009abc:	f000 fa80 	bl	8009fc0 <prvAddCurrentTaskToDelayedList>
}
 8009ac0:	bf00      	nop
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	20001eb8 	.word	0x20001eb8

08009acc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10a      	bne.n	8009af4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	617b      	str	r3, [r7, #20]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009af4:	4b0a      	ldr	r3, [pc, #40]	; (8009b20 <vTaskPlaceOnEventListRestricted+0x54>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3318      	adds	r3, #24
 8009afa:	4619      	mov	r1, r3
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f7fe fe4c 	bl	800879a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d002      	beq.n	8009b0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009b08:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	68b8      	ldr	r0, [r7, #8]
 8009b12:	f000 fa55 	bl	8009fc0 <prvAddCurrentTaskToDelayedList>
	}
 8009b16:	bf00      	nop
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20001eb8 	.word	0x20001eb8

08009b24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10a      	bne.n	8009b50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	60fb      	str	r3, [r7, #12]
}
 8009b4c:	bf00      	nop
 8009b4e:	e7fe      	b.n	8009b4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	3318      	adds	r3, #24
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe fe7d 	bl	8008854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b5a:	4b1e      	ldr	r3, [pc, #120]	; (8009bd4 <xTaskRemoveFromEventList+0xb0>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d11d      	bne.n	8009b9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	3304      	adds	r3, #4
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fe74 	bl	8008854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b70:	4b19      	ldr	r3, [pc, #100]	; (8009bd8 <xTaskRemoveFromEventList+0xb4>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d903      	bls.n	8009b80 <xTaskRemoveFromEventList+0x5c>
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7c:	4a16      	ldr	r2, [pc, #88]	; (8009bd8 <xTaskRemoveFromEventList+0xb4>)
 8009b7e:	6013      	str	r3, [r2, #0]
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4a13      	ldr	r2, [pc, #76]	; (8009bdc <xTaskRemoveFromEventList+0xb8>)
 8009b8e:	441a      	add	r2, r3
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	3304      	adds	r3, #4
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f7fe fdff 	bl	800879a <vListInsertEnd>
 8009b9c:	e005      	b.n	8009baa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	3318      	adds	r3, #24
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	480e      	ldr	r0, [pc, #56]	; (8009be0 <xTaskRemoveFromEventList+0xbc>)
 8009ba6:	f7fe fdf8 	bl	800879a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bae:	4b0d      	ldr	r3, [pc, #52]	; (8009be4 <xTaskRemoveFromEventList+0xc0>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d905      	bls.n	8009bc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009bbc:	4b0a      	ldr	r3, [pc, #40]	; (8009be8 <xTaskRemoveFromEventList+0xc4>)
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]
 8009bc2:	e001      	b.n	8009bc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009bc8:	697b      	ldr	r3, [r7, #20]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3718      	adds	r7, #24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	200023b4 	.word	0x200023b4
 8009bd8:	20002394 	.word	0x20002394
 8009bdc:	20001ebc 	.word	0x20001ebc
 8009be0:	2000234c 	.word	0x2000234c
 8009be4:	20001eb8 	.word	0x20001eb8
 8009be8:	200023a0 	.word	0x200023a0

08009bec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009bf4:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <vTaskInternalSetTimeOutState+0x24>)
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009bfc:	4b05      	ldr	r3, [pc, #20]	; (8009c14 <vTaskInternalSetTimeOutState+0x28>)
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	605a      	str	r2, [r3, #4]
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	200023a4 	.word	0x200023a4
 8009c14:	20002390 	.word	0x20002390

08009c18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10a      	bne.n	8009c3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	613b      	str	r3, [r7, #16]
}
 8009c3a:	bf00      	nop
 8009c3c:	e7fe      	b.n	8009c3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10a      	bne.n	8009c5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	60fb      	str	r3, [r7, #12]
}
 8009c56:	bf00      	nop
 8009c58:	e7fe      	b.n	8009c58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009c5a:	f000 fe83 	bl	800a964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c5e:	4b1d      	ldr	r3, [pc, #116]	; (8009cd4 <xTaskCheckForTimeOut+0xbc>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c76:	d102      	bne.n	8009c7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	61fb      	str	r3, [r7, #28]
 8009c7c:	e023      	b.n	8009cc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	4b15      	ldr	r3, [pc, #84]	; (8009cd8 <xTaskCheckForTimeOut+0xc0>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d007      	beq.n	8009c9a <xTaskCheckForTimeOut+0x82>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	69ba      	ldr	r2, [r7, #24]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d302      	bcc.n	8009c9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c94:	2301      	movs	r3, #1
 8009c96:	61fb      	str	r3, [r7, #28]
 8009c98:	e015      	b.n	8009cc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d20b      	bcs.n	8009cbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	1ad2      	subs	r2, r2, r3
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff ff9b 	bl	8009bec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61fb      	str	r3, [r7, #28]
 8009cba:	e004      	b.n	8009cc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009cc6:	f000 fe7d 	bl	800a9c4 <vPortExitCritical>

	return xReturn;
 8009cca:	69fb      	ldr	r3, [r7, #28]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3720      	adds	r7, #32
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	20002390 	.word	0x20002390
 8009cd8:	200023a4 	.word	0x200023a4

08009cdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ce0:	4b03      	ldr	r3, [pc, #12]	; (8009cf0 <vTaskMissedYield+0x14>)
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	601a      	str	r2, [r3, #0]
}
 8009ce6:	bf00      	nop
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	200023a0 	.word	0x200023a0

08009cf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009cfc:	f000 f852 	bl	8009da4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d00:	4b06      	ldr	r3, [pc, #24]	; (8009d1c <prvIdleTask+0x28>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d9f9      	bls.n	8009cfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d08:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <prvIdleTask+0x2c>)
 8009d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d18:	e7f0      	b.n	8009cfc <prvIdleTask+0x8>
 8009d1a:	bf00      	nop
 8009d1c:	20001ebc 	.word	0x20001ebc
 8009d20:	e000ed04 	.word	0xe000ed04

08009d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	607b      	str	r3, [r7, #4]
 8009d2e:	e00c      	b.n	8009d4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4a12      	ldr	r2, [pc, #72]	; (8009d84 <prvInitialiseTaskLists+0x60>)
 8009d3c:	4413      	add	r3, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fe fcfe 	bl	8008740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	3301      	adds	r3, #1
 8009d48:	607b      	str	r3, [r7, #4]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b37      	cmp	r3, #55	; 0x37
 8009d4e:	d9ef      	bls.n	8009d30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d50:	480d      	ldr	r0, [pc, #52]	; (8009d88 <prvInitialiseTaskLists+0x64>)
 8009d52:	f7fe fcf5 	bl	8008740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d56:	480d      	ldr	r0, [pc, #52]	; (8009d8c <prvInitialiseTaskLists+0x68>)
 8009d58:	f7fe fcf2 	bl	8008740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d5c:	480c      	ldr	r0, [pc, #48]	; (8009d90 <prvInitialiseTaskLists+0x6c>)
 8009d5e:	f7fe fcef 	bl	8008740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d62:	480c      	ldr	r0, [pc, #48]	; (8009d94 <prvInitialiseTaskLists+0x70>)
 8009d64:	f7fe fcec 	bl	8008740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d68:	480b      	ldr	r0, [pc, #44]	; (8009d98 <prvInitialiseTaskLists+0x74>)
 8009d6a:	f7fe fce9 	bl	8008740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d6e:	4b0b      	ldr	r3, [pc, #44]	; (8009d9c <prvInitialiseTaskLists+0x78>)
 8009d70:	4a05      	ldr	r2, [pc, #20]	; (8009d88 <prvInitialiseTaskLists+0x64>)
 8009d72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d74:	4b0a      	ldr	r3, [pc, #40]	; (8009da0 <prvInitialiseTaskLists+0x7c>)
 8009d76:	4a05      	ldr	r2, [pc, #20]	; (8009d8c <prvInitialiseTaskLists+0x68>)
 8009d78:	601a      	str	r2, [r3, #0]
}
 8009d7a:	bf00      	nop
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20001ebc 	.word	0x20001ebc
 8009d88:	2000231c 	.word	0x2000231c
 8009d8c:	20002330 	.word	0x20002330
 8009d90:	2000234c 	.word	0x2000234c
 8009d94:	20002360 	.word	0x20002360
 8009d98:	20002378 	.word	0x20002378
 8009d9c:	20002344 	.word	0x20002344
 8009da0:	20002348 	.word	0x20002348

08009da4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009daa:	e019      	b.n	8009de0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009dac:	f000 fdda 	bl	800a964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009db0:	4b10      	ldr	r3, [pc, #64]	; (8009df4 <prvCheckTasksWaitingTermination+0x50>)
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3304      	adds	r3, #4
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fe fd49 	bl	8008854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009dc2:	4b0d      	ldr	r3, [pc, #52]	; (8009df8 <prvCheckTasksWaitingTermination+0x54>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	4a0b      	ldr	r2, [pc, #44]	; (8009df8 <prvCheckTasksWaitingTermination+0x54>)
 8009dca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009dcc:	4b0b      	ldr	r3, [pc, #44]	; (8009dfc <prvCheckTasksWaitingTermination+0x58>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	4a0a      	ldr	r2, [pc, #40]	; (8009dfc <prvCheckTasksWaitingTermination+0x58>)
 8009dd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009dd6:	f000 fdf5 	bl	800a9c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f810 	bl	8009e00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009de0:	4b06      	ldr	r3, [pc, #24]	; (8009dfc <prvCheckTasksWaitingTermination+0x58>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e1      	bne.n	8009dac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20002360 	.word	0x20002360
 8009df8:	2000238c 	.word	0x2000238c
 8009dfc:	20002374 	.word	0x20002374

08009e00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3354      	adds	r3, #84	; 0x54
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f001 fd81 	bl	800b914 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d108      	bne.n	8009e2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 ff8d 	bl	800ad40 <vPortFree>
				vPortFree( pxTCB );
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 ff8a 	bl	800ad40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e2c:	e018      	b.n	8009e60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d103      	bne.n	8009e40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 ff81 	bl	800ad40 <vPortFree>
	}
 8009e3e:	e00f      	b.n	8009e60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d00a      	beq.n	8009e60 <prvDeleteTCB+0x60>
	__asm volatile
 8009e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	60fb      	str	r3, [r7, #12]
}
 8009e5c:	bf00      	nop
 8009e5e:	e7fe      	b.n	8009e5e <prvDeleteTCB+0x5e>
	}
 8009e60:	bf00      	nop
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ea0 <prvResetNextTaskUnblockTime+0x38>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d104      	bne.n	8009e82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e78:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8009e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e80:	e008      	b.n	8009e94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e82:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <prvResetNextTaskUnblockTime+0x38>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	4a04      	ldr	r2, [pc, #16]	; (8009ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8009e92:	6013      	str	r3, [r2, #0]
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	20002344 	.word	0x20002344
 8009ea4:	200023ac 	.word	0x200023ac

08009ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009eae:	4b0b      	ldr	r3, [pc, #44]	; (8009edc <xTaskGetSchedulerState+0x34>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d102      	bne.n	8009ebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	607b      	str	r3, [r7, #4]
 8009eba:	e008      	b.n	8009ece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ebc:	4b08      	ldr	r3, [pc, #32]	; (8009ee0 <xTaskGetSchedulerState+0x38>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d102      	bne.n	8009eca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	607b      	str	r3, [r7, #4]
 8009ec8:	e001      	b.n	8009ece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ece:	687b      	ldr	r3, [r7, #4]
	}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	20002398 	.word	0x20002398
 8009ee0:	200023b4 	.word	0x200023b4

08009ee4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d056      	beq.n	8009fa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009efa:	4b2e      	ldr	r3, [pc, #184]	; (8009fb4 <xTaskPriorityDisinherit+0xd0>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d00a      	beq.n	8009f1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	60fb      	str	r3, [r7, #12]
}
 8009f16:	bf00      	nop
 8009f18:	e7fe      	b.n	8009f18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10a      	bne.n	8009f38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	60bb      	str	r3, [r7, #8]
}
 8009f34:	bf00      	nop
 8009f36:	e7fe      	b.n	8009f36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f3c:	1e5a      	subs	r2, r3, #1
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d02c      	beq.n	8009fa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d128      	bne.n	8009fa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	3304      	adds	r3, #4
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe fc7a 	bl	8008854 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f78:	4b0f      	ldr	r3, [pc, #60]	; (8009fb8 <xTaskPriorityDisinherit+0xd4>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d903      	bls.n	8009f88 <xTaskPriorityDisinherit+0xa4>
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f84:	4a0c      	ldr	r2, [pc, #48]	; (8009fb8 <xTaskPriorityDisinherit+0xd4>)
 8009f86:	6013      	str	r3, [r2, #0]
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4a09      	ldr	r2, [pc, #36]	; (8009fbc <xTaskPriorityDisinherit+0xd8>)
 8009f96:	441a      	add	r2, r3
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	3304      	adds	r3, #4
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	f7fe fbfb 	bl	800879a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fa8:	697b      	ldr	r3, [r7, #20]
	}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20001eb8 	.word	0x20001eb8
 8009fb8:	20002394 	.word	0x20002394
 8009fbc:	20001ebc 	.word	0x20001ebc

08009fc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009fca:	4b21      	ldr	r3, [pc, #132]	; (800a050 <prvAddCurrentTaskToDelayedList+0x90>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fd0:	4b20      	ldr	r3, [pc, #128]	; (800a054 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe fc3c 	bl	8008854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe2:	d10a      	bne.n	8009ffa <prvAddCurrentTaskToDelayedList+0x3a>
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d007      	beq.n	8009ffa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fea:	4b1a      	ldr	r3, [pc, #104]	; (800a054 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3304      	adds	r3, #4
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4819      	ldr	r0, [pc, #100]	; (800a058 <prvAddCurrentTaskToDelayedList+0x98>)
 8009ff4:	f7fe fbd1 	bl	800879a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ff8:	e026      	b.n	800a048 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4413      	add	r3, r2
 800a000:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a002:	4b14      	ldr	r3, [pc, #80]	; (800a054 <prvAddCurrentTaskToDelayedList+0x94>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d209      	bcs.n	800a026 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a012:	4b12      	ldr	r3, [pc, #72]	; (800a05c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	4b0f      	ldr	r3, [pc, #60]	; (800a054 <prvAddCurrentTaskToDelayedList+0x94>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3304      	adds	r3, #4
 800a01c:	4619      	mov	r1, r3
 800a01e:	4610      	mov	r0, r2
 800a020:	f7fe fbdf 	bl	80087e2 <vListInsert>
}
 800a024:	e010      	b.n	800a048 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a026:	4b0e      	ldr	r3, [pc, #56]	; (800a060 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <prvAddCurrentTaskToDelayedList+0x94>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	3304      	adds	r3, #4
 800a030:	4619      	mov	r1, r3
 800a032:	4610      	mov	r0, r2
 800a034:	f7fe fbd5 	bl	80087e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a038:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d202      	bcs.n	800a048 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a042:	4a08      	ldr	r2, [pc, #32]	; (800a064 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	6013      	str	r3, [r2, #0]
}
 800a048:	bf00      	nop
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	20002390 	.word	0x20002390
 800a054:	20001eb8 	.word	0x20001eb8
 800a058:	20002378 	.word	0x20002378
 800a05c:	20002348 	.word	0x20002348
 800a060:	20002344 	.word	0x20002344
 800a064:	200023ac 	.word	0x200023ac

0800a068 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08a      	sub	sp, #40	; 0x28
 800a06c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a06e:	2300      	movs	r3, #0
 800a070:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a072:	f000 fb07 	bl	800a684 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a076:	4b1c      	ldr	r3, [pc, #112]	; (800a0e8 <xTimerCreateTimerTask+0x80>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d021      	beq.n	800a0c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a082:	2300      	movs	r3, #0
 800a084:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a086:	1d3a      	adds	r2, r7, #4
 800a088:	f107 0108 	add.w	r1, r7, #8
 800a08c:	f107 030c 	add.w	r3, r7, #12
 800a090:	4618      	mov	r0, r3
 800a092:	f7fe fb3b 	bl	800870c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a096:	6879      	ldr	r1, [r7, #4]
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	9202      	str	r2, [sp, #8]
 800a09e:	9301      	str	r3, [sp, #4]
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	460a      	mov	r2, r1
 800a0a8:	4910      	ldr	r1, [pc, #64]	; (800a0ec <xTimerCreateTimerTask+0x84>)
 800a0aa:	4811      	ldr	r0, [pc, #68]	; (800a0f0 <xTimerCreateTimerTask+0x88>)
 800a0ac:	f7ff f8e8 	bl	8009280 <xTaskCreateStatic>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	4a10      	ldr	r2, [pc, #64]	; (800a0f4 <xTimerCreateTimerTask+0x8c>)
 800a0b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a0b6:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <xTimerCreateTimerTask+0x8c>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10a      	bne.n	800a0de <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	613b      	str	r3, [r7, #16]
}
 800a0da:	bf00      	nop
 800a0dc:	e7fe      	b.n	800a0dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a0de:	697b      	ldr	r3, [r7, #20]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	200023e8 	.word	0x200023e8
 800a0ec:	0800bb04 	.word	0x0800bb04
 800a0f0:	0800a22d 	.word	0x0800a22d
 800a0f4:	200023ec 	.word	0x200023ec

0800a0f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08a      	sub	sp, #40	; 0x28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
 800a104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a106:	2300      	movs	r3, #0
 800a108:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10a      	bne.n	800a126 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	623b      	str	r3, [r7, #32]
}
 800a122:	bf00      	nop
 800a124:	e7fe      	b.n	800a124 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a126:	4b1a      	ldr	r3, [pc, #104]	; (800a190 <xTimerGenericCommand+0x98>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d02a      	beq.n	800a184 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	2b05      	cmp	r3, #5
 800a13e:	dc18      	bgt.n	800a172 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a140:	f7ff feb2 	bl	8009ea8 <xTaskGetSchedulerState>
 800a144:	4603      	mov	r3, r0
 800a146:	2b02      	cmp	r3, #2
 800a148:	d109      	bne.n	800a15e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a14a:	4b11      	ldr	r3, [pc, #68]	; (800a190 <xTimerGenericCommand+0x98>)
 800a14c:	6818      	ldr	r0, [r3, #0]
 800a14e:	f107 0110 	add.w	r1, r7, #16
 800a152:	2300      	movs	r3, #0
 800a154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a156:	f7fe fcab 	bl	8008ab0 <xQueueGenericSend>
 800a15a:	6278      	str	r0, [r7, #36]	; 0x24
 800a15c:	e012      	b.n	800a184 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a15e:	4b0c      	ldr	r3, [pc, #48]	; (800a190 <xTimerGenericCommand+0x98>)
 800a160:	6818      	ldr	r0, [r3, #0]
 800a162:	f107 0110 	add.w	r1, r7, #16
 800a166:	2300      	movs	r3, #0
 800a168:	2200      	movs	r2, #0
 800a16a:	f7fe fca1 	bl	8008ab0 <xQueueGenericSend>
 800a16e:	6278      	str	r0, [r7, #36]	; 0x24
 800a170:	e008      	b.n	800a184 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a172:	4b07      	ldr	r3, [pc, #28]	; (800a190 <xTimerGenericCommand+0x98>)
 800a174:	6818      	ldr	r0, [r3, #0]
 800a176:	f107 0110 	add.w	r1, r7, #16
 800a17a:	2300      	movs	r3, #0
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	f7fe fd95 	bl	8008cac <xQueueGenericSendFromISR>
 800a182:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a186:	4618      	mov	r0, r3
 800a188:	3728      	adds	r7, #40	; 0x28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	200023e8 	.word	0x200023e8

0800a194 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b088      	sub	sp, #32
 800a198:	af02      	add	r7, sp, #8
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a19e:	4b22      	ldr	r3, [pc, #136]	; (800a228 <prvProcessExpiredTimer+0x94>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fe fb51 	bl	8008854 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1b8:	f003 0304 	and.w	r3, r3, #4
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d022      	beq.n	800a206 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	699a      	ldr	r2, [r3, #24]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	18d1      	adds	r1, r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	6978      	ldr	r0, [r7, #20]
 800a1ce:	f000 f8d1 	bl	800a374 <prvInsertTimerInActiveList>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d01f      	beq.n	800a218 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1d8:	2300      	movs	r3, #0
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	6978      	ldr	r0, [r7, #20]
 800a1e4:	f7ff ff88 	bl	800a0f8 <xTimerGenericCommand>
 800a1e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d113      	bne.n	800a218 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	60fb      	str	r3, [r7, #12]
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a20c:	f023 0301 	bic.w	r3, r3, #1
 800a210:	b2da      	uxtb	r2, r3
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	6a1b      	ldr	r3, [r3, #32]
 800a21c:	6978      	ldr	r0, [r7, #20]
 800a21e:	4798      	blx	r3
}
 800a220:	bf00      	nop
 800a222:	3718      	adds	r7, #24
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	200023e0 	.word	0x200023e0

0800a22c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a234:	f107 0308 	add.w	r3, r7, #8
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 f857 	bl	800a2ec <prvGetNextExpireTime>
 800a23e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	4619      	mov	r1, r3
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 f803 	bl	800a250 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a24a:	f000 f8d5 	bl	800a3f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a24e:	e7f1      	b.n	800a234 <prvTimerTask+0x8>

0800a250 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a25a:	f7ff fa39 	bl	80096d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a25e:	f107 0308 	add.w	r3, r7, #8
 800a262:	4618      	mov	r0, r3
 800a264:	f000 f866 	bl	800a334 <prvSampleTimeNow>
 800a268:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d130      	bne.n	800a2d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10a      	bne.n	800a28c <prvProcessTimerOrBlockTask+0x3c>
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d806      	bhi.n	800a28c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a27e:	f7ff fa35 	bl	80096ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a282:	68f9      	ldr	r1, [r7, #12]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f7ff ff85 	bl	800a194 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a28a:	e024      	b.n	800a2d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d008      	beq.n	800a2a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a292:	4b13      	ldr	r3, [pc, #76]	; (800a2e0 <prvProcessTimerOrBlockTask+0x90>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d101      	bne.n	800a2a0 <prvProcessTimerOrBlockTask+0x50>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e000      	b.n	800a2a2 <prvProcessTimerOrBlockTask+0x52>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a2a4:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <prvProcessTimerOrBlockTask+0x94>)
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	f7fe ffb1 	bl	8009218 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a2b6:	f7ff fa19 	bl	80096ec <xTaskResumeAll>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10a      	bne.n	800a2d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a2c0:	4b09      	ldr	r3, [pc, #36]	; (800a2e8 <prvProcessTimerOrBlockTask+0x98>)
 800a2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c6:	601a      	str	r2, [r3, #0]
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	f3bf 8f6f 	isb	sy
}
 800a2d0:	e001      	b.n	800a2d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a2d2:	f7ff fa0b 	bl	80096ec <xTaskResumeAll>
}
 800a2d6:	bf00      	nop
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	200023e4 	.word	0x200023e4
 800a2e4:	200023e8 	.word	0x200023e8
 800a2e8:	e000ed04 	.word	0xe000ed04

0800a2ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2f4:	4b0e      	ldr	r3, [pc, #56]	; (800a330 <prvGetNextExpireTime+0x44>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <prvGetNextExpireTime+0x16>
 800a2fe:	2201      	movs	r2, #1
 800a300:	e000      	b.n	800a304 <prvGetNextExpireTime+0x18>
 800a302:	2200      	movs	r2, #0
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d105      	bne.n	800a31c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a310:	4b07      	ldr	r3, [pc, #28]	; (800a330 <prvGetNextExpireTime+0x44>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	e001      	b.n	800a320 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a31c:	2300      	movs	r3, #0
 800a31e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a320:	68fb      	ldr	r3, [r7, #12]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	200023e0 	.word	0x200023e0

0800a334 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a33c:	f7ff fa74 	bl	8009828 <xTaskGetTickCount>
 800a340:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a342:	4b0b      	ldr	r3, [pc, #44]	; (800a370 <prvSampleTimeNow+0x3c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d205      	bcs.n	800a358 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a34c:	f000 f936 	bl	800a5bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	e002      	b.n	800a35e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a35e:	4a04      	ldr	r2, [pc, #16]	; (800a370 <prvSampleTimeNow+0x3c>)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a364:	68fb      	ldr	r3, [r7, #12]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	200023f0 	.word	0x200023f0

0800a374 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
 800a380:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a382:	2300      	movs	r3, #0
 800a384:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	429a      	cmp	r2, r3
 800a398:	d812      	bhi.n	800a3c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	1ad2      	subs	r2, r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d302      	bcc.n	800a3ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	617b      	str	r3, [r7, #20]
 800a3ac:	e01b      	b.n	800a3e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a3ae:	4b10      	ldr	r3, [pc, #64]	; (800a3f0 <prvInsertTimerInActiveList+0x7c>)
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	f7fe fa12 	bl	80087e2 <vListInsert>
 800a3be:	e012      	b.n	800a3e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d206      	bcs.n	800a3d6 <prvInsertTimerInActiveList+0x62>
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d302      	bcc.n	800a3d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	617b      	str	r3, [r7, #20]
 800a3d4:	e007      	b.n	800a3e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3d6:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <prvInsertTimerInActiveList+0x80>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3304      	adds	r3, #4
 800a3de:	4619      	mov	r1, r3
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	f7fe f9fe 	bl	80087e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a3e6:	697b      	ldr	r3, [r7, #20]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3718      	adds	r7, #24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	200023e4 	.word	0x200023e4
 800a3f4:	200023e0 	.word	0x200023e0

0800a3f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08e      	sub	sp, #56	; 0x38
 800a3fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3fe:	e0ca      	b.n	800a596 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	da18      	bge.n	800a438 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a406:	1d3b      	adds	r3, r7, #4
 800a408:	3304      	adds	r3, #4
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10a      	bne.n	800a428 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	61fb      	str	r3, [r7, #28]
}
 800a424:	bf00      	nop
 800a426:	e7fe      	b.n	800a426 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a42e:	6850      	ldr	r0, [r2, #4]
 800a430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a432:	6892      	ldr	r2, [r2, #8]
 800a434:	4611      	mov	r1, r2
 800a436:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f2c0 80ab 	blt.w	800a596 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d004      	beq.n	800a456 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	3304      	adds	r3, #4
 800a450:	4618      	mov	r0, r3
 800a452:	f7fe f9ff 	bl	8008854 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a456:	463b      	mov	r3, r7
 800a458:	4618      	mov	r0, r3
 800a45a:	f7ff ff6b 	bl	800a334 <prvSampleTimeNow>
 800a45e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b09      	cmp	r3, #9
 800a464:	f200 8096 	bhi.w	800a594 <prvProcessReceivedCommands+0x19c>
 800a468:	a201      	add	r2, pc, #4	; (adr r2, 800a470 <prvProcessReceivedCommands+0x78>)
 800a46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46e:	bf00      	nop
 800a470:	0800a499 	.word	0x0800a499
 800a474:	0800a499 	.word	0x0800a499
 800a478:	0800a499 	.word	0x0800a499
 800a47c:	0800a50d 	.word	0x0800a50d
 800a480:	0800a521 	.word	0x0800a521
 800a484:	0800a56b 	.word	0x0800a56b
 800a488:	0800a499 	.word	0x0800a499
 800a48c:	0800a499 	.word	0x0800a499
 800a490:	0800a50d 	.word	0x0800a50d
 800a494:	0800a521 	.word	0x0800a521
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a49e:	f043 0301 	orr.w	r3, r3, #1
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	18d1      	adds	r1, r2, r3
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b8:	f7ff ff5c 	bl	800a374 <prvInsertTimerInActiveList>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d069      	beq.n	800a596 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4d0:	f003 0304 	and.w	r3, r3, #4
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d05e      	beq.n	800a596 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	441a      	add	r2, r3
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ea:	f7ff fe05 	bl	800a0f8 <xTimerGenericCommand>
 800a4ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a4f0:	6a3b      	ldr	r3, [r7, #32]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d14f      	bne.n	800a596 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	61bb      	str	r3, [r7, #24]
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a512:	f023 0301 	bic.w	r3, r3, #1
 800a516:	b2da      	uxtb	r2, r3
 800a518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a51e:	e03a      	b.n	800a596 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a526:	f043 0301 	orr.w	r3, r3, #1
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	617b      	str	r3, [r7, #20]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	699a      	ldr	r2, [r3, #24]
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	18d1      	adds	r1, r2, r3
 800a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a564:	f7ff ff06 	bl	800a374 <prvInsertTimerInActiveList>
					break;
 800a568:	e015      	b.n	800a596 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a570:	f003 0302 	and.w	r3, r3, #2
 800a574:	2b00      	cmp	r3, #0
 800a576:	d103      	bne.n	800a580 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a57a:	f000 fbe1 	bl	800ad40 <vPortFree>
 800a57e:	e00a      	b.n	800a596 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a586:	f023 0301 	bic.w	r3, r3, #1
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a592:	e000      	b.n	800a596 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a594:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a596:	4b08      	ldr	r3, [pc, #32]	; (800a5b8 <prvProcessReceivedCommands+0x1c0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	1d39      	adds	r1, r7, #4
 800a59c:	2200      	movs	r2, #0
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fe fc20 	bl	8008de4 <xQueueReceive>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f47f af2a 	bne.w	800a400 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a5ac:	bf00      	nop
 800a5ae:	bf00      	nop
 800a5b0:	3730      	adds	r7, #48	; 0x30
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	200023e8 	.word	0x200023e8

0800a5bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5c2:	e048      	b.n	800a656 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5c4:	4b2d      	ldr	r3, [pc, #180]	; (800a67c <prvSwitchTimerLists+0xc0>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ce:	4b2b      	ldr	r3, [pc, #172]	; (800a67c <prvSwitchTimerLists+0xc0>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3304      	adds	r3, #4
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fe f939 	bl	8008854 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5f0:	f003 0304 	and.w	r3, r3, #4
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d02e      	beq.n	800a656 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	4413      	add	r3, r2
 800a600:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	429a      	cmp	r2, r3
 800a608:	d90e      	bls.n	800a628 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a616:	4b19      	ldr	r3, [pc, #100]	; (800a67c <prvSwitchTimerLists+0xc0>)
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	3304      	adds	r3, #4
 800a61e:	4619      	mov	r1, r3
 800a620:	4610      	mov	r0, r2
 800a622:	f7fe f8de 	bl	80087e2 <vListInsert>
 800a626:	e016      	b.n	800a656 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a628:	2300      	movs	r3, #0
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	2300      	movs	r3, #0
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	2100      	movs	r1, #0
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f7ff fd60 	bl	800a0f8 <xTimerGenericCommand>
 800a638:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10a      	bne.n	800a656 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	603b      	str	r3, [r7, #0]
}
 800a652:	bf00      	nop
 800a654:	e7fe      	b.n	800a654 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a656:	4b09      	ldr	r3, [pc, #36]	; (800a67c <prvSwitchTimerLists+0xc0>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1b1      	bne.n	800a5c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a660:	4b06      	ldr	r3, [pc, #24]	; (800a67c <prvSwitchTimerLists+0xc0>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a666:	4b06      	ldr	r3, [pc, #24]	; (800a680 <prvSwitchTimerLists+0xc4>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a04      	ldr	r2, [pc, #16]	; (800a67c <prvSwitchTimerLists+0xc0>)
 800a66c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a66e:	4a04      	ldr	r2, [pc, #16]	; (800a680 <prvSwitchTimerLists+0xc4>)
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	6013      	str	r3, [r2, #0]
}
 800a674:	bf00      	nop
 800a676:	3718      	adds	r7, #24
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	200023e0 	.word	0x200023e0
 800a680:	200023e4 	.word	0x200023e4

0800a684 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a68a:	f000 f96b 	bl	800a964 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a68e:	4b15      	ldr	r3, [pc, #84]	; (800a6e4 <prvCheckForValidListAndQueue+0x60>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d120      	bne.n	800a6d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a696:	4814      	ldr	r0, [pc, #80]	; (800a6e8 <prvCheckForValidListAndQueue+0x64>)
 800a698:	f7fe f852 	bl	8008740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a69c:	4813      	ldr	r0, [pc, #76]	; (800a6ec <prvCheckForValidListAndQueue+0x68>)
 800a69e:	f7fe f84f 	bl	8008740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a6a2:	4b13      	ldr	r3, [pc, #76]	; (800a6f0 <prvCheckForValidListAndQueue+0x6c>)
 800a6a4:	4a10      	ldr	r2, [pc, #64]	; (800a6e8 <prvCheckForValidListAndQueue+0x64>)
 800a6a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a6a8:	4b12      	ldr	r3, [pc, #72]	; (800a6f4 <prvCheckForValidListAndQueue+0x70>)
 800a6aa:	4a10      	ldr	r2, [pc, #64]	; (800a6ec <prvCheckForValidListAndQueue+0x68>)
 800a6ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	4b11      	ldr	r3, [pc, #68]	; (800a6f8 <prvCheckForValidListAndQueue+0x74>)
 800a6b4:	4a11      	ldr	r2, [pc, #68]	; (800a6fc <prvCheckForValidListAndQueue+0x78>)
 800a6b6:	2110      	movs	r1, #16
 800a6b8:	200a      	movs	r0, #10
 800a6ba:	f7fe f95d 	bl	8008978 <xQueueGenericCreateStatic>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	4a08      	ldr	r2, [pc, #32]	; (800a6e4 <prvCheckForValidListAndQueue+0x60>)
 800a6c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a6c4:	4b07      	ldr	r3, [pc, #28]	; (800a6e4 <prvCheckForValidListAndQueue+0x60>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d005      	beq.n	800a6d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a6cc:	4b05      	ldr	r3, [pc, #20]	; (800a6e4 <prvCheckForValidListAndQueue+0x60>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	490b      	ldr	r1, [pc, #44]	; (800a700 <prvCheckForValidListAndQueue+0x7c>)
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe fd76 	bl	80091c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6d8:	f000 f974 	bl	800a9c4 <vPortExitCritical>
}
 800a6dc:	bf00      	nop
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	200023e8 	.word	0x200023e8
 800a6e8:	200023b8 	.word	0x200023b8
 800a6ec:	200023cc 	.word	0x200023cc
 800a6f0:	200023e0 	.word	0x200023e0
 800a6f4:	200023e4 	.word	0x200023e4
 800a6f8:	20002494 	.word	0x20002494
 800a6fc:	200023f4 	.word	0x200023f4
 800a700:	0800bb0c 	.word	0x0800bb0c

0800a704 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	3b04      	subs	r3, #4
 800a714:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a71c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3b04      	subs	r3, #4
 800a722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f023 0201 	bic.w	r2, r3, #1
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	3b04      	subs	r3, #4
 800a732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a734:	4a0c      	ldr	r2, [pc, #48]	; (800a768 <pxPortInitialiseStack+0x64>)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	3b14      	subs	r3, #20
 800a73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3b04      	subs	r3, #4
 800a74a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f06f 0202 	mvn.w	r2, #2
 800a752:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	3b20      	subs	r3, #32
 800a758:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a75a:	68fb      	ldr	r3, [r7, #12]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	0800a76d 	.word	0x0800a76d

0800a76c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a776:	4b12      	ldr	r3, [pc, #72]	; (800a7c0 <prvTaskExitError+0x54>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77e:	d00a      	beq.n	800a796 <prvTaskExitError+0x2a>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	60fb      	str	r3, [r7, #12]
}
 800a792:	bf00      	nop
 800a794:	e7fe      	b.n	800a794 <prvTaskExitError+0x28>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	60bb      	str	r3, [r7, #8]
}
 800a7a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7aa:	bf00      	nop
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d0fc      	beq.n	800a7ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	200000b8 	.word	0x200000b8
	...

0800a7d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7d0:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <pxCurrentTCBConst2>)
 800a7d2:	6819      	ldr	r1, [r3, #0]
 800a7d4:	6808      	ldr	r0, [r1, #0]
 800a7d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7da:	f380 8809 	msr	PSP, r0
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f04f 0000 	mov.w	r0, #0
 800a7e6:	f380 8811 	msr	BASEPRI, r0
 800a7ea:	4770      	bx	lr
 800a7ec:	f3af 8000 	nop.w

0800a7f0 <pxCurrentTCBConst2>:
 800a7f0:	20001eb8 	.word	0x20001eb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7f4:	bf00      	nop
 800a7f6:	bf00      	nop

0800a7f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7f8:	4808      	ldr	r0, [pc, #32]	; (800a81c <prvPortStartFirstTask+0x24>)
 800a7fa:	6800      	ldr	r0, [r0, #0]
 800a7fc:	6800      	ldr	r0, [r0, #0]
 800a7fe:	f380 8808 	msr	MSP, r0
 800a802:	f04f 0000 	mov.w	r0, #0
 800a806:	f380 8814 	msr	CONTROL, r0
 800a80a:	b662      	cpsie	i
 800a80c:	b661      	cpsie	f
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	df00      	svc	0
 800a818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a81a:	bf00      	nop
 800a81c:	e000ed08 	.word	0xe000ed08

0800a820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a826:	4b46      	ldr	r3, [pc, #280]	; (800a940 <xPortStartScheduler+0x120>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a46      	ldr	r2, [pc, #280]	; (800a944 <xPortStartScheduler+0x124>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d10a      	bne.n	800a846 <xPortStartScheduler+0x26>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	613b      	str	r3, [r7, #16]
}
 800a842:	bf00      	nop
 800a844:	e7fe      	b.n	800a844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a846:	4b3e      	ldr	r3, [pc, #248]	; (800a940 <xPortStartScheduler+0x120>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a3f      	ldr	r2, [pc, #252]	; (800a948 <xPortStartScheduler+0x128>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d10a      	bne.n	800a866 <xPortStartScheduler+0x46>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	60fb      	str	r3, [r7, #12]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a866:	4b39      	ldr	r3, [pc, #228]	; (800a94c <xPortStartScheduler+0x12c>)
 800a868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	22ff      	movs	r2, #255	; 0xff
 800a876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a880:	78fb      	ldrb	r3, [r7, #3]
 800a882:	b2db      	uxtb	r3, r3
 800a884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	4b31      	ldr	r3, [pc, #196]	; (800a950 <xPortStartScheduler+0x130>)
 800a88c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a88e:	4b31      	ldr	r3, [pc, #196]	; (800a954 <xPortStartScheduler+0x134>)
 800a890:	2207      	movs	r2, #7
 800a892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a894:	e009      	b.n	800a8aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a896:	4b2f      	ldr	r3, [pc, #188]	; (800a954 <xPortStartScheduler+0x134>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3b01      	subs	r3, #1
 800a89c:	4a2d      	ldr	r2, [pc, #180]	; (800a954 <xPortStartScheduler+0x134>)
 800a89e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8a0:	78fb      	ldrb	r3, [r7, #3]
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8aa:	78fb      	ldrb	r3, [r7, #3]
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8b2:	2b80      	cmp	r3, #128	; 0x80
 800a8b4:	d0ef      	beq.n	800a896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8b6:	4b27      	ldr	r3, [pc, #156]	; (800a954 <xPortStartScheduler+0x134>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f1c3 0307 	rsb	r3, r3, #7
 800a8be:	2b04      	cmp	r3, #4
 800a8c0:	d00a      	beq.n	800a8d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	60bb      	str	r3, [r7, #8]
}
 800a8d4:	bf00      	nop
 800a8d6:	e7fe      	b.n	800a8d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8d8:	4b1e      	ldr	r3, [pc, #120]	; (800a954 <xPortStartScheduler+0x134>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	021b      	lsls	r3, r3, #8
 800a8de:	4a1d      	ldr	r2, [pc, #116]	; (800a954 <xPortStartScheduler+0x134>)
 800a8e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8e2:	4b1c      	ldr	r3, [pc, #112]	; (800a954 <xPortStartScheduler+0x134>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8ea:	4a1a      	ldr	r2, [pc, #104]	; (800a954 <xPortStartScheduler+0x134>)
 800a8ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8f6:	4b18      	ldr	r3, [pc, #96]	; (800a958 <xPortStartScheduler+0x138>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a17      	ldr	r2, [pc, #92]	; (800a958 <xPortStartScheduler+0x138>)
 800a8fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a902:	4b15      	ldr	r3, [pc, #84]	; (800a958 <xPortStartScheduler+0x138>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a14      	ldr	r2, [pc, #80]	; (800a958 <xPortStartScheduler+0x138>)
 800a908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a90c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a90e:	f000 f8dd 	bl	800aacc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a912:	4b12      	ldr	r3, [pc, #72]	; (800a95c <xPortStartScheduler+0x13c>)
 800a914:	2200      	movs	r2, #0
 800a916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a918:	f000 f8fc 	bl	800ab14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a91c:	4b10      	ldr	r3, [pc, #64]	; (800a960 <xPortStartScheduler+0x140>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a0f      	ldr	r2, [pc, #60]	; (800a960 <xPortStartScheduler+0x140>)
 800a922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a928:	f7ff ff66 	bl	800a7f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a92c:	f7ff f846 	bl	80099bc <vTaskSwitchContext>
	prvTaskExitError();
 800a930:	f7ff ff1c 	bl	800a76c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	e000ed00 	.word	0xe000ed00
 800a944:	410fc271 	.word	0x410fc271
 800a948:	410fc270 	.word	0x410fc270
 800a94c:	e000e400 	.word	0xe000e400
 800a950:	200024e4 	.word	0x200024e4
 800a954:	200024e8 	.word	0x200024e8
 800a958:	e000ed20 	.word	0xe000ed20
 800a95c:	200000b8 	.word	0x200000b8
 800a960:	e000ef34 	.word	0xe000ef34

0800a964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	607b      	str	r3, [r7, #4]
}
 800a97c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a97e:	4b0f      	ldr	r3, [pc, #60]	; (800a9bc <vPortEnterCritical+0x58>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3301      	adds	r3, #1
 800a984:	4a0d      	ldr	r2, [pc, #52]	; (800a9bc <vPortEnterCritical+0x58>)
 800a986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a988:	4b0c      	ldr	r3, [pc, #48]	; (800a9bc <vPortEnterCritical+0x58>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d10f      	bne.n	800a9b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a990:	4b0b      	ldr	r3, [pc, #44]	; (800a9c0 <vPortEnterCritical+0x5c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00a      	beq.n	800a9b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	603b      	str	r3, [r7, #0]
}
 800a9ac:	bf00      	nop
 800a9ae:	e7fe      	b.n	800a9ae <vPortEnterCritical+0x4a>
	}
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	200000b8 	.word	0x200000b8
 800a9c0:	e000ed04 	.word	0xe000ed04

0800a9c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9ca:	4b12      	ldr	r3, [pc, #72]	; (800aa14 <vPortExitCritical+0x50>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10a      	bne.n	800a9e8 <vPortExitCritical+0x24>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	607b      	str	r3, [r7, #4]
}
 800a9e4:	bf00      	nop
 800a9e6:	e7fe      	b.n	800a9e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9e8:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <vPortExitCritical+0x50>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <vPortExitCritical+0x50>)
 800a9f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9f2:	4b08      	ldr	r3, [pc, #32]	; (800aa14 <vPortExitCritical+0x50>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d105      	bne.n	800aa06 <vPortExitCritical+0x42>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	f383 8811 	msr	BASEPRI, r3
}
 800aa04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa06:	bf00      	nop
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	200000b8 	.word	0x200000b8
	...

0800aa20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa20:	f3ef 8009 	mrs	r0, PSP
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	4b15      	ldr	r3, [pc, #84]	; (800aa80 <pxCurrentTCBConst>)
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	f01e 0f10 	tst.w	lr, #16
 800aa30:	bf08      	it	eq
 800aa32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3a:	6010      	str	r0, [r2, #0]
 800aa3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa44:	f380 8811 	msr	BASEPRI, r0
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f7fe ffb4 	bl	80099bc <vTaskSwitchContext>
 800aa54:	f04f 0000 	mov.w	r0, #0
 800aa58:	f380 8811 	msr	BASEPRI, r0
 800aa5c:	bc09      	pop	{r0, r3}
 800aa5e:	6819      	ldr	r1, [r3, #0]
 800aa60:	6808      	ldr	r0, [r1, #0]
 800aa62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa66:	f01e 0f10 	tst.w	lr, #16
 800aa6a:	bf08      	it	eq
 800aa6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa70:	f380 8809 	msr	PSP, r0
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	f3af 8000 	nop.w

0800aa80 <pxCurrentTCBConst>:
 800aa80:	20001eb8 	.word	0x20001eb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop

0800aa88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	607b      	str	r3, [r7, #4]
}
 800aaa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aaa2:	f7fe fed1 	bl	8009848 <xTaskIncrementTick>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d003      	beq.n	800aab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aaac:	4b06      	ldr	r3, [pc, #24]	; (800aac8 <xPortSysTickHandler+0x40>)
 800aaae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	2300      	movs	r3, #0
 800aab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	f383 8811 	msr	BASEPRI, r3
}
 800aabe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aac0:	bf00      	nop
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aacc:	b480      	push	{r7}
 800aace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aad0:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <vPortSetupTimerInterrupt+0x34>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aad6:	4b0b      	ldr	r3, [pc, #44]	; (800ab04 <vPortSetupTimerInterrupt+0x38>)
 800aad8:	2200      	movs	r2, #0
 800aada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aadc:	4b0a      	ldr	r3, [pc, #40]	; (800ab08 <vPortSetupTimerInterrupt+0x3c>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a0a      	ldr	r2, [pc, #40]	; (800ab0c <vPortSetupTimerInterrupt+0x40>)
 800aae2:	fba2 2303 	umull	r2, r3, r2, r3
 800aae6:	099b      	lsrs	r3, r3, #6
 800aae8:	4a09      	ldr	r2, [pc, #36]	; (800ab10 <vPortSetupTimerInterrupt+0x44>)
 800aaea:	3b01      	subs	r3, #1
 800aaec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aaee:	4b04      	ldr	r3, [pc, #16]	; (800ab00 <vPortSetupTimerInterrupt+0x34>)
 800aaf0:	2207      	movs	r2, #7
 800aaf2:	601a      	str	r2, [r3, #0]
}
 800aaf4:	bf00      	nop
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	e000e010 	.word	0xe000e010
 800ab04:	e000e018 	.word	0xe000e018
 800ab08:	20000004 	.word	0x20000004
 800ab0c:	10624dd3 	.word	0x10624dd3
 800ab10:	e000e014 	.word	0xe000e014

0800ab14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab24 <vPortEnableVFP+0x10>
 800ab18:	6801      	ldr	r1, [r0, #0]
 800ab1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab1e:	6001      	str	r1, [r0, #0]
 800ab20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab22:	bf00      	nop
 800ab24:	e000ed88 	.word	0xe000ed88

0800ab28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab2e:	f3ef 8305 	mrs	r3, IPSR
 800ab32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2b0f      	cmp	r3, #15
 800ab38:	d914      	bls.n	800ab64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab3a:	4a17      	ldr	r2, [pc, #92]	; (800ab98 <vPortValidateInterruptPriority+0x70>)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	4413      	add	r3, r2
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab44:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <vPortValidateInterruptPriority+0x74>)
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	7afa      	ldrb	r2, [r7, #11]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d20a      	bcs.n	800ab64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	607b      	str	r3, [r7, #4]
}
 800ab60:	bf00      	nop
 800ab62:	e7fe      	b.n	800ab62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab64:	4b0e      	ldr	r3, [pc, #56]	; (800aba0 <vPortValidateInterruptPriority+0x78>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab6c:	4b0d      	ldr	r3, [pc, #52]	; (800aba4 <vPortValidateInterruptPriority+0x7c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d90a      	bls.n	800ab8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	603b      	str	r3, [r7, #0]
}
 800ab86:	bf00      	nop
 800ab88:	e7fe      	b.n	800ab88 <vPortValidateInterruptPriority+0x60>
	}
 800ab8a:	bf00      	nop
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	e000e3f0 	.word	0xe000e3f0
 800ab9c:	200024e4 	.word	0x200024e4
 800aba0:	e000ed0c 	.word	0xe000ed0c
 800aba4:	200024e8 	.word	0x200024e8

0800aba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08a      	sub	sp, #40	; 0x28
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abb0:	2300      	movs	r3, #0
 800abb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abb4:	f7fe fd8c 	bl	80096d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abb8:	4b5b      	ldr	r3, [pc, #364]	; (800ad28 <pvPortMalloc+0x180>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abc0:	f000 f920 	bl	800ae04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abc4:	4b59      	ldr	r3, [pc, #356]	; (800ad2c <pvPortMalloc+0x184>)
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4013      	ands	r3, r2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f040 8093 	bne.w	800acf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d01d      	beq.n	800ac14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800abd8:	2208      	movs	r2, #8
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4413      	add	r3, r2
 800abde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f003 0307 	and.w	r3, r3, #7
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d014      	beq.n	800ac14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f023 0307 	bic.w	r3, r3, #7
 800abf0:	3308      	adds	r3, #8
 800abf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f003 0307 	and.w	r3, r3, #7
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00a      	beq.n	800ac14 <pvPortMalloc+0x6c>
	__asm volatile
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	617b      	str	r3, [r7, #20]
}
 800ac10:	bf00      	nop
 800ac12:	e7fe      	b.n	800ac12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d06e      	beq.n	800acf8 <pvPortMalloc+0x150>
 800ac1a:	4b45      	ldr	r3, [pc, #276]	; (800ad30 <pvPortMalloc+0x188>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d869      	bhi.n	800acf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac24:	4b43      	ldr	r3, [pc, #268]	; (800ad34 <pvPortMalloc+0x18c>)
 800ac26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac28:	4b42      	ldr	r3, [pc, #264]	; (800ad34 <pvPortMalloc+0x18c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac2e:	e004      	b.n	800ac3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d903      	bls.n	800ac4c <pvPortMalloc+0xa4>
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1f1      	bne.n	800ac30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac4c:	4b36      	ldr	r3, [pc, #216]	; (800ad28 <pvPortMalloc+0x180>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d050      	beq.n	800acf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2208      	movs	r2, #8
 800ac5c:	4413      	add	r3, r2
 800ac5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	1ad2      	subs	r2, r2, r3
 800ac70:	2308      	movs	r3, #8
 800ac72:	005b      	lsls	r3, r3, #1
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d91f      	bls.n	800acb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	f003 0307 	and.w	r3, r3, #7
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00a      	beq.n	800aca0 <pvPortMalloc+0xf8>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	613b      	str	r3, [r7, #16]
}
 800ac9c:	bf00      	nop
 800ac9e:	e7fe      	b.n	800ac9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca2:	685a      	ldr	r2, [r3, #4]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	1ad2      	subs	r2, r2, r3
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800acac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acb2:	69b8      	ldr	r0, [r7, #24]
 800acb4:	f000 f908 	bl	800aec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acb8:	4b1d      	ldr	r3, [pc, #116]	; (800ad30 <pvPortMalloc+0x188>)
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	4a1b      	ldr	r2, [pc, #108]	; (800ad30 <pvPortMalloc+0x188>)
 800acc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acc6:	4b1a      	ldr	r3, [pc, #104]	; (800ad30 <pvPortMalloc+0x188>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	4b1b      	ldr	r3, [pc, #108]	; (800ad38 <pvPortMalloc+0x190>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d203      	bcs.n	800acda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acd2:	4b17      	ldr	r3, [pc, #92]	; (800ad30 <pvPortMalloc+0x188>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a18      	ldr	r2, [pc, #96]	; (800ad38 <pvPortMalloc+0x190>)
 800acd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acdc:	685a      	ldr	r2, [r3, #4]
 800acde:	4b13      	ldr	r3, [pc, #76]	; (800ad2c <pvPortMalloc+0x184>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	431a      	orrs	r2, r3
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acea:	2200      	movs	r2, #0
 800acec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acee:	4b13      	ldr	r3, [pc, #76]	; (800ad3c <pvPortMalloc+0x194>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3301      	adds	r3, #1
 800acf4:	4a11      	ldr	r2, [pc, #68]	; (800ad3c <pvPortMalloc+0x194>)
 800acf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acf8:	f7fe fcf8 	bl	80096ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	f003 0307 	and.w	r3, r3, #7
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00a      	beq.n	800ad1c <pvPortMalloc+0x174>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60fb      	str	r3, [r7, #12]
}
 800ad18:	bf00      	nop
 800ad1a:	e7fe      	b.n	800ad1a <pvPortMalloc+0x172>
	return pvReturn;
 800ad1c:	69fb      	ldr	r3, [r7, #28]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3728      	adds	r7, #40	; 0x28
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	200060f4 	.word	0x200060f4
 800ad2c:	20006108 	.word	0x20006108
 800ad30:	200060f8 	.word	0x200060f8
 800ad34:	200060ec 	.word	0x200060ec
 800ad38:	200060fc 	.word	0x200060fc
 800ad3c:	20006100 	.word	0x20006100

0800ad40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d04d      	beq.n	800adee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad52:	2308      	movs	r3, #8
 800ad54:	425b      	negs	r3, r3
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	4413      	add	r3, r2
 800ad5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	4b24      	ldr	r3, [pc, #144]	; (800adf8 <vPortFree+0xb8>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4013      	ands	r3, r2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10a      	bne.n	800ad84 <vPortFree+0x44>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	60fb      	str	r3, [r7, #12]
}
 800ad80:	bf00      	nop
 800ad82:	e7fe      	b.n	800ad82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00a      	beq.n	800ada2 <vPortFree+0x62>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	60bb      	str	r3, [r7, #8]
}
 800ad9e:	bf00      	nop
 800ada0:	e7fe      	b.n	800ada0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	685a      	ldr	r2, [r3, #4]
 800ada6:	4b14      	ldr	r3, [pc, #80]	; (800adf8 <vPortFree+0xb8>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4013      	ands	r3, r2
 800adac:	2b00      	cmp	r3, #0
 800adae:	d01e      	beq.n	800adee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d11a      	bne.n	800adee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	4b0e      	ldr	r3, [pc, #56]	; (800adf8 <vPortFree+0xb8>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	43db      	mvns	r3, r3
 800adc2:	401a      	ands	r2, r3
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800adc8:	f7fe fc82 	bl	80096d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	685a      	ldr	r2, [r3, #4]
 800add0:	4b0a      	ldr	r3, [pc, #40]	; (800adfc <vPortFree+0xbc>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4413      	add	r3, r2
 800add6:	4a09      	ldr	r2, [pc, #36]	; (800adfc <vPortFree+0xbc>)
 800add8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adda:	6938      	ldr	r0, [r7, #16]
 800addc:	f000 f874 	bl	800aec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ade0:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <vPortFree+0xc0>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3301      	adds	r3, #1
 800ade6:	4a06      	ldr	r2, [pc, #24]	; (800ae00 <vPortFree+0xc0>)
 800ade8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adea:	f7fe fc7f 	bl	80096ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adee:	bf00      	nop
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20006108 	.word	0x20006108
 800adfc:	200060f8 	.word	0x200060f8
 800ae00:	20006104 	.word	0x20006104

0800ae04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ae0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae10:	4b27      	ldr	r3, [pc, #156]	; (800aeb0 <prvHeapInit+0xac>)
 800ae12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00c      	beq.n	800ae38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	3307      	adds	r3, #7
 800ae22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f023 0307 	bic.w	r3, r3, #7
 800ae2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	4a1f      	ldr	r2, [pc, #124]	; (800aeb0 <prvHeapInit+0xac>)
 800ae34:	4413      	add	r3, r2
 800ae36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae3c:	4a1d      	ldr	r2, [pc, #116]	; (800aeb4 <prvHeapInit+0xb0>)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae42:	4b1c      	ldr	r3, [pc, #112]	; (800aeb4 <prvHeapInit+0xb0>)
 800ae44:	2200      	movs	r2, #0
 800ae46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae50:	2208      	movs	r2, #8
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	1a9b      	subs	r3, r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f023 0307 	bic.w	r3, r3, #7
 800ae5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4a15      	ldr	r2, [pc, #84]	; (800aeb8 <prvHeapInit+0xb4>)
 800ae64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae66:	4b14      	ldr	r3, [pc, #80]	; (800aeb8 <prvHeapInit+0xb4>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae6e:	4b12      	ldr	r3, [pc, #72]	; (800aeb8 <prvHeapInit+0xb4>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	1ad2      	subs	r2, r2, r3
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae84:	4b0c      	ldr	r3, [pc, #48]	; (800aeb8 <prvHeapInit+0xb4>)
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	4a0a      	ldr	r2, [pc, #40]	; (800aebc <prvHeapInit+0xb8>)
 800ae92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	4a09      	ldr	r2, [pc, #36]	; (800aec0 <prvHeapInit+0xbc>)
 800ae9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae9c:	4b09      	ldr	r3, [pc, #36]	; (800aec4 <prvHeapInit+0xc0>)
 800ae9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aea2:	601a      	str	r2, [r3, #0]
}
 800aea4:	bf00      	nop
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	200024ec 	.word	0x200024ec
 800aeb4:	200060ec 	.word	0x200060ec
 800aeb8:	200060f4 	.word	0x200060f4
 800aebc:	200060fc 	.word	0x200060fc
 800aec0:	200060f8 	.word	0x200060f8
 800aec4:	20006108 	.word	0x20006108

0800aec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aed0:	4b28      	ldr	r3, [pc, #160]	; (800af74 <prvInsertBlockIntoFreeList+0xac>)
 800aed2:	60fb      	str	r3, [r7, #12]
 800aed4:	e002      	b.n	800aedc <prvInsertBlockIntoFreeList+0x14>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d8f7      	bhi.n	800aed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	4413      	add	r3, r2
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d108      	bne.n	800af0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	441a      	add	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	441a      	add	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d118      	bne.n	800af50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	4b15      	ldr	r3, [pc, #84]	; (800af78 <prvInsertBlockIntoFreeList+0xb0>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	429a      	cmp	r2, r3
 800af28:	d00d      	beq.n	800af46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	441a      	add	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	e008      	b.n	800af58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af46:	4b0c      	ldr	r3, [pc, #48]	; (800af78 <prvInsertBlockIntoFreeList+0xb0>)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	e003      	b.n	800af58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d002      	beq.n	800af66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af66:	bf00      	nop
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	200060ec 	.word	0x200060ec
 800af78:	200060f4 	.word	0x200060f4

0800af7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af80:	2200      	movs	r2, #0
 800af82:	4912      	ldr	r1, [pc, #72]	; (800afcc <MX_USB_DEVICE_Init+0x50>)
 800af84:	4812      	ldr	r0, [pc, #72]	; (800afd0 <MX_USB_DEVICE_Init+0x54>)
 800af86:	f7fb ffc9 	bl	8006f1c <USBD_Init>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af90:	f7f5 fc9c 	bl	80008cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800af94:	490f      	ldr	r1, [pc, #60]	; (800afd4 <MX_USB_DEVICE_Init+0x58>)
 800af96:	480e      	ldr	r0, [pc, #56]	; (800afd0 <MX_USB_DEVICE_Init+0x54>)
 800af98:	f7fb fff0 	bl	8006f7c <USBD_RegisterClass>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800afa2:	f7f5 fc93 	bl	80008cc <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800afa6:	490c      	ldr	r1, [pc, #48]	; (800afd8 <MX_USB_DEVICE_Init+0x5c>)
 800afa8:	4809      	ldr	r0, [pc, #36]	; (800afd0 <MX_USB_DEVICE_Init+0x54>)
 800afaa:	f7fb ff69 	bl	8006e80 <USBD_AUDIO_RegisterInterface>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d001      	beq.n	800afb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800afb4:	f7f5 fc8a 	bl	80008cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800afb8:	4805      	ldr	r0, [pc, #20]	; (800afd0 <MX_USB_DEVICE_Init+0x54>)
 800afba:	f7fc f815 	bl	8006fe8 <USBD_Start>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800afc4:	f7f5 fc82 	bl	80008cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800afc8:	bf00      	nop
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	200000d8 	.word	0x200000d8
 800afd0:	2000610c 	.word	0x2000610c
 800afd4:	20000010 	.word	0x20000010
 800afd8:	200000bc 	.word	0x200000bc

0800afdc <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800afe8:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800afea:	4618      	mov	r0, r3
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr

0800aff6 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800aff6:	b480      	push	{r7}
 800aff8:	b083      	sub	sp, #12
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800affe:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800b000:	4618      	mov	r0, r3
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	4613      	mov	r3, r2
 800b018:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800b01a:	79fb      	ldrb	r3, [r7, #7]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d001      	beq.n	800b024 <AUDIO_AudioCmd_FS+0x18>
 800b020:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800b022:	e000      	b.n	800b026 <AUDIO_AudioCmd_FS+0x1a>
    break;
 800b024:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800b026:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3714      	adds	r7, #20
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800b03e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b040:	4618      	mov	r0, r3
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	4603      	mov	r3, r0
 800b054:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800b056:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	4613      	mov	r3, r2
 800b070:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800b072:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b074:	4618      	mov	r0, r3
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800b080:	b480      	push	{r7}
 800b082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800b084:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b086:	4618      	mov	r0, r3
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	6039      	str	r1, [r7, #0]
 800b09a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	2212      	movs	r2, #18
 800b0a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b0a2:	4b03      	ldr	r3, [pc, #12]	; (800b0b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	200000f4 	.word	0x200000f4

0800b0b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	6039      	str	r1, [r7, #0]
 800b0be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	2204      	movs	r2, #4
 800b0c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b0c6:	4b03      	ldr	r3, [pc, #12]	; (800b0d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	20000108 	.word	0x20000108

0800b0d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	4603      	mov	r3, r0
 800b0e0:	6039      	str	r1, [r7, #0]
 800b0e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0e4:	79fb      	ldrb	r3, [r7, #7]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d105      	bne.n	800b0f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	4907      	ldr	r1, [pc, #28]	; (800b10c <USBD_FS_ProductStrDescriptor+0x34>)
 800b0ee:	4808      	ldr	r0, [pc, #32]	; (800b110 <USBD_FS_ProductStrDescriptor+0x38>)
 800b0f0:	f7fd f8f2 	bl	80082d8 <USBD_GetString>
 800b0f4:	e004      	b.n	800b100 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	4904      	ldr	r1, [pc, #16]	; (800b10c <USBD_FS_ProductStrDescriptor+0x34>)
 800b0fa:	4805      	ldr	r0, [pc, #20]	; (800b110 <USBD_FS_ProductStrDescriptor+0x38>)
 800b0fc:	f7fd f8ec 	bl	80082d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b100:	4b02      	ldr	r3, [pc, #8]	; (800b10c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b102:	4618      	mov	r0, r3
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	200063e8 	.word	0x200063e8
 800b110:	0800bb14 	.word	0x0800bb14

0800b114 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	6039      	str	r1, [r7, #0]
 800b11e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b120:	683a      	ldr	r2, [r7, #0]
 800b122:	4904      	ldr	r1, [pc, #16]	; (800b134 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b124:	4804      	ldr	r0, [pc, #16]	; (800b138 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b126:	f7fd f8d7 	bl	80082d8 <USBD_GetString>
  return USBD_StrDesc;
 800b12a:	4b02      	ldr	r3, [pc, #8]	; (800b134 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	200063e8 	.word	0x200063e8
 800b138:	0800bb28 	.word	0x0800bb28

0800b13c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	4603      	mov	r3, r0
 800b144:	6039      	str	r1, [r7, #0]
 800b146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	221a      	movs	r2, #26
 800b14c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b14e:	f000 f843 	bl	800b1d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b152:	4b02      	ldr	r3, [pc, #8]	; (800b15c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b154:	4618      	mov	r0, r3
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	2000010c 	.word	0x2000010c

0800b160 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	4603      	mov	r3, r0
 800b168:	6039      	str	r1, [r7, #0]
 800b16a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d105      	bne.n	800b17e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	4907      	ldr	r1, [pc, #28]	; (800b194 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b176:	4808      	ldr	r0, [pc, #32]	; (800b198 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b178:	f7fd f8ae 	bl	80082d8 <USBD_GetString>
 800b17c:	e004      	b.n	800b188 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b17e:	683a      	ldr	r2, [r7, #0]
 800b180:	4904      	ldr	r1, [pc, #16]	; (800b194 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b182:	4805      	ldr	r0, [pc, #20]	; (800b198 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b184:	f7fd f8a8 	bl	80082d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b188:	4b02      	ldr	r3, [pc, #8]	; (800b194 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	200063e8 	.word	0x200063e8
 800b198:	0800bb3c 	.word	0x0800bb3c

0800b19c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	6039      	str	r1, [r7, #0]
 800b1a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b1a8:	79fb      	ldrb	r3, [r7, #7]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d105      	bne.n	800b1ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	4907      	ldr	r1, [pc, #28]	; (800b1d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b1b2:	4808      	ldr	r0, [pc, #32]	; (800b1d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b1b4:	f7fd f890 	bl	80082d8 <USBD_GetString>
 800b1b8:	e004      	b.n	800b1c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	4904      	ldr	r1, [pc, #16]	; (800b1d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b1be:	4805      	ldr	r0, [pc, #20]	; (800b1d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b1c0:	f7fd f88a 	bl	80082d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1c4:	4b02      	ldr	r3, [pc, #8]	; (800b1d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	200063e8 	.word	0x200063e8
 800b1d4:	0800bb4c 	.word	0x0800bb4c

0800b1d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1de:	4b0f      	ldr	r3, [pc, #60]	; (800b21c <Get_SerialNum+0x44>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b1e4:	4b0e      	ldr	r3, [pc, #56]	; (800b220 <Get_SerialNum+0x48>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b1ea:	4b0e      	ldr	r3, [pc, #56]	; (800b224 <Get_SerialNum+0x4c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d009      	beq.n	800b212 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b1fe:	2208      	movs	r2, #8
 800b200:	4909      	ldr	r1, [pc, #36]	; (800b228 <Get_SerialNum+0x50>)
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f000 f814 	bl	800b230 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b208:	2204      	movs	r2, #4
 800b20a:	4908      	ldr	r1, [pc, #32]	; (800b22c <Get_SerialNum+0x54>)
 800b20c:	68b8      	ldr	r0, [r7, #8]
 800b20e:	f000 f80f 	bl	800b230 <IntToUnicode>
  }
}
 800b212:	bf00      	nop
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	1fff7a10 	.word	0x1fff7a10
 800b220:	1fff7a14 	.word	0x1fff7a14
 800b224:	1fff7a18 	.word	0x1fff7a18
 800b228:	2000010e 	.word	0x2000010e
 800b22c:	2000011e 	.word	0x2000011e

0800b230 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b230:	b480      	push	{r7}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	4613      	mov	r3, r2
 800b23c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b242:	2300      	movs	r3, #0
 800b244:	75fb      	strb	r3, [r7, #23]
 800b246:	e027      	b.n	800b298 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	0f1b      	lsrs	r3, r3, #28
 800b24c:	2b09      	cmp	r3, #9
 800b24e:	d80b      	bhi.n	800b268 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	0f1b      	lsrs	r3, r3, #28
 800b254:	b2da      	uxtb	r2, r3
 800b256:	7dfb      	ldrb	r3, [r7, #23]
 800b258:	005b      	lsls	r3, r3, #1
 800b25a:	4619      	mov	r1, r3
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	440b      	add	r3, r1
 800b260:	3230      	adds	r2, #48	; 0x30
 800b262:	b2d2      	uxtb	r2, r2
 800b264:	701a      	strb	r2, [r3, #0]
 800b266:	e00a      	b.n	800b27e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	0f1b      	lsrs	r3, r3, #28
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	005b      	lsls	r3, r3, #1
 800b272:	4619      	mov	r1, r3
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	440b      	add	r3, r1
 800b278:	3237      	adds	r2, #55	; 0x37
 800b27a:	b2d2      	uxtb	r2, r2
 800b27c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	011b      	lsls	r3, r3, #4
 800b282:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b284:	7dfb      	ldrb	r3, [r7, #23]
 800b286:	005b      	lsls	r3, r3, #1
 800b288:	3301      	adds	r3, #1
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	4413      	add	r3, r2
 800b28e:	2200      	movs	r2, #0
 800b290:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b292:	7dfb      	ldrb	r3, [r7, #23]
 800b294:	3301      	adds	r3, #1
 800b296:	75fb      	strb	r3, [r7, #23]
 800b298:	7dfa      	ldrb	r2, [r7, #23]
 800b29a:	79fb      	ldrb	r3, [r7, #7]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d3d3      	bcc.n	800b248 <IntToUnicode+0x18>
  }
}
 800b2a0:	bf00      	nop
 800b2a2:	bf00      	nop
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
	...

0800b2b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08a      	sub	sp, #40	; 0x28
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2b8:	f107 0314 	add.w	r3, r7, #20
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
 800b2c0:	605a      	str	r2, [r3, #4]
 800b2c2:	609a      	str	r2, [r3, #8]
 800b2c4:	60da      	str	r2, [r3, #12]
 800b2c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2d0:	d13a      	bne.n	800b348 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	613b      	str	r3, [r7, #16]
 800b2d6:	4b1e      	ldr	r3, [pc, #120]	; (800b350 <HAL_PCD_MspInit+0xa0>)
 800b2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2da:	4a1d      	ldr	r2, [pc, #116]	; (800b350 <HAL_PCD_MspInit+0xa0>)
 800b2dc:	f043 0301 	orr.w	r3, r3, #1
 800b2e0:	6313      	str	r3, [r2, #48]	; 0x30
 800b2e2:	4b1b      	ldr	r3, [pc, #108]	; (800b350 <HAL_PCD_MspInit+0xa0>)
 800b2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e6:	f003 0301 	and.w	r3, r3, #1
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800b2ee:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800b2f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b300:	230a      	movs	r3, #10
 800b302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b304:	f107 0314 	add.w	r3, r7, #20
 800b308:	4619      	mov	r1, r3
 800b30a:	4812      	ldr	r0, [pc, #72]	; (800b354 <HAL_PCD_MspInit+0xa4>)
 800b30c:	f7f6 f986 	bl	800161c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b310:	4b0f      	ldr	r3, [pc, #60]	; (800b350 <HAL_PCD_MspInit+0xa0>)
 800b312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b314:	4a0e      	ldr	r2, [pc, #56]	; (800b350 <HAL_PCD_MspInit+0xa0>)
 800b316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b31a:	6353      	str	r3, [r2, #52]	; 0x34
 800b31c:	2300      	movs	r3, #0
 800b31e:	60fb      	str	r3, [r7, #12]
 800b320:	4b0b      	ldr	r3, [pc, #44]	; (800b350 <HAL_PCD_MspInit+0xa0>)
 800b322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b324:	4a0a      	ldr	r2, [pc, #40]	; (800b350 <HAL_PCD_MspInit+0xa0>)
 800b326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b32a:	6453      	str	r3, [r2, #68]	; 0x44
 800b32c:	4b08      	ldr	r3, [pc, #32]	; (800b350 <HAL_PCD_MspInit+0xa0>)
 800b32e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b334:	60fb      	str	r3, [r7, #12]
 800b336:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b338:	2200      	movs	r2, #0
 800b33a:	2105      	movs	r1, #5
 800b33c:	2043      	movs	r0, #67	; 0x43
 800b33e:	f7f5 fdd3 	bl	8000ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b342:	2043      	movs	r0, #67	; 0x43
 800b344:	f7f5 fdec 	bl	8000f20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b348:	bf00      	nop
 800b34a:	3728      	adds	r7, #40	; 0x28
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	40023800 	.word	0x40023800
 800b354:	40020000 	.word	0x40020000

0800b358 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b36c:	4619      	mov	r1, r3
 800b36e:	4610      	mov	r0, r2
 800b370:	f7fb fe87 	bl	8007082 <USBD_LL_SetupStage>
}
 800b374:	bf00      	nop
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b38e:	78fa      	ldrb	r2, [r7, #3]
 800b390:	6879      	ldr	r1, [r7, #4]
 800b392:	4613      	mov	r3, r2
 800b394:	00db      	lsls	r3, r3, #3
 800b396:	4413      	add	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	440b      	add	r3, r1
 800b39c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	78fb      	ldrb	r3, [r7, #3]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	f7fb fec1 	bl	800712c <USBD_LL_DataOutStage>
}
 800b3aa:	bf00      	nop
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b082      	sub	sp, #8
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b3c4:	78fa      	ldrb	r2, [r7, #3]
 800b3c6:	6879      	ldr	r1, [r7, #4]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	00db      	lsls	r3, r3, #3
 800b3cc:	4413      	add	r3, r2
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	440b      	add	r3, r1
 800b3d2:	3320      	adds	r3, #32
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	78fb      	ldrb	r3, [r7, #3]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	f7fb ff5a 	bl	8007292 <USBD_LL_DataInStage>
}
 800b3de:	bf00      	nop
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7fc f894 	bl	8007522 <USBD_LL_SOF>
}
 800b3fa:	bf00      	nop
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b40a:	2301      	movs	r3, #1
 800b40c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	79db      	ldrb	r3, [r3, #7]
 800b412:	2b02      	cmp	r3, #2
 800b414:	d001      	beq.n	800b41a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b416:	f7f5 fa59 	bl	80008cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b420:	7bfa      	ldrb	r2, [r7, #15]
 800b422:	4611      	mov	r1, r2
 800b424:	4618      	mov	r0, r3
 800b426:	f7fc f838 	bl	800749a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b430:	4618      	mov	r0, r3
 800b432:	f7fb ffe0 	bl	80073f6 <USBD_LL_Reset>
}
 800b436:	bf00      	nop
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
	...

0800b440 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fc f833 	bl	80074ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	6812      	ldr	r2, [r2, #0]
 800b462:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b466:	f043 0301 	orr.w	r3, r3, #1
 800b46a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	7adb      	ldrb	r3, [r3, #11]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d005      	beq.n	800b480 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b474:	4b04      	ldr	r3, [pc, #16]	; (800b488 <HAL_PCD_SuspendCallback+0x48>)
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	4a03      	ldr	r2, [pc, #12]	; (800b488 <HAL_PCD_SuspendCallback+0x48>)
 800b47a:	f043 0306 	orr.w	r3, r3, #6
 800b47e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	e000ed00 	.word	0xe000ed00

0800b48c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fc f829 	bl	80074f2 <USBD_LL_Resume>
}
 800b4a0:	bf00      	nop
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b4ba:	78fa      	ldrb	r2, [r7, #3]
 800b4bc:	4611      	mov	r1, r2
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fc f881 	bl	80075c6 <USBD_LL_IsoOUTIncomplete>
}
 800b4c4:	bf00      	nop
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b4de:	78fa      	ldrb	r2, [r7, #3]
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fc f83d 	bl	8007562 <USBD_LL_IsoINIncomplete>
}
 800b4e8:	bf00      	nop
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fc f893 	bl	800762a <USBD_LL_DevConnected>
}
 800b504:	bf00      	nop
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fc f890 	bl	8007640 <USBD_LL_DevDisconnected>
}
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d13c      	bne.n	800b5b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b538:	4a20      	ldr	r2, [pc, #128]	; (800b5bc <USBD_LL_Init+0x94>)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a1e      	ldr	r2, [pc, #120]	; (800b5bc <USBD_LL_Init+0x94>)
 800b544:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b548:	4b1c      	ldr	r3, [pc, #112]	; (800b5bc <USBD_LL_Init+0x94>)
 800b54a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b54e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b550:	4b1a      	ldr	r3, [pc, #104]	; (800b5bc <USBD_LL_Init+0x94>)
 800b552:	2204      	movs	r2, #4
 800b554:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b556:	4b19      	ldr	r3, [pc, #100]	; (800b5bc <USBD_LL_Init+0x94>)
 800b558:	2202      	movs	r2, #2
 800b55a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b55c:	4b17      	ldr	r3, [pc, #92]	; (800b5bc <USBD_LL_Init+0x94>)
 800b55e:	2200      	movs	r2, #0
 800b560:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b562:	4b16      	ldr	r3, [pc, #88]	; (800b5bc <USBD_LL_Init+0x94>)
 800b564:	2202      	movs	r2, #2
 800b566:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b568:	4b14      	ldr	r3, [pc, #80]	; (800b5bc <USBD_LL_Init+0x94>)
 800b56a:	2201      	movs	r2, #1
 800b56c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b56e:	4b13      	ldr	r3, [pc, #76]	; (800b5bc <USBD_LL_Init+0x94>)
 800b570:	2200      	movs	r2, #0
 800b572:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b574:	4b11      	ldr	r3, [pc, #68]	; (800b5bc <USBD_LL_Init+0x94>)
 800b576:	2200      	movs	r2, #0
 800b578:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b57a:	4b10      	ldr	r3, [pc, #64]	; (800b5bc <USBD_LL_Init+0x94>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b580:	4b0e      	ldr	r3, [pc, #56]	; (800b5bc <USBD_LL_Init+0x94>)
 800b582:	2200      	movs	r2, #0
 800b584:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b586:	480d      	ldr	r0, [pc, #52]	; (800b5bc <USBD_LL_Init+0x94>)
 800b588:	f7f6 ff8c 	bl	80024a4 <HAL_PCD_Init>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d001      	beq.n	800b596 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b592:	f7f5 f99b 	bl	80008cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b596:	2180      	movs	r1, #128	; 0x80
 800b598:	4808      	ldr	r0, [pc, #32]	; (800b5bc <USBD_LL_Init+0x94>)
 800b59a:	f7f8 f9e4 	bl	8003966 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b59e:	2240      	movs	r2, #64	; 0x40
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	4806      	ldr	r0, [pc, #24]	; (800b5bc <USBD_LL_Init+0x94>)
 800b5a4:	f7f8 f998 	bl	80038d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b5a8:	2280      	movs	r2, #128	; 0x80
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	4803      	ldr	r0, [pc, #12]	; (800b5bc <USBD_LL_Init+0x94>)
 800b5ae:	f7f8 f993 	bl	80038d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	200065e8 	.word	0x200065e8

0800b5c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7f7 f873 	bl	80026c2 <HAL_PCD_Start>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 f962 	bl	800b8ac <USBD_Get_USB_Status>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b084      	sub	sp, #16
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	4608      	mov	r0, r1
 800b600:	4611      	mov	r1, r2
 800b602:	461a      	mov	r2, r3
 800b604:	4603      	mov	r3, r0
 800b606:	70fb      	strb	r3, [r7, #3]
 800b608:	460b      	mov	r3, r1
 800b60a:	70bb      	strb	r3, [r7, #2]
 800b60c:	4613      	mov	r3, r2
 800b60e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b614:	2300      	movs	r3, #0
 800b616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b61e:	78bb      	ldrb	r3, [r7, #2]
 800b620:	883a      	ldrh	r2, [r7, #0]
 800b622:	78f9      	ldrb	r1, [r7, #3]
 800b624:	f7f7 fd47 	bl	80030b6 <HAL_PCD_EP_Open>
 800b628:	4603      	mov	r3, r0
 800b62a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 f93c 	bl	800b8ac <USBD_Get_USB_Status>
 800b634:	4603      	mov	r3, r0
 800b636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b638:	7bbb      	ldrb	r3, [r7, #14]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b084      	sub	sp, #16
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	460b      	mov	r3, r1
 800b64c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b64e:	2300      	movs	r3, #0
 800b650:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b652:	2300      	movs	r3, #0
 800b654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b65c:	78fa      	ldrb	r2, [r7, #3]
 800b65e:	4611      	mov	r1, r2
 800b660:	4618      	mov	r0, r3
 800b662:	f7f7 fd90 	bl	8003186 <HAL_PCD_EP_Close>
 800b666:	4603      	mov	r3, r0
 800b668:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f000 f91d 	bl	800b8ac <USBD_Get_USB_Status>
 800b672:	4603      	mov	r3, r0
 800b674:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b676:	7bbb      	ldrb	r3, [r7, #14]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	460b      	mov	r3, r1
 800b68a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b69a:	78fa      	ldrb	r2, [r7, #3]
 800b69c:	4611      	mov	r1, r2
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7f7 ff32 	bl	8003508 <HAL_PCD_EP_Flush>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 f8fe 	bl	800b8ac <USBD_Get_USB_Status>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6d8:	78fa      	ldrb	r2, [r7, #3]
 800b6da:	4611      	mov	r1, r2
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7f7 fe29 	bl	8003334 <HAL_PCD_EP_SetStall>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6e6:	7bfb      	ldrb	r3, [r7, #15]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f000 f8df 	bl	800b8ac <USBD_Get_USB_Status>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b716:	78fa      	ldrb	r2, [r7, #3]
 800b718:	4611      	mov	r1, r2
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7f7 fe6d 	bl	80033fa <HAL_PCD_EP_ClrStall>
 800b720:	4603      	mov	r3, r0
 800b722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b724:	7bfb      	ldrb	r3, [r7, #15]
 800b726:	4618      	mov	r0, r3
 800b728:	f000 f8c0 	bl	800b8ac <USBD_Get_USB_Status>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b730:	7bbb      	ldrb	r3, [r7, #14]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b085      	sub	sp, #20
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	460b      	mov	r3, r1
 800b744:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b74c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b74e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b752:	2b00      	cmp	r3, #0
 800b754:	da0b      	bge.n	800b76e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b756:	78fb      	ldrb	r3, [r7, #3]
 800b758:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b75c:	68f9      	ldr	r1, [r7, #12]
 800b75e:	4613      	mov	r3, r2
 800b760:	00db      	lsls	r3, r3, #3
 800b762:	4413      	add	r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	440b      	add	r3, r1
 800b768:	3316      	adds	r3, #22
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	e00b      	b.n	800b786 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b76e:	78fb      	ldrb	r3, [r7, #3]
 800b770:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b774:	68f9      	ldr	r1, [r7, #12]
 800b776:	4613      	mov	r3, r2
 800b778:	00db      	lsls	r3, r3, #3
 800b77a:	4413      	add	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	440b      	add	r3, r1
 800b780:	f203 2356 	addw	r3, r3, #598	; 0x256
 800b784:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b786:	4618      	mov	r0, r3
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b084      	sub	sp, #16
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	460b      	mov	r3, r1
 800b79c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7ac:	78fa      	ldrb	r2, [r7, #3]
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7f7 fc5c 	bl	800306e <HAL_PCD_SetAddress>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 f875 	bl	800b8ac <USBD_Get_USB_Status>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	607a      	str	r2, [r7, #4]
 800b7da:	603b      	str	r3, [r7, #0]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7ee:	7af9      	ldrb	r1, [r7, #11]
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	f7f7 fd64 	bl	80032c0 <HAL_PCD_EP_Transmit>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	4618      	mov	r0, r3
 800b800:	f000 f854 	bl	800b8ac <USBD_Get_USB_Status>
 800b804:	4603      	mov	r3, r0
 800b806:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b808:	7dbb      	ldrb	r3, [r7, #22]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b086      	sub	sp, #24
 800b816:	af00      	add	r7, sp, #0
 800b818:	60f8      	str	r0, [r7, #12]
 800b81a:	607a      	str	r2, [r7, #4]
 800b81c:	603b      	str	r3, [r7, #0]
 800b81e:	460b      	mov	r3, r1
 800b820:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b830:	7af9      	ldrb	r1, [r7, #11]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	f7f7 fcf0 	bl	800321a <HAL_PCD_EP_Receive>
 800b83a:	4603      	mov	r3, r0
 800b83c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
 800b840:	4618      	mov	r0, r3
 800b842:	f000 f833 	bl	800b8ac <USBD_Get_USB_Status>
 800b846:	4603      	mov	r3, r0
 800b848:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b84a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	460b      	mov	r3, r1
 800b85e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b866:	78fa      	ldrb	r2, [r7, #3]
 800b868:	4611      	mov	r1, r2
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7f7 fd10 	bl	8003290 <HAL_PCD_EP_GetRxCount>
 800b870:	4603      	mov	r3, r0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
	...

0800b87c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b884:	4b03      	ldr	r3, [pc, #12]	; (800b894 <USBD_static_malloc+0x18>)
}
 800b886:	4618      	mov	r0, r3
 800b888:	370c      	adds	r7, #12
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	20006acc 	.word	0x20006acc

0800b898 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]

}
 800b8a0:	bf00      	nop
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b8ba:	79fb      	ldrb	r3, [r7, #7]
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	d817      	bhi.n	800b8f0 <USBD_Get_USB_Status+0x44>
 800b8c0:	a201      	add	r2, pc, #4	; (adr r2, 800b8c8 <USBD_Get_USB_Status+0x1c>)
 800b8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c6:	bf00      	nop
 800b8c8:	0800b8d9 	.word	0x0800b8d9
 800b8cc:	0800b8df 	.word	0x0800b8df
 800b8d0:	0800b8e5 	.word	0x0800b8e5
 800b8d4:	0800b8eb 	.word	0x0800b8eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	73fb      	strb	r3, [r7, #15]
    break;
 800b8dc:	e00b      	b.n	800b8f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e2:	e008      	b.n	800b8f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e8:	e005      	b.n	800b8f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ee:	e002      	b.n	800b8f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f4:	bf00      	nop
  }
  return usb_status;
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <memset>:
 800b904:	4402      	add	r2, r0
 800b906:	4603      	mov	r3, r0
 800b908:	4293      	cmp	r3, r2
 800b90a:	d100      	bne.n	800b90e <memset+0xa>
 800b90c:	4770      	bx	lr
 800b90e:	f803 1b01 	strb.w	r1, [r3], #1
 800b912:	e7f9      	b.n	800b908 <memset+0x4>

0800b914 <_reclaim_reent>:
 800b914:	4b29      	ldr	r3, [pc, #164]	; (800b9bc <_reclaim_reent+0xa8>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4283      	cmp	r3, r0
 800b91a:	b570      	push	{r4, r5, r6, lr}
 800b91c:	4604      	mov	r4, r0
 800b91e:	d04b      	beq.n	800b9b8 <_reclaim_reent+0xa4>
 800b920:	69c3      	ldr	r3, [r0, #28]
 800b922:	b143      	cbz	r3, 800b936 <_reclaim_reent+0x22>
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d144      	bne.n	800b9b4 <_reclaim_reent+0xa0>
 800b92a:	69e3      	ldr	r3, [r4, #28]
 800b92c:	6819      	ldr	r1, [r3, #0]
 800b92e:	b111      	cbz	r1, 800b936 <_reclaim_reent+0x22>
 800b930:	4620      	mov	r0, r4
 800b932:	f000 f879 	bl	800ba28 <_free_r>
 800b936:	6961      	ldr	r1, [r4, #20]
 800b938:	b111      	cbz	r1, 800b940 <_reclaim_reent+0x2c>
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 f874 	bl	800ba28 <_free_r>
 800b940:	69e1      	ldr	r1, [r4, #28]
 800b942:	b111      	cbz	r1, 800b94a <_reclaim_reent+0x36>
 800b944:	4620      	mov	r0, r4
 800b946:	f000 f86f 	bl	800ba28 <_free_r>
 800b94a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b94c:	b111      	cbz	r1, 800b954 <_reclaim_reent+0x40>
 800b94e:	4620      	mov	r0, r4
 800b950:	f000 f86a 	bl	800ba28 <_free_r>
 800b954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b956:	b111      	cbz	r1, 800b95e <_reclaim_reent+0x4a>
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 f865 	bl	800ba28 <_free_r>
 800b95e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b960:	b111      	cbz	r1, 800b968 <_reclaim_reent+0x54>
 800b962:	4620      	mov	r0, r4
 800b964:	f000 f860 	bl	800ba28 <_free_r>
 800b968:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b96a:	b111      	cbz	r1, 800b972 <_reclaim_reent+0x5e>
 800b96c:	4620      	mov	r0, r4
 800b96e:	f000 f85b 	bl	800ba28 <_free_r>
 800b972:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b974:	b111      	cbz	r1, 800b97c <_reclaim_reent+0x68>
 800b976:	4620      	mov	r0, r4
 800b978:	f000 f856 	bl	800ba28 <_free_r>
 800b97c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b97e:	b111      	cbz	r1, 800b986 <_reclaim_reent+0x72>
 800b980:	4620      	mov	r0, r4
 800b982:	f000 f851 	bl	800ba28 <_free_r>
 800b986:	6a23      	ldr	r3, [r4, #32]
 800b988:	b1b3      	cbz	r3, 800b9b8 <_reclaim_reent+0xa4>
 800b98a:	4620      	mov	r0, r4
 800b98c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b990:	4718      	bx	r3
 800b992:	5949      	ldr	r1, [r1, r5]
 800b994:	b941      	cbnz	r1, 800b9a8 <_reclaim_reent+0x94>
 800b996:	3504      	adds	r5, #4
 800b998:	69e3      	ldr	r3, [r4, #28]
 800b99a:	2d80      	cmp	r5, #128	; 0x80
 800b99c:	68d9      	ldr	r1, [r3, #12]
 800b99e:	d1f8      	bne.n	800b992 <_reclaim_reent+0x7e>
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	f000 f841 	bl	800ba28 <_free_r>
 800b9a6:	e7c0      	b.n	800b92a <_reclaim_reent+0x16>
 800b9a8:	680e      	ldr	r6, [r1, #0]
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f000 f83c 	bl	800ba28 <_free_r>
 800b9b0:	4631      	mov	r1, r6
 800b9b2:	e7ef      	b.n	800b994 <_reclaim_reent+0x80>
 800b9b4:	2500      	movs	r5, #0
 800b9b6:	e7ef      	b.n	800b998 <_reclaim_reent+0x84>
 800b9b8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ba:	bf00      	nop
 800b9bc:	20000174 	.word	0x20000174

0800b9c0 <__libc_init_array>:
 800b9c0:	b570      	push	{r4, r5, r6, lr}
 800b9c2:	4d0d      	ldr	r5, [pc, #52]	; (800b9f8 <__libc_init_array+0x38>)
 800b9c4:	4c0d      	ldr	r4, [pc, #52]	; (800b9fc <__libc_init_array+0x3c>)
 800b9c6:	1b64      	subs	r4, r4, r5
 800b9c8:	10a4      	asrs	r4, r4, #2
 800b9ca:	2600      	movs	r6, #0
 800b9cc:	42a6      	cmp	r6, r4
 800b9ce:	d109      	bne.n	800b9e4 <__libc_init_array+0x24>
 800b9d0:	4d0b      	ldr	r5, [pc, #44]	; (800ba00 <__libc_init_array+0x40>)
 800b9d2:	4c0c      	ldr	r4, [pc, #48]	; (800ba04 <__libc_init_array+0x44>)
 800b9d4:	f000 f880 	bl	800bad8 <_init>
 800b9d8:	1b64      	subs	r4, r4, r5
 800b9da:	10a4      	asrs	r4, r4, #2
 800b9dc:	2600      	movs	r6, #0
 800b9de:	42a6      	cmp	r6, r4
 800b9e0:	d105      	bne.n	800b9ee <__libc_init_array+0x2e>
 800b9e2:	bd70      	pop	{r4, r5, r6, pc}
 800b9e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9e8:	4798      	blx	r3
 800b9ea:	3601      	adds	r6, #1
 800b9ec:	e7ee      	b.n	800b9cc <__libc_init_array+0xc>
 800b9ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9f2:	4798      	blx	r3
 800b9f4:	3601      	adds	r6, #1
 800b9f6:	e7f2      	b.n	800b9de <__libc_init_array+0x1e>
 800b9f8:	0800bba8 	.word	0x0800bba8
 800b9fc:	0800bba8 	.word	0x0800bba8
 800ba00:	0800bba8 	.word	0x0800bba8
 800ba04:	0800bbac 	.word	0x0800bbac

0800ba08 <__retarget_lock_acquire_recursive>:
 800ba08:	4770      	bx	lr

0800ba0a <__retarget_lock_release_recursive>:
 800ba0a:	4770      	bx	lr

0800ba0c <memcpy>:
 800ba0c:	440a      	add	r2, r1
 800ba0e:	4291      	cmp	r1, r2
 800ba10:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba14:	d100      	bne.n	800ba18 <memcpy+0xc>
 800ba16:	4770      	bx	lr
 800ba18:	b510      	push	{r4, lr}
 800ba1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba22:	4291      	cmp	r1, r2
 800ba24:	d1f9      	bne.n	800ba1a <memcpy+0xe>
 800ba26:	bd10      	pop	{r4, pc}

0800ba28 <_free_r>:
 800ba28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba2a:	2900      	cmp	r1, #0
 800ba2c:	d044      	beq.n	800bab8 <_free_r+0x90>
 800ba2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba32:	9001      	str	r0, [sp, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f1a1 0404 	sub.w	r4, r1, #4
 800ba3a:	bfb8      	it	lt
 800ba3c:	18e4      	addlt	r4, r4, r3
 800ba3e:	f000 f83f 	bl	800bac0 <__malloc_lock>
 800ba42:	4a1e      	ldr	r2, [pc, #120]	; (800babc <_free_r+0x94>)
 800ba44:	9801      	ldr	r0, [sp, #4]
 800ba46:	6813      	ldr	r3, [r2, #0]
 800ba48:	b933      	cbnz	r3, 800ba58 <_free_r+0x30>
 800ba4a:	6063      	str	r3, [r4, #4]
 800ba4c:	6014      	str	r4, [r2, #0]
 800ba4e:	b003      	add	sp, #12
 800ba50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba54:	f000 b83a 	b.w	800bacc <__malloc_unlock>
 800ba58:	42a3      	cmp	r3, r4
 800ba5a:	d908      	bls.n	800ba6e <_free_r+0x46>
 800ba5c:	6825      	ldr	r5, [r4, #0]
 800ba5e:	1961      	adds	r1, r4, r5
 800ba60:	428b      	cmp	r3, r1
 800ba62:	bf01      	itttt	eq
 800ba64:	6819      	ldreq	r1, [r3, #0]
 800ba66:	685b      	ldreq	r3, [r3, #4]
 800ba68:	1949      	addeq	r1, r1, r5
 800ba6a:	6021      	streq	r1, [r4, #0]
 800ba6c:	e7ed      	b.n	800ba4a <_free_r+0x22>
 800ba6e:	461a      	mov	r2, r3
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	b10b      	cbz	r3, 800ba78 <_free_r+0x50>
 800ba74:	42a3      	cmp	r3, r4
 800ba76:	d9fa      	bls.n	800ba6e <_free_r+0x46>
 800ba78:	6811      	ldr	r1, [r2, #0]
 800ba7a:	1855      	adds	r5, r2, r1
 800ba7c:	42a5      	cmp	r5, r4
 800ba7e:	d10b      	bne.n	800ba98 <_free_r+0x70>
 800ba80:	6824      	ldr	r4, [r4, #0]
 800ba82:	4421      	add	r1, r4
 800ba84:	1854      	adds	r4, r2, r1
 800ba86:	42a3      	cmp	r3, r4
 800ba88:	6011      	str	r1, [r2, #0]
 800ba8a:	d1e0      	bne.n	800ba4e <_free_r+0x26>
 800ba8c:	681c      	ldr	r4, [r3, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	6053      	str	r3, [r2, #4]
 800ba92:	440c      	add	r4, r1
 800ba94:	6014      	str	r4, [r2, #0]
 800ba96:	e7da      	b.n	800ba4e <_free_r+0x26>
 800ba98:	d902      	bls.n	800baa0 <_free_r+0x78>
 800ba9a:	230c      	movs	r3, #12
 800ba9c:	6003      	str	r3, [r0, #0]
 800ba9e:	e7d6      	b.n	800ba4e <_free_r+0x26>
 800baa0:	6825      	ldr	r5, [r4, #0]
 800baa2:	1961      	adds	r1, r4, r5
 800baa4:	428b      	cmp	r3, r1
 800baa6:	bf04      	itt	eq
 800baa8:	6819      	ldreq	r1, [r3, #0]
 800baaa:	685b      	ldreq	r3, [r3, #4]
 800baac:	6063      	str	r3, [r4, #4]
 800baae:	bf04      	itt	eq
 800bab0:	1949      	addeq	r1, r1, r5
 800bab2:	6021      	streq	r1, [r4, #0]
 800bab4:	6054      	str	r4, [r2, #4]
 800bab6:	e7ca      	b.n	800ba4e <_free_r+0x26>
 800bab8:	b003      	add	sp, #12
 800baba:	bd30      	pop	{r4, r5, pc}
 800babc:	2000a85c 	.word	0x2000a85c

0800bac0 <__malloc_lock>:
 800bac0:	4801      	ldr	r0, [pc, #4]	; (800bac8 <__malloc_lock+0x8>)
 800bac2:	f7ff bfa1 	b.w	800ba08 <__retarget_lock_acquire_recursive>
 800bac6:	bf00      	nop
 800bac8:	2000a858 	.word	0x2000a858

0800bacc <__malloc_unlock>:
 800bacc:	4801      	ldr	r0, [pc, #4]	; (800bad4 <__malloc_unlock+0x8>)
 800bace:	f7ff bf9c 	b.w	800ba0a <__retarget_lock_release_recursive>
 800bad2:	bf00      	nop
 800bad4:	2000a858 	.word	0x2000a858

0800bad8 <_init>:
 800bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bada:	bf00      	nop
 800badc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bade:	bc08      	pop	{r3}
 800bae0:	469e      	mov	lr, r3
 800bae2:	4770      	bx	lr

0800bae4 <_fini>:
 800bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae6:	bf00      	nop
 800bae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baea:	bc08      	pop	{r3}
 800baec:	469e      	mov	lr, r3
 800baee:	4770      	bx	lr
